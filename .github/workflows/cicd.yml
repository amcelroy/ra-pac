name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build_check:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rustup
        run: |
          sudo apt-get update
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "export PATH=\$HOME/.cargo/bin:\$PATH:/usr/bin" >> $GITHUB_ENV
        shell: bash

      - name: Rust Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Setup Rust Environment
        run: |
          rustup component add rustfmt
          rustup component add clippy
          rustup target add thumbv7em-none-eabihf
          rustup target add thumbv8m.base-none-eabi
          rustup target add thumbv8m.main-none-eabihf
        shell: bash

      # RA0 Series (Cortex-M23)
      - name: Build for ra0e1
        run: cargo build --target thumbv8m.base-none-eabi --features ra0e1 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra2a1
        run: cargo build --target thumbv8m.base-none-eabi --features ra2a1 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra2a2
        run: cargo build --target thumbv8m.base-none-eabi --features ra2a2 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra2e1
        run: cargo build --target thumbv8m.base-none-eabi --features ra2e1 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra2e2
        run: cargo build --target thumbv8m.base-none-eabi --features ra2e2 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra2e3
        run: cargo build --target thumbv8m.base-none-eabi --features ra2e3 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra2l1
        run: cargo build --target thumbv8m.base-none-eabi --features ra2l1 --features rt --features defmt
        continue-on-error: true

      # RA4 Series (Cortex-M4 and Cortex-M33)
      - name: Build for ra4e1
        run: cargo build --target thumbv8m.main-none-eabihf --features ra4e1 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra4m1
        run: cargo build --target thumbv7em-none-eabihf --features ra4m1 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra4m2
        run: cargo build --target thumbv7em-none-eabihf --features ra4m2 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra4m3
        run: cargo build --target thumbv7em-none-eabihf --features ra4m3 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra4w1
        run: cargo build --target thumbv7em-none-eabihf --features ra4w1 --features rt --features defmt
        continue-on-error: true

      # RA6 Series (Cortex-M4 and Cortex-M33)
      - name: Build for ra6e1
        run: cargo build --target thumbv8m.main-none-eabihf --features ra6e1 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra6m1
        run: cargo build --target thumbv7em-none-eabihf --features ra6m1 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra6m2
        run: cargo build --target thumbv7em-none-eabihf --features ra6m2 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra6m3
        run: cargo build --target thumbv7em-none-eabihf --features ra6m3 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra6m4
        run: cargo build --target thumbv8m.main-none-eabihf --features ra6m4 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra6m5
        run: cargo build --target thumbv8m.main-none-eabihf --features ra6m5 --features rt --features defmt
        continue-on-error: true

      - name: Build for ra6t1
        run: cargo build --target thumbv7em-none-eabihf --features ra6t1 --features rt --features defmt
        continue-on-error: true

  format_check:
    name: Code Formatting Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rustup
        run: |
          sudo apt-get update
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "export PATH=\$HOME/.cargo/bin:\$PATH:/usr/bin" >> $GITHUB_ENV
        shell: bash

      - name: Rust Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run rustfmt check
        run: cargo fmt --all -- --check
        continue-on-error: true

#  clippy_check:
#    name: Code Linting Check
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install Rustup
#        run: |
#          sudo apt-get update
#          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
#          echo "export PATH=\$HOME/.cargo/bin:\$PATH:/usr/bin" >> $GITHUB_ENV
#        shell: bash
#
#      - name: Rust Cache
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.cargo/registry
#            ~/.cargo/git
#            target
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#          restore-keys: ${{ runner.os }}-cargo-
#
#      # RA Series Clippy Checks (Add all RA series devices here)
#      - name: Clippy check for ra0e1
#        run: cargo clippy --target thumbv8m.base-none-eabi --features ra0e1 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra2a1
#        run: cargo clippy --target thumbv8m.base-none-eabi --features ra2a1 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra2e1
#        run: cargo clippy --target thumbv8m.base-none-eabi --features ra2e1 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra2e2
#        run: cargo clippy --target thumbv8m.base-none-eabi --features ra2e2 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra2e3
#        run: cargo clippy --target thumbv8m.base-none-eabi --features ra2e3 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra2l1
#        run: cargo clippy --target thumbv8m.base-none-eabi --features ra2l1 -- -D warnings
#        continue-on-error: true
#
#      # RA4 Series (Cortex-M4 and Cortex-M33)
#      - name: Clippy check for ra4e1
#        run: cargo clippy --target thumbv8m.main-none-eabihf --features ra4e1 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra4m1
#        run: cargo clippy --target thumbv7em-none-eabihf --features ra4m1 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra4m2
#        run: cargo clippy --target thumbv7em-none-eabihf --features ra4m2 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra4m3
#        run: cargo clippy --target thumbv7em-none-eabihf --features ra4m3 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra4w1
#        run: cargo clippy --target thumbv7em-none-eabihf --features ra4w1 -- -D warnings
#        continue-on-error: true
#
#      # RA6 Series (Cortex-M4 and Cortex-M33)
#      - name: Clippy check for ra6e1
#        run: cargo clippy --target thumbv8m.main-none-eabihf --features ra6e1 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra6m1
#        run: cargo clippy --target thumbv7em-none-eabihf --features ra6m1 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra6m2
#        run: cargo clippy --target thumbv7em-none-eabihf --features ra6m2 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra6m3
#        run: cargo clippy --target thumbv7em-none-eabihf --features ra6m3 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra6m4
#        run: cargo clippy --target thumbv8m.main-none-eabihf --features ra6m4 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra6m5
#        run: cargo clippy --target thumbv8m.main-none-eabihf --features ra6m5 -- -D warnings
#        continue-on-error: true
#
#      - name: Clippy check for ra6t1
#        run: cargo clippy --target thumbv7em-none-eabihf --features ra6t1 -- -D warnings
#        continue-on-error: true

#  test:
#    name: Run Tests
#    runs-on: ubuntu-latest
#    needs: check
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Install Rustup
#        run: |
#          sudo apt-get update
#          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
#          echo "export PATH=\$HOME/.cargo/bin:\$PATH:/usr/bin" >> $GITHUB_ENV
#        shell: bash
#
#      - name: Rust Cache
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.cargo/registry
#            ~/.cargo/git
#            target
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#          restore-keys: ${{ runner.os }}-cargo-
#
#      - name: Run tests
#        run: cargo test --workspace
#
#  release:
#    name: Create Release
#    runs-on: ubuntu-latest
#    needs: [build, test]
#    if: startsWith(github.ref, 'refs/tags/v')
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: firmware-binaries
#          path: release-binaries
#
#      - name: Create Release
#        id: create_release
#        uses: softprops/action-gh-release@v1
#        with:
#          name: Release ${{ github.ref_name }}
#          draft: false
#          prerelease: false
#          generate_release_notes: true
#          files: |
#            release-binaries/**/*.bin
#            release-binaries/**/*.hex
#            release-binaries/**/*.elf
