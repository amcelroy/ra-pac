/*
DISCLAIMER
This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
applicable laws, including copyright laws.
THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability
of this software. By using this software, you agree to the additional terms and conditions found by accessing the
following link:
http://www.renesas.com/disclaimer

*/
// Generated from SVD 1.2, with svd2pac 0.4.0 on Sat, 12 Apr 2025 22:19:02 +0000

#![allow(clippy::identity_op)]
#![allow(clippy::module_inception)]
#![allow(clippy::derivable_impls)]
#[allow(unused_imports)]
use crate::common::sealed;
#[allow(unused_imports)]
use crate::common::*;
#[doc = r"I2C I3C unified IP"]
unsafe impl ::core::marker::Send for super::I3C {}
unsafe impl ::core::marker::Sync for super::I3C {}
impl super::I3C {
    #[allow(unused)]
    #[inline(always)]
    pub(crate) const fn _svd2pac_as_ptr(&self) -> *mut u8 {
        self.ptr
    }
    #[doc = "Protocol Selection Register"]
    #[inline(always)]
    pub const fn prts(&self) -> &'static crate::common::Reg<self::Prts_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Prts_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(0usize),
            )
        }
    }

    #[doc = "Protocol Selection Register"]
    #[inline(always)]
    pub const fn prts_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::PrtsHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PrtsHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(0usize),
            )
        }
    }

    #[doc = "Protocol Selection Register"]
    #[inline(always)]
    pub const fn prts_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::PrtsByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PrtsByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(0usize),
            )
        }
    }

    #[doc = "Bus Control Register"]
    #[inline(always)]
    pub const fn bctl(&self) -> &'static crate::common::Reg<self::Bctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Bctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(20usize),
            )
        }
    }

    #[doc = "Bus Control Register"]
    #[inline(always)]
    pub const fn bctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(20usize),
            )
        }
    }

    #[doc = "Bus Control Register"]
    #[inline(always)]
    pub const fn bctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(20usize),
            )
        }
    }

    #[doc = "Bus Control Register"]
    #[inline(always)]
    pub const fn bctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(21usize),
            )
        }
    }

    #[doc = "Bus Control Register"]
    #[inline(always)]
    pub const fn bctl_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::BctlHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BctlHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(22usize),
            )
        }
    }

    #[doc = "Bus Control Register"]
    #[inline(always)]
    pub const fn bctl_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::BctlByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BctlByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(23usize),
            )
        }
    }

    #[doc = "Master Device Address Register"]
    #[inline(always)]
    pub const fn msdvad(
        &self,
    ) -> &'static crate::common::Reg<self::Msdvad_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdvad_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(24usize),
            )
        }
    }

    #[doc = "Master Device Address Register"]
    #[inline(always)]
    pub const fn msdvad_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::MsdvadHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::MsdvadHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(26usize),
            )
        }
    }

    #[doc = "Master Device Address Register"]
    #[inline(always)]
    pub const fn msdvad_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::MsdvadByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::MsdvadByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(26usize),
            )
        }
    }

    #[doc = "Master Device Address Register"]
    #[inline(always)]
    pub const fn msdvad_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::MsdvadByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::MsdvadByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(27usize),
            )
        }
    }

    #[doc = "Reset Control Register"]
    #[inline(always)]
    pub const fn rstctl(
        &self,
    ) -> &'static crate::common::Reg<self::Rstctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Rstctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(32usize),
            )
        }
    }

    #[doc = "Reset Control Register"]
    #[inline(always)]
    pub const fn rstctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::RstctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(32usize),
            )
        }
    }

    #[doc = "Reset Control Register"]
    #[inline(always)]
    pub const fn rstctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RstctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(32usize),
            )
        }
    }

    #[doc = "Reset Control Register"]
    #[inline(always)]
    pub const fn rstctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::RstctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(33usize),
            )
        }
    }

    #[doc = "Reset Control Register"]
    #[inline(always)]
    pub const fn rstctl_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::RstctlHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstctlHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(34usize),
            )
        }
    }

    #[doc = "Reset Control Register"]
    #[inline(always)]
    pub const fn rstctl_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::RstctlByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstctlByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(34usize),
            )
        }
    }

    #[doc = "Present State Register"]
    #[inline(always)]
    pub const fn prsst(&self) -> &'static crate::common::Reg<self::Prsst_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Prsst_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(36usize),
            )
        }
    }

    #[doc = "Present State Register"]
    #[inline(always)]
    pub const fn prsst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::PrsstHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PrsstHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(36usize),
            )
        }
    }

    #[doc = "Present State Register"]
    #[inline(always)]
    pub const fn prsst_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::PrsstByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PrsstByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(36usize),
            )
        }
    }

    #[doc = "Internal Status Register"]
    #[inline(always)]
    pub const fn inst(&self) -> &'static crate::common::Reg<self::Inst_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Inst_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(48usize),
            )
        }
    }

    #[doc = "Internal Status Register"]
    #[inline(always)]
    pub const fn inst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::InstHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::InstHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(48usize),
            )
        }
    }

    #[doc = "Internal Status Register"]
    #[inline(always)]
    pub const fn inst_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::InstByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::InstByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(49usize),
            )
        }
    }

    #[doc = "Internal Status Enable Register"]
    #[inline(always)]
    pub const fn inste(&self) -> &'static crate::common::Reg<self::Inste_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Inste_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(52usize),
            )
        }
    }

    #[doc = "Internal Status Enable Register"]
    #[inline(always)]
    pub const fn inste_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::InsteHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::InsteHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(52usize),
            )
        }
    }

    #[doc = "Internal Status Enable Register"]
    #[inline(always)]
    pub const fn inste_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::InsteByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::InsteByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(53usize),
            )
        }
    }

    #[doc = "Internal Interrupt Enable Register"]
    #[inline(always)]
    pub const fn inie(&self) -> &'static crate::common::Reg<self::Inie_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Inie_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(56usize),
            )
        }
    }

    #[doc = "Internal Interrupt Enable Register"]
    #[inline(always)]
    pub const fn inie_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::InieHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::InieHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(56usize),
            )
        }
    }

    #[doc = "Internal Interrupt Enable Register"]
    #[inline(always)]
    pub const fn inie_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::InieByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::InieByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(57usize),
            )
        }
    }

    #[doc = "Internal Status Force Register"]
    #[inline(always)]
    pub const fn instfc(&self) -> &'static crate::common::Reg<self::Instfc_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Instfc_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(60usize),
            )
        }
    }

    #[doc = "Internal Status Force Register"]
    #[inline(always)]
    pub const fn instfc_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::InstfcHaL_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::InstfcHaL_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(60usize),
            )
        }
    }

    #[doc = "Internal Status Force Register"]
    #[inline(always)]
    pub const fn instfc_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::InstfcByLh_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::InstfcByLh_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(61usize),
            )
        }
    }

    #[doc = "Device Characteristic Table Register"]
    #[inline(always)]
    pub const fn dvct(&self) -> &'static crate::common::Reg<self::Dvct_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Dvct_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(68usize),
            )
        }
    }

    #[doc = "Device Characteristic Table Register"]
    #[inline(always)]
    pub const fn dvct_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::DvctHaH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::DvctHaH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(70usize),
            )
        }
    }

    #[doc = "Device Characteristic Table Register"]
    #[inline(always)]
    pub const fn dvct_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::DvctByHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::DvctByHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(70usize),
            )
        }
    }

    #[doc = "IBI Notify Control Register"]
    #[inline(always)]
    pub const fn ibinctl(
        &self,
    ) -> &'static crate::common::Reg<self::Ibinctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ibinctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(88usize),
            )
        }
    }

    #[doc = "IBI Notify Control Register"]
    #[inline(always)]
    pub const fn ibinctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::IbinctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::IbinctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(88usize),
            )
        }
    }

    #[doc = "IBI Notify Control Register"]
    #[inline(always)]
    pub const fn ibinctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::IbinctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::IbinctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(88usize),
            )
        }
    }

    #[doc = "Bus Function Control Register"]
    #[inline(always)]
    pub const fn bfctl(&self) -> &'static crate::common::Reg<self::Bfctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Bfctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(96usize),
            )
        }
    }

    #[doc = "Bus Function Control Register"]
    #[inline(always)]
    pub const fn bfctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BfctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BfctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(96usize),
            )
        }
    }

    #[doc = "Bus Function Control Register"]
    #[inline(always)]
    pub const fn bfctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BfctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BfctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(96usize),
            )
        }
    }

    #[doc = "Bus Function Control Register"]
    #[inline(always)]
    pub const fn bfctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BfctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BfctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(97usize),
            )
        }
    }

    #[doc = "Slave Control Register"]
    #[inline(always)]
    pub const fn svctl(&self) -> &'static crate::common::Reg<self::Svctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Svctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(100usize),
            )
        }
    }

    #[doc = "Slave Control Register"]
    #[inline(always)]
    pub const fn svctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::SvctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(100usize),
            )
        }
    }

    #[doc = "Slave Control Register"]
    #[inline(always)]
    pub const fn svctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::SvctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(100usize),
            )
        }
    }

    #[doc = "Slave Control Register"]
    #[inline(always)]
    pub const fn svctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::SvctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(101usize),
            )
        }
    }

    #[doc = "Slave Control Register"]
    #[inline(always)]
    pub const fn svctl_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::SvctlHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvctlHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(102usize),
            )
        }
    }

    #[doc = "Slave Control Register"]
    #[inline(always)]
    pub const fn svctl_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::SvctlByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvctlByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(102usize),
            )
        }
    }

    #[doc = "Reference Clock Control Register"]
    #[inline(always)]
    pub const fn refckctl(
        &self,
    ) -> &'static crate::common::Reg<self::Refckctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Refckctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(112usize),
            )
        }
    }

    #[doc = "Reference Clock Control Register"]
    #[inline(always)]
    pub const fn refckctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::RefckctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RefckctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(112usize),
            )
        }
    }

    #[doc = "Reference Clock Control Register"]
    #[inline(always)]
    pub const fn refckctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RefckctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RefckctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(112usize),
            )
        }
    }

    #[doc = "Standard Bit Rate Register"]
    #[inline(always)]
    pub const fn stdbr(&self) -> &'static crate::common::Reg<self::Stdbr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Stdbr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(116usize),
            )
        }
    }

    #[doc = "Standard Bit Rate Register"]
    #[inline(always)]
    pub const fn stdbr_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::StdbrHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::StdbrHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(116usize),
            )
        }
    }

    #[doc = "Standard Bit Rate Register"]
    #[inline(always)]
    pub const fn stdbr_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::StdbrByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::StdbrByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(116usize),
            )
        }
    }

    #[doc = "Standard Bit Rate Register"]
    #[inline(always)]
    pub const fn stdbr_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::StdbrByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::StdbrByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(117usize),
            )
        }
    }

    #[doc = "Standard Bit Rate Register"]
    #[inline(always)]
    pub const fn stdbr_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::StdbrHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::StdbrHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(118usize),
            )
        }
    }

    #[doc = "Standard Bit Rate Register"]
    #[inline(always)]
    pub const fn stdbr_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::StdbrByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::StdbrByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(118usize),
            )
        }
    }

    #[doc = "Standard Bit Rate Register"]
    #[inline(always)]
    pub const fn stdbr_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::StdbrByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::StdbrByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(119usize),
            )
        }
    }

    #[doc = "Extended Bit Rate Register"]
    #[inline(always)]
    pub const fn extbr(&self) -> &'static crate::common::Reg<self::Extbr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Extbr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(120usize),
            )
        }
    }

    #[doc = "Extended Bit Rate Register"]
    #[inline(always)]
    pub const fn extbr_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::ExtbrHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExtbrHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(120usize),
            )
        }
    }

    #[doc = "Extended Bit Rate Register"]
    #[inline(always)]
    pub const fn extbr_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::ExtbrByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExtbrByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(120usize),
            )
        }
    }

    #[doc = "Extended Bit Rate Register"]
    #[inline(always)]
    pub const fn extbr_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::ExtbrByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExtbrByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(121usize),
            )
        }
    }

    #[doc = "Extended Bit Rate Register"]
    #[inline(always)]
    pub const fn extbr_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::ExtbrHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExtbrHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(122usize),
            )
        }
    }

    #[doc = "Extended Bit Rate Register"]
    #[inline(always)]
    pub const fn extbr_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::ExtbrByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExtbrByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(122usize),
            )
        }
    }

    #[doc = "Extended Bit Rate Register"]
    #[inline(always)]
    pub const fn extbr_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::ExtbrByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExtbrByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(123usize),
            )
        }
    }

    #[doc = "Bus Free Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bfrecdt(
        &self,
    ) -> &'static crate::common::Reg<self::Bfrecdt_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Bfrecdt_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(124usize),
            )
        }
    }

    #[doc = "Bus Free Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bfrecdt_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BfrecdtHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BfrecdtHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(124usize),
            )
        }
    }

    #[doc = "Bus Free Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bfrecdt_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BfrecdtByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BfrecdtByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(124usize),
            )
        }
    }

    #[doc = "Bus Free Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bfrecdt_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BfrecdtByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BfrecdtByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(125usize),
            )
        }
    }

    #[doc = "Bus Available Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bavlcdt(
        &self,
    ) -> &'static crate::common::Reg<self::Bavlcdt_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Bavlcdt_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(128usize),
            )
        }
    }

    #[doc = "Bus Available Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bavlcdt_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BavlcdtHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BavlcdtHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(128usize),
            )
        }
    }

    #[doc = "Bus Available Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bavlcdt_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BavlcdtByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BavlcdtByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(128usize),
            )
        }
    }

    #[doc = "Bus Available Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bavlcdt_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BavlcdtByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BavlcdtByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(129usize),
            )
        }
    }

    #[doc = "Bus Idle Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bidlcdt(
        &self,
    ) -> &'static crate::common::Reg<self::Bidlcdt_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Bidlcdt_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(132usize),
            )
        }
    }

    #[doc = "Bus Idle Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bidlcdt_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BidlcdtHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BidlcdtHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(132usize),
            )
        }
    }

    #[doc = "Bus Idle Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bidlcdt_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BidlcdtByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BidlcdtByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(132usize),
            )
        }
    }

    #[doc = "Bus Idle Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bidlcdt_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BidlcdtByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BidlcdtByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(133usize),
            )
        }
    }

    #[doc = "Bus Idle Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bidlcdt_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::BidlcdtHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BidlcdtHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(134usize),
            )
        }
    }

    #[doc = "Bus Idle Condition Detection Time Register"]
    #[inline(always)]
    pub const fn bidlcdt_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::BidlcdtByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BidlcdtByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(134usize),
            )
        }
    }

    #[doc = "Output Control Register"]
    #[inline(always)]
    pub const fn outctl(
        &self,
    ) -> &'static crate::common::Reg<self::Outctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Outctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(136usize),
            )
        }
    }

    #[doc = "Output Control Register"]
    #[inline(always)]
    pub const fn outctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::OutctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::OutctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(136usize),
            )
        }
    }

    #[doc = "Output Control Register"]
    #[inline(always)]
    pub const fn outctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::OutctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::OutctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(136usize),
            )
        }
    }

    #[doc = "Output Control Register"]
    #[inline(always)]
    pub const fn outctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::OutctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::OutctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(137usize),
            )
        }
    }

    #[doc = "Input Control Register"]
    #[inline(always)]
    pub const fn inctl(&self) -> &'static crate::common::Reg<self::Inctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Inctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(140usize),
            )
        }
    }

    #[doc = "Input Control Register"]
    #[inline(always)]
    pub const fn inctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::InctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::InctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(140usize),
            )
        }
    }

    #[doc = "Input Control Register"]
    #[inline(always)]
    pub const fn inctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::InctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::InctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(140usize),
            )
        }
    }

    #[doc = "Timeout Control Register"]
    #[inline(always)]
    pub const fn tmoctl(
        &self,
    ) -> &'static crate::common::Reg<self::Tmoctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Tmoctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(144usize),
            )
        }
    }

    #[doc = "Timeout Control Register"]
    #[inline(always)]
    pub const fn tmoctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::TmoctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::TmoctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(144usize),
            )
        }
    }

    #[doc = "Timeout Control Register"]
    #[inline(always)]
    pub const fn tmoctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::TmoctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::TmoctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(144usize),
            )
        }
    }

    #[doc = "Wake Up Unit Control Register"]
    #[inline(always)]
    pub const fn wuctl(&self) -> &'static crate::common::Reg<self::Wuctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Wuctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(152usize),
            )
        }
    }

    #[doc = "Wake Up Unit Control Register"]
    #[inline(always)]
    pub const fn wuctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::WuctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::WuctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(152usize),
            )
        }
    }

    #[doc = "Wake Up Unit Control Register"]
    #[inline(always)]
    pub const fn wuctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::WuctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::WuctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(152usize),
            )
        }
    }

    #[doc = "Acknowledge Control Register"]
    #[inline(always)]
    pub const fn ackctl(
        &self,
    ) -> &'static crate::common::Reg<self::Ackctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ackctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(160usize),
            )
        }
    }

    #[doc = "Acknowledge Control Register"]
    #[inline(always)]
    pub const fn ackctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::AckctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AckctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(160usize),
            )
        }
    }

    #[doc = "Acknowledge Control Register"]
    #[inline(always)]
    pub const fn ackctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::AckctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AckctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(160usize),
            )
        }
    }

    #[doc = "SCL Stretch Control Register"]
    #[inline(always)]
    pub const fn scstrctl(
        &self,
    ) -> &'static crate::common::Reg<self::Scstrctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Scstrctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(164usize),
            )
        }
    }

    #[doc = "SCL Stretch Control Register"]
    #[inline(always)]
    pub const fn scstrctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::ScstrctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ScstrctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(164usize),
            )
        }
    }

    #[doc = "SCL Stretch Control Register"]
    #[inline(always)]
    pub const fn scstrctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::ScstrctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ScstrctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(164usize),
            )
        }
    }

    #[doc = "SCL Stalling Control Register"]
    #[inline(always)]
    pub const fn scstlctl(
        &self,
    ) -> &'static crate::common::Reg<self::Scstlctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Scstlctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(176usize),
            )
        }
    }

    #[doc = "SCL Stalling Control Register"]
    #[inline(always)]
    pub const fn scstlctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::ScstlctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ScstlctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(176usize),
            )
        }
    }

    #[doc = "SCL Stalling Control Register"]
    #[inline(always)]
    pub const fn scstlctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::ScstlctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ScstlctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(176usize),
            )
        }
    }

    #[doc = "SCL Stalling Control Register"]
    #[inline(always)]
    pub const fn scstlctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::ScstlctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ScstlctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(177usize),
            )
        }
    }

    #[doc = "SCL Stalling Control Register"]
    #[inline(always)]
    pub const fn scstlctl_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::ScstlctlHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ScstlctlHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(178usize),
            )
        }
    }

    #[doc = "SCL Stalling Control Register"]
    #[inline(always)]
    pub const fn scstlctl_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::ScstlctlByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ScstlctlByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(179usize),
            )
        }
    }

    #[doc = "Slave Transfer Data Length Register 0"]
    #[inline(always)]
    pub const fn svtdlg0(
        &self,
    ) -> &'static crate::common::Reg<self::Svtdlg0_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Svtdlg0_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(192usize),
            )
        }
    }

    #[doc = "Slave Transfer Data Length Register 0"]
    #[inline(always)]
    pub const fn svtdlg0_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Svtdlg0HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Svtdlg0HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(194usize),
            )
        }
    }

    #[doc = "Slave Transfer Data Length Register 0"]
    #[inline(always)]
    pub const fn svtdlg0_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Svtdlg0ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Svtdlg0ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(194usize),
            )
        }
    }

    #[doc = "Slave Transfer Data Length Register 0"]
    #[inline(always)]
    pub const fn svtdlg0_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Svtdlg0ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Svtdlg0ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(195usize),
            )
        }
    }

    #[doc = "Synchronous Timiming Control Register"]
    #[inline(always)]
    pub const fn stctl(&self) -> &'static crate::common::Reg<self::Stctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Stctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(288usize),
            )
        }
    }

    #[doc = "Synchronous Timiming Control Register"]
    #[inline(always)]
    pub const fn stctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::StctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::StctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(288usize),
            )
        }
    }

    #[doc = "Synchronous Timiming Control Register"]
    #[inline(always)]
    pub const fn stctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::StctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::StctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(288usize),
            )
        }
    }

    #[doc = "Asynchronous Timimg Control Register"]
    #[inline(always)]
    pub const fn atctl(&self) -> &'static crate::common::Reg<self::Atctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Atctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(292usize),
            )
        }
    }

    #[doc = "Asynchronous Timimg Control Register"]
    #[inline(always)]
    pub const fn atctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::AtctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AtctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(292usize),
            )
        }
    }

    #[doc = "Asynchronous Timimg Control Register"]
    #[inline(always)]
    pub const fn atctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::AtctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AtctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(292usize),
            )
        }
    }

    #[doc = "Asynchronous Timimg Control Register"]
    #[inline(always)]
    pub const fn atctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::AtctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AtctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(293usize),
            )
        }
    }

    #[doc = "Asynchronous Timiming Trigger Register"]
    #[inline(always)]
    pub const fn attrg(&self) -> &'static crate::common::Reg<self::Attrg_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Attrg_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(296usize),
            )
        }
    }

    #[doc = "Asynchronous Timiming Trigger Register"]
    #[inline(always)]
    pub const fn attrg_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::AttrgHaL_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::AttrgHaL_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(296usize),
            )
        }
    }

    #[doc = "Asynchronous Timiming Trigger Register"]
    #[inline(always)]
    pub const fn attrg_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::AttrgByLl_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::AttrgByLl_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(296usize),
            )
        }
    }

    #[doc = "Asynchronous Timing Contorol Counter enable Register"]
    #[inline(always)]
    pub const fn atccnte(
        &self,
    ) -> &'static crate::common::Reg<self::Atccnte_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Atccnte_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(300usize),
            )
        }
    }

    #[doc = "Asynchronous Timing Contorol Counter enable Register"]
    #[inline(always)]
    pub const fn atccnte_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::AtccnteHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AtccnteHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(300usize),
            )
        }
    }

    #[doc = "Asynchronous Timing Contorol Counter enable Register"]
    #[inline(always)]
    pub const fn atccnte_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::AtccnteByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AtccnteByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(300usize),
            )
        }
    }

    #[doc = "Condition Control Register"]
    #[inline(always)]
    pub const fn cndctl(
        &self,
    ) -> &'static crate::common::Reg<self::Cndctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cndctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(320usize),
            )
        }
    }

    #[doc = "Condition Control Register"]
    #[inline(always)]
    pub const fn cndctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CndctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CndctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(320usize),
            )
        }
    }

    #[doc = "Condition Control Register"]
    #[inline(always)]
    pub const fn cndctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CndctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CndctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(320usize),
            )
        }
    }

    #[doc = "Normal Command Queue Port Register"]
    #[inline(always)]
    pub const fn ncmdqp(&self) -> &'static crate::common::Reg<self::Ncmdqp_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Ncmdqp_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(336usize),
            )
        }
    }

    #[doc = "Normal Response Queue Port Register"]
    #[inline(always)]
    pub const fn nrspqp(&self) -> &'static crate::common::Reg<self::Nrspqp_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Nrspqp_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(340usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Port Register 0"]
    #[inline(always)]
    pub const fn ntdtbp0(
        &self,
    ) -> &'static crate::common::Reg<self::Ntdtbp0_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntdtbp0_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(344usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Port Register 0"]
    #[inline(always)]
    pub const fn ntdtbp0_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Ntdtbp0ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntdtbp0ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(344usize),
            )
        }
    }

    #[doc = "Normal IBI Queue Port Register"]
    #[inline(always)]
    pub const fn nibiqp(
        &self,
    ) -> &'static crate::common::Reg<self::Nibiqp_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Nibiqp_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(380usize),
            )
        }
    }

    #[doc = "Normal Receive Status Queue Port Register"]
    #[inline(always)]
    pub const fn nrsqp(&self) -> &'static crate::common::Reg<self::Nrsqp_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Nrsqp_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(384usize),
            )
        }
    }

    #[doc = "High Priority Command Queue Port Register"]
    #[inline(always)]
    pub const fn hcmdqp(&self) -> &'static crate::common::Reg<self::Hcmdqp_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Hcmdqp_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(388usize),
            )
        }
    }

    #[doc = "High Priority Response Queue Port Register"]
    #[inline(always)]
    pub const fn hrspqp(&self) -> &'static crate::common::Reg<self::Hrspqp_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Hrspqp_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(392usize),
            )
        }
    }

    #[doc = "High Priority Transfer Data Buffer Port Register"]
    #[inline(always)]
    pub const fn htdtbp(
        &self,
    ) -> &'static crate::common::Reg<self::Htdtbp_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Htdtbp_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(396usize),
            )
        }
    }

    #[doc = "Normal Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nqthctl(
        &self,
    ) -> &'static crate::common::Reg<self::Nqthctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Nqthctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(400usize),
            )
        }
    }

    #[doc = "Normal Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nqthctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::NqthctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NqthctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(400usize),
            )
        }
    }

    #[doc = "Normal Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nqthctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::NqthctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NqthctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(400usize),
            )
        }
    }

    #[doc = "Normal Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nqthctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::NqthctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NqthctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(401usize),
            )
        }
    }

    #[doc = "Normal Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nqthctl_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::NqthctlHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NqthctlHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(402usize),
            )
        }
    }

    #[doc = "Normal Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nqthctl_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::NqthctlByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NqthctlByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(402usize),
            )
        }
    }

    #[doc = "Normal Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nqthctl_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::NqthctlByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NqthctlByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(403usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
    #[inline(always)]
    pub const fn ntbthctl0(
        &self,
    ) -> &'static crate::common::Reg<self::Ntbthctl0_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntbthctl0_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(404usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
    #[inline(always)]
    pub const fn ntbthctl0_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Ntbthctl0HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntbthctl0HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(404usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
    #[inline(always)]
    pub const fn ntbthctl0_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Ntbthctl0ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntbthctl0ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(404usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
    #[inline(always)]
    pub const fn ntbthctl0_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Ntbthctl0ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntbthctl0ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(405usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
    #[inline(always)]
    pub const fn ntbthctl0_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Ntbthctl0HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntbthctl0HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(406usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
    #[inline(always)]
    pub const fn ntbthctl0_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Ntbthctl0ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntbthctl0ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(406usize),
            )
        }
    }

    #[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
    #[inline(always)]
    pub const fn ntbthctl0_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Ntbthctl0ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntbthctl0ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(407usize),
            )
        }
    }

    #[doc = "Normal Receive Status Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nrqthctl(
        &self,
    ) -> &'static crate::common::Reg<self::Nrqthctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Nrqthctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(448usize),
            )
        }
    }

    #[doc = "Normal Receive Status Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nrqthctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::NrqthctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NrqthctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(448usize),
            )
        }
    }

    #[doc = "Normal Receive Status Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn nrqthctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::NrqthctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NrqthctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(448usize),
            )
        }
    }

    #[doc = "High Priority Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn hqthctl(
        &self,
    ) -> &'static crate::common::Reg<self::Hqthctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Hqthctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(452usize),
            )
        }
    }

    #[doc = "High Priority Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn hqthctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::HqthctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HqthctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(452usize),
            )
        }
    }

    #[doc = "High Priority Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn hqthctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HqthctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HqthctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(452usize),
            )
        }
    }

    #[doc = "High Priority Queue Threshold Control Register"]
    #[inline(always)]
    pub const fn hqthctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::HqthctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HqthctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(453usize),
            )
        }
    }

    #[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
    #[inline(always)]
    pub const fn htbthctl(
        &self,
    ) -> &'static crate::common::Reg<self::Htbthctl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Htbthctl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(456usize),
            )
        }
    }

    #[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
    #[inline(always)]
    pub const fn htbthctl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::HtbthctlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtbthctlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(456usize),
            )
        }
    }

    #[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
    #[inline(always)]
    pub const fn htbthctl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HtbthctlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtbthctlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(456usize),
            )
        }
    }

    #[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
    #[inline(always)]
    pub const fn htbthctl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::HtbthctlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtbthctlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(457usize),
            )
        }
    }

    #[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
    #[inline(always)]
    pub const fn htbthctl_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::HtbthctlHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtbthctlHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(458usize),
            )
        }
    }

    #[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
    #[inline(always)]
    pub const fn htbthctl_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::HtbthctlByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtbthctlByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(458usize),
            )
        }
    }

    #[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
    #[inline(always)]
    pub const fn htbthctl_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::HtbthctlByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtbthctlByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(459usize),
            )
        }
    }

    #[doc = "Bus Status Register"]
    #[inline(always)]
    pub const fn bst(&self) -> &'static crate::common::Reg<self::Bst_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Bst_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(464usize),
            )
        }
    }

    #[doc = "Bus Status Register"]
    #[inline(always)]
    pub const fn bst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BstHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BstHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(464usize),
            )
        }
    }

    #[doc = "Bus Status Register"]
    #[inline(always)]
    pub const fn bst_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BstByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BstByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(464usize),
            )
        }
    }

    #[doc = "Bus Status Register"]
    #[inline(always)]
    pub const fn bst_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BstByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BstByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(465usize),
            )
        }
    }

    #[doc = "Bus Status Register"]
    #[inline(always)]
    pub const fn bst_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::BstHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BstHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(466usize),
            )
        }
    }

    #[doc = "Bus Status Register"]
    #[inline(always)]
    pub const fn bst_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::BstByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BstByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(466usize),
            )
        }
    }

    #[doc = "Bus Status Register"]
    #[inline(always)]
    pub const fn bst_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::BstByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BstByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(467usize),
            )
        }
    }

    #[doc = "Bus Status Enable Register"]
    #[inline(always)]
    pub const fn bste(&self) -> &'static crate::common::Reg<self::Bste_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Bste_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(468usize),
            )
        }
    }

    #[doc = "Bus Status Enable Register"]
    #[inline(always)]
    pub const fn bste_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BsteHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BsteHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(468usize),
            )
        }
    }

    #[doc = "Bus Status Enable Register"]
    #[inline(always)]
    pub const fn bste_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BsteByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BsteByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(468usize),
            )
        }
    }

    #[doc = "Bus Status Enable Register"]
    #[inline(always)]
    pub const fn bste_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BsteByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BsteByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(469usize),
            )
        }
    }

    #[doc = "Bus Status Enable Register"]
    #[inline(always)]
    pub const fn bste_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::BsteHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BsteHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(470usize),
            )
        }
    }

    #[doc = "Bus Status Enable Register"]
    #[inline(always)]
    pub const fn bste_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::BsteByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BsteByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(470usize),
            )
        }
    }

    #[doc = "Bus Status Enable Register"]
    #[inline(always)]
    pub const fn bste_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::BsteByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BsteByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(471usize),
            )
        }
    }

    #[doc = "Bus Interrupt Enable Register"]
    #[inline(always)]
    pub const fn bie(&self) -> &'static crate::common::Reg<self::Bie_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Bie_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(472usize),
            )
        }
    }

    #[doc = "Bus Interrupt Enable Register"]
    #[inline(always)]
    pub const fn bie_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BieHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BieHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(472usize),
            )
        }
    }

    #[doc = "Bus Interrupt Enable Register"]
    #[inline(always)]
    pub const fn bie_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BieByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BieByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(472usize),
            )
        }
    }

    #[doc = "Bus Interrupt Enable Register"]
    #[inline(always)]
    pub const fn bie_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BieByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BieByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(473usize),
            )
        }
    }

    #[doc = "Bus Interrupt Enable Register"]
    #[inline(always)]
    pub const fn bie_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::BieHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BieHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(474usize),
            )
        }
    }

    #[doc = "Bus Interrupt Enable Register"]
    #[inline(always)]
    pub const fn bie_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::BieByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BieByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(474usize),
            )
        }
    }

    #[doc = "Bus Interrupt Enable Register"]
    #[inline(always)]
    pub const fn bie_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::BieByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::BieByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(475usize),
            )
        }
    }

    #[doc = "Bus Status Force Register"]
    #[inline(always)]
    pub const fn bstfc(&self) -> &'static crate::common::Reg<self::Bstfc_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Bstfc_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(476usize),
            )
        }
    }

    #[doc = "Bus Status Force Register"]
    #[inline(always)]
    pub const fn bstfc_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BstfcHaL_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::BstfcHaL_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(476usize),
            )
        }
    }

    #[doc = "Bus Status Force Register"]
    #[inline(always)]
    pub const fn bstfc_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BstfcByLl_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::BstfcByLl_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(476usize),
            )
        }
    }

    #[doc = "Bus Status Force Register"]
    #[inline(always)]
    pub const fn bstfc_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::BstfcByLh_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::BstfcByLh_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(477usize),
            )
        }
    }

    #[doc = "Bus Status Force Register"]
    #[inline(always)]
    pub const fn bstfc_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::BstfcHaH_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::BstfcHaH_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(478usize),
            )
        }
    }

    #[doc = "Bus Status Force Register"]
    #[inline(always)]
    pub const fn bstfc_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::BstfcByHl_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::BstfcByHl_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(478usize),
            )
        }
    }

    #[doc = "Bus Status Force Register"]
    #[inline(always)]
    pub const fn bstfc_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::BstfcByHh_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::BstfcByHh_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(479usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Register"]
    #[inline(always)]
    pub const fn ntst(&self) -> &'static crate::common::Reg<self::Ntst_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntst_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(480usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Register"]
    #[inline(always)]
    pub const fn ntst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::NtstHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtstHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(480usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Register"]
    #[inline(always)]
    pub const fn ntst_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::NtstByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtstByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(480usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Register"]
    #[inline(always)]
    pub const fn ntst_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::NtstByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtstByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(481usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Register"]
    #[inline(always)]
    pub const fn ntst_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::NtstHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtstHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(482usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Register"]
    #[inline(always)]
    pub const fn ntst_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::NtstByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtstByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(482usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn ntste(&self) -> &'static crate::common::Reg<self::Ntste_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntste_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(484usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn ntste_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::NtsteHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtsteHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(484usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn ntste_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::NtsteByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtsteByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(484usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn ntste_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::NtsteByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtsteByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(485usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn ntste_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::NtsteHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtsteHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(486usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn ntste_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::NtsteByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtsteByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(486usize),
            )
        }
    }

    #[doc = "Normal Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn ntie(&self) -> &'static crate::common::Reg<self::Ntie_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ntie_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(488usize),
            )
        }
    }

    #[doc = "Normal Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn ntie_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::NtieHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtieHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(488usize),
            )
        }
    }

    #[doc = "Normal Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn ntie_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::NtieByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtieByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(488usize),
            )
        }
    }

    #[doc = "Normal Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn ntie_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::NtieByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtieByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(489usize),
            )
        }
    }

    #[doc = "Normal Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn ntie_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::NtieHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtieHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(490usize),
            )
        }
    }

    #[doc = "Normal Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn ntie_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::NtieByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::NtieByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(490usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Force Register"]
    #[inline(always)]
    pub const fn ntstfc(&self) -> &'static crate::common::Reg<self::Ntstfc_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Ntstfc_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(492usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Force Register"]
    #[inline(always)]
    pub const fn ntstfc_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::NtstfcHaL_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::NtstfcHaL_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(492usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Force Register"]
    #[inline(always)]
    pub const fn ntstfc_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::NtstfcByLl_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::NtstfcByLl_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(492usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Force Register"]
    #[inline(always)]
    pub const fn ntstfc_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::NtstfcByLh_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::NtstfcByLh_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(493usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Force Register"]
    #[inline(always)]
    pub const fn ntstfc_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::NtstfcHaH_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::NtstfcHaH_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(494usize),
            )
        }
    }

    #[doc = "Normal Transfer Status Force Register"]
    #[inline(always)]
    pub const fn ntstfc_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::NtstfcByHl_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::NtstfcByHl_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(494usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Register"]
    #[inline(always)]
    pub const fn htst(&self) -> &'static crate::common::Reg<self::Htst_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Htst_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(512usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Register"]
    #[inline(always)]
    pub const fn htst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::HtstHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtstHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(512usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Register"]
    #[inline(always)]
    pub const fn htst_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HtstByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtstByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(512usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Register"]
    #[inline(always)]
    pub const fn htst_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::HtstByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtstByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(513usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn htste(&self) -> &'static crate::common::Reg<self::Htste_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Htste_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(516usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn htste_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::HtsteHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtsteHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(516usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn htste_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HtsteByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtsteByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(516usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Enable Register"]
    #[inline(always)]
    pub const fn htste_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::HtsteByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtsteByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(517usize),
            )
        }
    }

    #[doc = "High Priority Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn htie(&self) -> &'static crate::common::Reg<self::Htie_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Htie_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(520usize),
            )
        }
    }

    #[doc = "High Priority Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn htie_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::HtieHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtieHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(520usize),
            )
        }
    }

    #[doc = "High Priority Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn htie_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HtieByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtieByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(520usize),
            )
        }
    }

    #[doc = "High Priority Transfer Interrupt Enable Register"]
    #[inline(always)]
    pub const fn htie_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::HtieByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HtieByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(521usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Force Register"]
    #[inline(always)]
    pub const fn htstfc(&self) -> &'static crate::common::Reg<self::Htstfc_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Htstfc_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(524usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Force Register"]
    #[inline(always)]
    pub const fn htstfc_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::HtstfcHaL_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::HtstfcHaL_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(524usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Force Register"]
    #[inline(always)]
    pub const fn htstfc_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HtstfcByLl_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::HtstfcByLl_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(524usize),
            )
        }
    }

    #[doc = "High Priority Transfer Status Force Register"]
    #[inline(always)]
    pub const fn htstfc_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::HtstfcByLh_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::HtstfcByLh_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(525usize),
            )
        }
    }

    #[doc = "Bus Condition Status Register"]
    #[inline(always)]
    pub const fn bcst(&self) -> &'static crate::common::Reg<self::Bcst_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Bcst_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(528usize),
            )
        }
    }

    #[doc = "Bus Condition Status Register"]
    #[inline(always)]
    pub const fn bcst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BcstHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::BcstHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(528usize),
            )
        }
    }

    #[doc = "Bus Condition Status Register"]
    #[inline(always)]
    pub const fn bcst_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BcstByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::BcstByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(528usize),
            )
        }
    }

    #[doc = "Slave Status Register"]
    #[inline(always)]
    pub const fn svst(&self) -> &'static crate::common::Reg<self::Svst_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Svst_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(532usize),
            )
        }
    }

    #[doc = "Slave Status Register"]
    #[inline(always)]
    pub const fn svst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::SvstHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvstHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(532usize),
            )
        }
    }

    #[doc = "Slave Status Register"]
    #[inline(always)]
    pub const fn svst_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::SvstByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvstByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(532usize),
            )
        }
    }

    #[doc = "Slave Status Register"]
    #[inline(always)]
    pub const fn svst_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::SvstByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvstByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(533usize),
            )
        }
    }

    #[doc = "Slave Status Register"]
    #[inline(always)]
    pub const fn svst_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::SvstHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvstHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(534usize),
            )
        }
    }

    #[doc = "Slave Status Register"]
    #[inline(always)]
    pub const fn svst_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::SvstByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvstByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(534usize),
            )
        }
    }

    #[doc = "Wake Up Unit Operating Status Register"]
    #[inline(always)]
    pub const fn wust(&self) -> &'static crate::common::Reg<self::Wust_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Wust_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(536usize),
            )
        }
    }

    #[doc = "Wake Up Unit Operating Status Register"]
    #[inline(always)]
    pub const fn wust_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::WustHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::WustHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(536usize),
            )
        }
    }

    #[doc = "Wake Up Unit Operating Status Register"]
    #[inline(always)]
    pub const fn wust_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::WustByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::WustByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(536usize),
            )
        }
    }

    #[doc = "MsyncCNT Counter Capture Register"]
    #[inline(always)]
    pub const fn mrccpt(&self) -> &'static crate::common::Reg<self::Mrccpt_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Mrccpt_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(540usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn datbas0(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas0_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas0_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(548usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn datbas0_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas0HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas0HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(548usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn datbas0_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas0ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas0ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(548usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn datbas0_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas0ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas0ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(549usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn datbas0_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas0HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas0HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(550usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn datbas0_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas0ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas0ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(550usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn datbas0_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas0ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas0ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(551usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn datbas1(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas1_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas1_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(556usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn datbas1_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas1HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas1HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(556usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn datbas1_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas1ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas1ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(556usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn datbas1_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas1ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas1ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(557usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn datbas1_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas1HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas1HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(558usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn datbas1_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas1ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas1ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(558usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn datbas1_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas1ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas1ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(559usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn datbas2(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas2_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas2_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(564usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn datbas2_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas2HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas2HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(564usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn datbas2_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas2ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas2ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(564usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn datbas2_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas2ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas2ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(565usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn datbas2_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas2HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas2HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(566usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn datbas2_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas2ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas2ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(566usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn datbas2_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas2ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas2ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(567usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 3"]
    #[inline(always)]
    pub const fn datbas3(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas3_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas3_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(572usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 3"]
    #[inline(always)]
    pub const fn datbas3_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas3HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas3HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(572usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 3"]
    #[inline(always)]
    pub const fn datbas3_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas3ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas3ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(572usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 3"]
    #[inline(always)]
    pub const fn datbas3_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas3ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas3ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(573usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 3"]
    #[inline(always)]
    pub const fn datbas3_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas3HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas3HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(574usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 3"]
    #[inline(always)]
    pub const fn datbas3_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas3ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas3ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(574usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 3"]
    #[inline(always)]
    pub const fn datbas3_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas3ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas3ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(575usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 4"]
    #[inline(always)]
    pub const fn datbas4(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas4_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas4_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(580usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 4"]
    #[inline(always)]
    pub const fn datbas4_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas4HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas4HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(580usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 4"]
    #[inline(always)]
    pub const fn datbas4_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas4ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas4ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(580usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 4"]
    #[inline(always)]
    pub const fn datbas4_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas4ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas4ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(581usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 4"]
    #[inline(always)]
    pub const fn datbas4_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas4HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas4HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(582usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 4"]
    #[inline(always)]
    pub const fn datbas4_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas4ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas4ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(582usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 4"]
    #[inline(always)]
    pub const fn datbas4_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas4ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas4ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(583usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 5"]
    #[inline(always)]
    pub const fn datbas5(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas5_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas5_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(588usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 5"]
    #[inline(always)]
    pub const fn datbas5_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas5HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas5HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(588usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 5"]
    #[inline(always)]
    pub const fn datbas5_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas5ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas5ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(588usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 5"]
    #[inline(always)]
    pub const fn datbas5_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas5ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas5ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(589usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 5"]
    #[inline(always)]
    pub const fn datbas5_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas5HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas5HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(590usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 5"]
    #[inline(always)]
    pub const fn datbas5_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas5ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas5ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(590usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 5"]
    #[inline(always)]
    pub const fn datbas5_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas5ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas5ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(591usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 6"]
    #[inline(always)]
    pub const fn datbas6(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas6_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas6_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(596usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 6"]
    #[inline(always)]
    pub const fn datbas6_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas6HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas6HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(596usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 6"]
    #[inline(always)]
    pub const fn datbas6_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas6ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas6ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(596usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 6"]
    #[inline(always)]
    pub const fn datbas6_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas6ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas6ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(597usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 6"]
    #[inline(always)]
    pub const fn datbas6_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas6HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas6HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(598usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 6"]
    #[inline(always)]
    pub const fn datbas6_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas6ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas6ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(598usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 6"]
    #[inline(always)]
    pub const fn datbas6_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas6ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas6ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(599usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 7"]
    #[inline(always)]
    pub const fn datbas7(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas7_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas7_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(604usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 7"]
    #[inline(always)]
    pub const fn datbas7_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas7HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas7HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(604usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 7"]
    #[inline(always)]
    pub const fn datbas7_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas7ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas7ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(604usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 7"]
    #[inline(always)]
    pub const fn datbas7_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas7ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas7ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(605usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 7"]
    #[inline(always)]
    pub const fn datbas7_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas7HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas7HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(606usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 7"]
    #[inline(always)]
    pub const fn datbas7_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas7ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas7ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(606usize),
            )
        }
    }

    #[doc = "Device Address Table Basic Register 7"]
    #[inline(always)]
    pub const fn datbas7_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Datbas7ByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Datbas7ByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(607usize),
            )
        }
    }

    #[doc = "Extended Device Address Table Basic Register"]
    #[inline(always)]
    pub const fn exdatbas(
        &self,
    ) -> &'static crate::common::Reg<self::Exdatbas_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Exdatbas_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(672usize),
            )
        }
    }

    #[doc = "Extended Device Address Table Basic Register"]
    #[inline(always)]
    pub const fn exdatbas_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::ExdatbasHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExdatbasHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(672usize),
            )
        }
    }

    #[doc = "Extended Device Address Table Basic Register"]
    #[inline(always)]
    pub const fn exdatbas_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::ExdatbasByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExdatbasByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(672usize),
            )
        }
    }

    #[doc = "Extended Device Address Table Basic Register"]
    #[inline(always)]
    pub const fn exdatbas_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::ExdatbasByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExdatbasByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(673usize),
            )
        }
    }

    #[doc = "Extended Device Address Table Basic Register"]
    #[inline(always)]
    pub const fn exdatbas_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::ExdatbasHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExdatbasHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(674usize),
            )
        }
    }

    #[doc = "Extended Device Address Table Basic Register"]
    #[inline(always)]
    pub const fn exdatbas_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::ExdatbasByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExdatbasByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(674usize),
            )
        }
    }

    #[doc = "Extended Device Address Table Basic Register"]
    #[inline(always)]
    pub const fn exdatbas_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::ExdatbasByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ExdatbasByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(675usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn sdatbas0(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas0_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas0_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(688usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn sdatbas0_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas0HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas0HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(688usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn sdatbas0_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas0ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas0ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(688usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn sdatbas0_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas0ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas0ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(689usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn sdatbas0_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas0HaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas0HaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(690usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 0"]
    #[inline(always)]
    pub const fn sdatbas0_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas0ByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas0ByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(690usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn sdatbas1(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas1_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas1_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(692usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn sdatbas1_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas1HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas1HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(692usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn sdatbas1_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas1ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas1ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(692usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 1"]
    #[inline(always)]
    pub const fn sdatbas1_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas1ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas1ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(693usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn sdatbas2(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas2_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas2_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(696usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn sdatbas2_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas2HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas2HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(696usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn sdatbas2_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas2ByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas2ByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(696usize),
            )
        }
    }

    #[doc = "Slave Device Address Table Basic Register 2"]
    #[inline(always)]
    pub const fn sdatbas2_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sdatbas2ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdatbas2ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(697usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 0"]
    #[inline(always)]
    pub const fn msdct0(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct0_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct0_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(720usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 0"]
    #[inline(always)]
    pub const fn msdct0_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct0HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct0HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(720usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 0"]
    #[inline(always)]
    pub const fn msdct0_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct0ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct0ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(721usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 1"]
    #[inline(always)]
    pub const fn msdct1(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct1_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct1_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(724usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 1"]
    #[inline(always)]
    pub const fn msdct1_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct1HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct1HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(724usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 1"]
    #[inline(always)]
    pub const fn msdct1_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct1ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct1ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(725usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 2"]
    #[inline(always)]
    pub const fn msdct2(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct2_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct2_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(728usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 2"]
    #[inline(always)]
    pub const fn msdct2_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct2HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct2HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(728usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 2"]
    #[inline(always)]
    pub const fn msdct2_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct2ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct2ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(729usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 3"]
    #[inline(always)]
    pub const fn msdct3(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct3_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct3_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(732usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 3"]
    #[inline(always)]
    pub const fn msdct3_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct3HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct3HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(732usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 3"]
    #[inline(always)]
    pub const fn msdct3_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct3ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct3ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(733usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 4"]
    #[inline(always)]
    pub const fn msdct4(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct4_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct4_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(736usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 4"]
    #[inline(always)]
    pub const fn msdct4_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct4HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct4HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(736usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 4"]
    #[inline(always)]
    pub const fn msdct4_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct4ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct4ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(737usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 5"]
    #[inline(always)]
    pub const fn msdct5(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct5_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct5_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(740usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 5"]
    #[inline(always)]
    pub const fn msdct5_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct5HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct5HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(740usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 5"]
    #[inline(always)]
    pub const fn msdct5_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct5ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct5ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(741usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 6"]
    #[inline(always)]
    pub const fn msdct6(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct6_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct6_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(744usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 6"]
    #[inline(always)]
    pub const fn msdct6_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct6HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct6HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(744usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 6"]
    #[inline(always)]
    pub const fn msdct6_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct6ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct6ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(745usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 7"]
    #[inline(always)]
    pub const fn msdct7(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct7_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct7_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(748usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 7"]
    #[inline(always)]
    pub const fn msdct7_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct7HaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct7HaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(748usize),
            )
        }
    }

    #[doc = "Master Device Characteristic Table Register 7"]
    #[inline(always)]
    pub const fn msdct7_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Msdct7ByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Msdct7ByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(749usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Register"]
    #[inline(always)]
    pub const fn svdct(&self) -> &'static crate::common::Reg<self::Svdct_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Svdct_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(800usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Register"]
    #[inline(always)]
    pub const fn svdct_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::SvdctHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvdctHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(800usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Register"]
    #[inline(always)]
    pub const fn svdct_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::SvdctByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvdctByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(800usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Register"]
    #[inline(always)]
    pub const fn svdct_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::SvdctByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SvdctByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(801usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID Low Register"]
    #[inline(always)]
    pub const fn sdctpidl(
        &self,
    ) -> &'static crate::common::Reg<self::Sdctpidl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdctpidl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(804usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID Low Register"]
    #[inline(always)]
    pub const fn sdctpidl_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidlHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidlHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(804usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID Low Register"]
    #[inline(always)]
    pub const fn sdctpidl_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidlByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidlByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(804usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID Low Register"]
    #[inline(always)]
    pub const fn sdctpidl_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidlByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidlByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(805usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID High Register"]
    #[inline(always)]
    pub const fn sdctpidh(
        &self,
    ) -> &'static crate::common::Reg<self::Sdctpidh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sdctpidh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(808usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID High Register"]
    #[inline(always)]
    pub const fn sdctpidh_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidhHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidhHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(808usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID High Register"]
    #[inline(always)]
    pub const fn sdctpidh_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidhByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidhByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(808usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID High Register"]
    #[inline(always)]
    pub const fn sdctpidh_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidhByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidhByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(809usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID High Register"]
    #[inline(always)]
    pub const fn sdctpidh_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidhHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidhHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(810usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID High Register"]
    #[inline(always)]
    pub const fn sdctpidh_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidhByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidhByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(810usize),
            )
        }
    }

    #[doc = "Slave Device Characteristic Table Provisional ID High Register"]
    #[inline(always)]
    pub const fn sdctpidh_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::SdctpidhByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::SdctpidhByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(811usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 0"]
    #[inline(always)]
    pub const fn svdvad0(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad0_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad0_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(816usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 0"]
    #[inline(always)]
    pub const fn svdvad0_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad0HaH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad0HaH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(818usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 0"]
    #[inline(always)]
    pub const fn svdvad0_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad0ByHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad0ByHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(818usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 0"]
    #[inline(always)]
    pub const fn svdvad0_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad0ByHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad0ByHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(819usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 1"]
    #[inline(always)]
    pub const fn svdvad1(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad1_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad1_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(820usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 1"]
    #[inline(always)]
    pub const fn svdvad1_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad1HaH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad1HaH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(822usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 1"]
    #[inline(always)]
    pub const fn svdvad1_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad1ByHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad1ByHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(822usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 1"]
    #[inline(always)]
    pub const fn svdvad1_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad1ByHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad1ByHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(823usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 2"]
    #[inline(always)]
    pub const fn svdvad2(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad2_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad2_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(824usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 2"]
    #[inline(always)]
    pub const fn svdvad2_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad2HaH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad2HaH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(826usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 2"]
    #[inline(always)]
    pub const fn svdvad2_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad2ByHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad2ByHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(826usize),
            )
        }
    }

    #[doc = "Slave Device Address Register 2"]
    #[inline(always)]
    pub const fn svdvad2_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Svdvad2ByHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Svdvad2ByHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(827usize),
            )
        }
    }

    #[doc = "CCC Slave Events Command Register"]
    #[inline(always)]
    pub const fn csecmd(
        &self,
    ) -> &'static crate::common::Reg<self::Csecmd_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Csecmd_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(848usize),
            )
        }
    }

    #[doc = "CCC Slave Events Command Register"]
    #[inline(always)]
    pub const fn csecmd_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CsecmdHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CsecmdHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(848usize),
            )
        }
    }

    #[doc = "CCC Slave Events Command Register"]
    #[inline(always)]
    pub const fn csecmd_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CsecmdByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CsecmdByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(848usize),
            )
        }
    }

    #[doc = "CCC Enter Activity State Register"]
    #[inline(always)]
    pub const fn ceactst(
        &self,
    ) -> &'static crate::common::Reg<self::Ceactst_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ceactst_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(852usize),
            )
        }
    }

    #[doc = "CCC Enter Activity State Register"]
    #[inline(always)]
    pub const fn ceactst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CeactstHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CeactstHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(852usize),
            )
        }
    }

    #[doc = "CCC Enter Activity State Register"]
    #[inline(always)]
    pub const fn ceactst_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CeactstByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CeactstByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(852usize),
            )
        }
    }

    #[doc = "CCC Max Write Length Register"]
    #[inline(always)]
    pub const fn cmwlg(&self) -> &'static crate::common::Reg<self::Cmwlg_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cmwlg_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(856usize),
            )
        }
    }

    #[doc = "CCC Max Write Length Register"]
    #[inline(always)]
    pub const fn cmwlg_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CmwlgHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmwlgHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(856usize),
            )
        }
    }

    #[doc = "CCC Max Write Length Register"]
    #[inline(always)]
    pub const fn cmwlg_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CmwlgByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmwlgByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(856usize),
            )
        }
    }

    #[doc = "CCC Max Write Length Register"]
    #[inline(always)]
    pub const fn cmwlg_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::CmwlgByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmwlgByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(857usize),
            )
        }
    }

    #[doc = "CCC Max Read Length Register"]
    #[inline(always)]
    pub const fn cmrlg(&self) -> &'static crate::common::Reg<self::Cmrlg_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cmrlg_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(860usize),
            )
        }
    }

    #[doc = "CCC Max Read Length Register"]
    #[inline(always)]
    pub const fn cmrlg_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CmrlgHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmrlgHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(860usize),
            )
        }
    }

    #[doc = "CCC Max Read Length Register"]
    #[inline(always)]
    pub const fn cmrlg_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CmrlgByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmrlgByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(860usize),
            )
        }
    }

    #[doc = "CCC Max Read Length Register"]
    #[inline(always)]
    pub const fn cmrlg_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::CmrlgByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmrlgByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(861usize),
            )
        }
    }

    #[doc = "CCC Max Read Length Register"]
    #[inline(always)]
    pub const fn cmrlg_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::CmrlgHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmrlgHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(862usize),
            )
        }
    }

    #[doc = "CCC Max Read Length Register"]
    #[inline(always)]
    pub const fn cmrlg_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::CmrlgByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmrlgByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(862usize),
            )
        }
    }

    #[doc = "CCC Enter Test Mode Register"]
    #[inline(always)]
    pub const fn cetstmd(
        &self,
    ) -> &'static crate::common::Reg<self::Cetstmd_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Cetstmd_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(864usize),
            )
        }
    }

    #[doc = "CCC Enter Test Mode Register"]
    #[inline(always)]
    pub const fn cetstmd_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CetstmdHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::CetstmdHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(864usize),
            )
        }
    }

    #[doc = "CCC Enter Test Mode Register"]
    #[inline(always)]
    pub const fn cetstmd_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CetstmdByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::CetstmdByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(864usize),
            )
        }
    }

    #[doc = "CCC Get Device Status Register"]
    #[inline(always)]
    pub const fn cgdvst(
        &self,
    ) -> &'static crate::common::Reg<self::Cgdvst_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cgdvst_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(868usize),
            )
        }
    }

    #[doc = "CCC Get Device Status Register"]
    #[inline(always)]
    pub const fn cgdvst_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CgdvstHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CgdvstHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(868usize),
            )
        }
    }

    #[doc = "CCC Get Device Status Register"]
    #[inline(always)]
    pub const fn cgdvst_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CgdvstByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CgdvstByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(868usize),
            )
        }
    }

    #[doc = "CCC Get Device Status Register"]
    #[inline(always)]
    pub const fn cgdvst_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::CgdvstByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CgdvstByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(869usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed W(Write) Registe"]
    #[inline(always)]
    pub const fn cmdspw(
        &self,
    ) -> &'static crate::common::Reg<self::Cmdspw_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cmdspw_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(872usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed W(Write) Registe"]
    #[inline(always)]
    pub const fn cmdspw_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CmdspwHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdspwHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(872usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed W(Write) Registe"]
    #[inline(always)]
    pub const fn cmdspw_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CmdspwByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdspwByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(872usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed R(Read) Registe"]
    #[inline(always)]
    pub const fn cmdspr(
        &self,
    ) -> &'static crate::common::Reg<self::Cmdspr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cmdspr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(876usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed R(Read) Registe"]
    #[inline(always)]
    pub const fn cmdspr_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CmdsprHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdsprHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(876usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed R(Read) Registe"]
    #[inline(always)]
    pub const fn cmdspr_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CmdsprByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdsprByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(876usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed T(Turnaround) Registe"]
    #[inline(always)]
    pub const fn cmdspt(
        &self,
    ) -> &'static crate::common::Reg<self::Cmdspt_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cmdspt_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(880usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed T(Turnaround) Register"]
    #[inline(always)]
    pub const fn cmdspt_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CmdsptHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdsptHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(880usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed T(Turnaround) Register"]
    #[inline(always)]
    pub const fn cmdspt_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CmdsptByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdsptByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(880usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed T(Turnaround) Register"]
    #[inline(always)]
    pub const fn cmdspt_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::CmdsptByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdsptByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(881usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed T(Turnaround) Register"]
    #[inline(always)]
    pub const fn cmdspt_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::CmdsptHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdsptHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(882usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed T(Turnaround) Register"]
    #[inline(always)]
    pub const fn cmdspt_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::CmdsptByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdsptByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(882usize),
            )
        }
    }

    #[doc = "CCC Max Data Speed T(Turnaround) Register"]
    #[inline(always)]
    pub const fn cmdspt_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::CmdsptByHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CmdsptByHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(883usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetsm(&self) -> &'static crate::common::Reg<self::Cetsm_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cetsm_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(884usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetsm_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CetsmHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CetsmHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(884usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetsm_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CetsmByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CetsmByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(884usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetsm_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::CetsmByLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CetsmByLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(885usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetsm_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::CetsmHaH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CetsmHaH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(886usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetsm_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::CetsmByHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CetsmByHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(886usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information S(State\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetss(&self) -> &'static crate::common::Reg<self::Cetss_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cetss_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(888usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information S(State\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetss_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CetssHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CetssHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(888usize),
            )
        }
    }

    #[doc = "CCC Exchange Timing Support Information S(State\u{a0}) Register"]
    #[inline(always)]
    pub const fn cetss_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CetssByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CetssByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(888usize),
            )
        }
    }

    #[doc = "CCC Get HDR capability Register"]
    #[inline(always)]
    pub const fn cghdrcap(
        &self,
    ) -> &'static crate::common::Reg<self::Cghdrcap_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Cghdrcap_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(892usize),
            )
        }
    }

    #[doc = "CCC Get HDR capability Register"]
    #[inline(always)]
    pub const fn cghdrcap_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::CghdrcapHaL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CghdrcapHaL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(892usize),
            )
        }
    }

    #[doc = "CCC Get HDR capability Register"]
    #[inline(always)]
    pub const fn cghdrcap_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::CghdrcapByLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::CghdrcapByLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(892usize),
            )
        }
    }

    #[doc = "Bit Count Register"]
    #[inline(always)]
    pub const fn bitcnt(&self) -> &'static crate::common::Reg<self::Bitcnt_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Bitcnt_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(896usize),
            )
        }
    }

    #[doc = "Bit Count Register"]
    #[inline(always)]
    pub const fn bitcnt_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::BitcntHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::BitcntHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(896usize),
            )
        }
    }

    #[doc = "Bit Count Register"]
    #[inline(always)]
    pub const fn bitcnt_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::BitcntByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::BitcntByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(896usize),
            )
        }
    }

    #[doc = "Normal Queue Status Level Register"]
    #[inline(always)]
    pub const fn nqstlv(&self) -> &'static crate::common::Reg<self::Nqstlv_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Nqstlv_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(916usize),
            )
        }
    }

    #[doc = "Normal Queue Status Level Register"]
    #[inline(always)]
    pub const fn nqstlv_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::NqstlvHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::NqstlvHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(916usize),
            )
        }
    }

    #[doc = "Normal Queue Status Level Register"]
    #[inline(always)]
    pub const fn nqstlv_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::NqstlvByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::NqstlvByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(916usize),
            )
        }
    }

    #[doc = "Normal Queue Status Level Register"]
    #[inline(always)]
    pub const fn nqstlv_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::NqstlvByLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::NqstlvByLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(917usize),
            )
        }
    }

    #[doc = "Normal Queue Status Level Register"]
    #[inline(always)]
    pub const fn nqstlv_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::NqstlvHaH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::NqstlvHaH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(918usize),
            )
        }
    }

    #[doc = "Normal Queue Status Level Register"]
    #[inline(always)]
    pub const fn nqstlv_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::NqstlvByHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::NqstlvByHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(918usize),
            )
        }
    }

    #[doc = "Normal Queue Status Level Register"]
    #[inline(always)]
    pub const fn nqstlv_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::NqstlvByHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::NqstlvByHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(919usize),
            )
        }
    }

    #[doc = "Normal Data Buffer Status Level Register 0"]
    #[inline(always)]
    pub const fn ndbstlv0(
        &self,
    ) -> &'static crate::common::Reg<self::Ndbstlv0_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Ndbstlv0_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(920usize),
            )
        }
    }

    #[doc = "Normal Data Buffer Status Level Register 0"]
    #[inline(always)]
    pub const fn ndbstlv0_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Ndbstlv0HaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Ndbstlv0HaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(920usize),
            )
        }
    }

    #[doc = "Normal Data Buffer Status Level Register 0"]
    #[inline(always)]
    pub const fn ndbstlv0_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Ndbstlv0ByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Ndbstlv0ByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(920usize),
            )
        }
    }

    #[doc = "Normal Data Buffer Status Level Register 0"]
    #[inline(always)]
    pub const fn ndbstlv0_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Ndbstlv0ByLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Ndbstlv0ByLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(921usize),
            )
        }
    }

    #[doc = "Normal Receive Status Queue Status Level Register"]
    #[inline(always)]
    pub const fn nrsqstlv(
        &self,
    ) -> &'static crate::common::Reg<self::Nrsqstlv_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Nrsqstlv_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(960usize),
            )
        }
    }

    #[doc = "Normal Receive Status Queue Status Level Register"]
    #[inline(always)]
    pub const fn nrsqstlv_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::NrsqstlvHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::NrsqstlvHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(960usize),
            )
        }
    }

    #[doc = "Normal Receive Status Queue Status Level Register"]
    #[inline(always)]
    pub const fn nrsqstlv_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::NrsqstlvByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::NrsqstlvByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(960usize),
            )
        }
    }

    #[doc = "High Priority Queue Status Level Register"]
    #[inline(always)]
    pub const fn hqstlv(&self) -> &'static crate::common::Reg<self::Hqstlv_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Hqstlv_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(964usize),
            )
        }
    }

    #[doc = "High Priority Queue Status Level Register"]
    #[inline(always)]
    pub const fn hqstlv_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::HqstlvHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::HqstlvHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(964usize),
            )
        }
    }

    #[doc = "High Priority Queue Status Level Register"]
    #[inline(always)]
    pub const fn hqstlv_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HqstlvByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::HqstlvByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(964usize),
            )
        }
    }

    #[doc = "High Priority Queue Status Level Register"]
    #[inline(always)]
    pub const fn hqstlv_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::HqstlvByLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::HqstlvByLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(965usize),
            )
        }
    }

    #[doc = "High Priority Data Buffer Status Level Register"]
    #[inline(always)]
    pub const fn hdbstlv(
        &self,
    ) -> &'static crate::common::Reg<self::Hdbstlv_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Hdbstlv_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(968usize),
            )
        }
    }

    #[doc = "High Priority Data Buffer Status Level Register"]
    #[inline(always)]
    pub const fn hdbstlv_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::HdbstlvHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::HdbstlvHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(968usize),
            )
        }
    }

    #[doc = "High Priority Data Buffer Status Level Register"]
    #[inline(always)]
    pub const fn hdbstlv_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HdbstlvByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::HdbstlvByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(968usize),
            )
        }
    }

    #[doc = "High Priority Data Buffer Status Level Register"]
    #[inline(always)]
    pub const fn hdbstlv_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::HdbstlvByLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::HdbstlvByLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(969usize),
            )
        }
    }

    #[doc = "Present State Debug Register"]
    #[inline(always)]
    pub const fn prstdbg(
        &self,
    ) -> &'static crate::common::Reg<self::Prstdbg_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Prstdbg_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(972usize),
            )
        }
    }

    #[doc = "Present State Debug Register"]
    #[inline(always)]
    pub const fn prstdbg_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::PrstdbgHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PrstdbgHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(972usize),
            )
        }
    }

    #[doc = "Present State Debug Register"]
    #[inline(always)]
    pub const fn prstdbg_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::PrstdbgByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PrstdbgByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(972usize),
            )
        }
    }

    #[doc = "Present State Debug Register"]
    #[inline(always)]
    pub const fn prstdbg_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::PrstdbgByLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PrstdbgByLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(973usize),
            )
        }
    }

    #[doc = "Present State Debug Register"]
    #[inline(always)]
    pub const fn prstdbg_ha_h(
        &self,
    ) -> &'static crate::common::Reg<self::PrstdbgHaH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PrstdbgHaH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(974usize),
            )
        }
    }

    #[doc = "Present State Debug Register"]
    #[inline(always)]
    pub const fn prstdbg_by_hl(
        &self,
    ) -> &'static crate::common::Reg<self::PrstdbgByHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PrstdbgByHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(974usize),
            )
        }
    }

    #[doc = "Present State Debug Register"]
    #[inline(always)]
    pub const fn prstdbg_by_hh(
        &self,
    ) -> &'static crate::common::Reg<self::PrstdbgByHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PrstdbgByHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(975usize),
            )
        }
    }

    #[doc = "Master Error Counters Register"]
    #[inline(always)]
    pub const fn mserrcnt(
        &self,
    ) -> &'static crate::common::Reg<self::Mserrcnt_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Mserrcnt_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(976usize),
            )
        }
    }

    #[doc = "Master Error Counters Register"]
    #[inline(always)]
    pub const fn mserrcnt_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::MserrcntHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::MserrcntHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(976usize),
            )
        }
    }

    #[doc = "Master Error Counters Register"]
    #[inline(always)]
    pub const fn mserrcnt_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::MserrcntByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::MserrcntByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(976usize),
            )
        }
    }

    #[doc = "SC1 Capture monitor Register"]
    #[inline(always)]
    pub const fn sc1cpt(&self) -> &'static crate::common::Reg<self::Sc1Cpt_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sc1Cpt_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(992usize),
            )
        }
    }

    #[doc = "SC1 Capture monitor Register"]
    #[inline(always)]
    pub const fn sc1cpt_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sc1CptHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sc1CptHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(992usize),
            )
        }
    }

    #[doc = "SC1 Capture monitor Register"]
    #[inline(always)]
    pub const fn sc1cpt_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sc1CptByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sc1CptByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(992usize),
            )
        }
    }

    #[doc = "SC1 Capture monitor Register"]
    #[inline(always)]
    pub const fn sc1cpt_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sc1CptByLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sc1CptByLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(993usize),
            )
        }
    }

    #[doc = "SC2 Capture monitor Register"]
    #[inline(always)]
    pub const fn sc2cpt(&self) -> &'static crate::common::Reg<self::Sc2Cpt_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sc2Cpt_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(996usize),
            )
        }
    }

    #[doc = "SC2 Capture monitor Register"]
    #[inline(always)]
    pub const fn sc2cpt_ha_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sc2CptHaL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sc2CptHaL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(996usize),
            )
        }
    }

    #[doc = "SC2 Capture monitor Register"]
    #[inline(always)]
    pub const fn sc2cpt_by_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sc2CptByLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sc2CptByLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(996usize),
            )
        }
    }

    #[doc = "SC2 Capture monitor Register"]
    #[inline(always)]
    pub const fn sc2cpt_by_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sc2CptByLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sc2CptByLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(997usize),
            )
        }
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Prts_SPEC;
impl crate::sealed::RegSpec for Prts_SPEC {
    type DataType = u32;
}
#[doc = "Protocol Selection Register"]
pub type Prts = crate::RegValueT<Prts_SPEC>;

impl Prts {
    #[doc = "Protocol Mode."]
    #[inline(always)]
    pub fn prtmd(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, prts::Prtmd, Prts_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1,1,0,prts::Prtmd, Prts_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000000000000000000. The write value should be 0000000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fffffff, 1, 0, u32, Prts_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7fffffff,1,0,u32, Prts_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Prts {
    #[inline(always)]
    fn default() -> Prts {
        <crate::RegValueT<Prts_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod prts {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtmd_SPEC;
    pub type Prtmd = crate::EnumBitfieldStruct<u8, Prtmd_SPEC>;
    impl Prtmd {
        #[doc = "I3C Protocol mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C Protocol mode."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrtsHaL_SPEC;
impl crate::sealed::RegSpec for PrtsHaL_SPEC {
    type DataType = u16;
}
#[doc = "Protocol Selection Register"]
pub type PrtsHaL = crate::RegValueT<PrtsHaL_SPEC>;

impl PrtsHaL {
    #[doc = "Protocol Mode."]
    #[inline(always)]
    pub fn prtmd(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, prts_ha_l::Prtmd, PrtsHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            prts_ha_l::Prtmd,
            PrtsHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000000. The write value should be 000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fff, 1, 0, u16, PrtsHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7fff,1,0,u16, PrtsHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PrtsHaL {
    #[inline(always)]
    fn default() -> PrtsHaL {
        <crate::RegValueT<PrtsHaL_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod prts_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtmd_SPEC;
    pub type Prtmd = crate::EnumBitfieldStruct<u8, Prtmd_SPEC>;
    impl Prtmd {
        #[doc = "I3C Protocol mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C Protocol mode."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrtsByLl_SPEC;
impl crate::sealed::RegSpec for PrtsByLl_SPEC {
    type DataType = u8;
}
#[doc = "Protocol Selection Register"]
pub type PrtsByLl = crate::RegValueT<PrtsByLl_SPEC>;

impl PrtsByLl {
    #[doc = "Protocol Mode."]
    #[inline(always)]
    pub fn prtmd(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        prts_by_ll::Prtmd,
        PrtsByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            prts_by_ll::Prtmd,
            PrtsByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, PrtsByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, PrtsByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PrtsByLl {
    #[inline(always)]
    fn default() -> PrtsByLl {
        <crate::RegValueT<PrtsByLl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod prts_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtmd_SPEC;
    pub type Prtmd = crate::EnumBitfieldStruct<u8, Prtmd_SPEC>;
    impl Prtmd {
        #[doc = "I3C Protocol mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C Protocol mode."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bctl_SPEC;
impl crate::sealed::RegSpec for Bctl_SPEC {
    type DataType = u32;
}
#[doc = "Bus Control Register"]
pub type Bctl = crate::RegValueT<Bctl_SPEC>;

impl Bctl {
    #[doc = "Include I3C Broadcast Address"]
    #[inline(always)]
    pub fn incba(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bctl::Incba, Bctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1,1,0,bctl::Incba, Bctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Bus Mode Selection"]
    #[inline(always)]
    pub fn bmds(
        self,
    ) -> crate::common::RegisterField<7, 0x1, 1, 0, bctl::Bmds, Bctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1,1,0,bctl::Bmds, Bctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Hot-Join Acknowledge Control"]
    #[inline(always)]
    pub fn hjackctl(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bctl::Hjackctl, Bctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0x1,1,0,bctl::Hjackctl, Bctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000000000. The write value should be 00000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0xfffff, 1, 0, u32, Bctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0xfffff,1,0,u32, Bctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Abort"]
    #[inline(always)]
    pub fn abt(
        self,
    ) -> crate::common::RegisterField<29, 0x1, 1, 0, bctl::Abt, Bctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x1,1,0,bctl::Abt, Bctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Resume Values when read:"]
    #[inline(always)]
    pub fn rsm(
        self,
    ) -> crate::common::RegisterField<30, 0x1, 1, 0, bctl::Rsm, Bctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<30,0x1,1,0,bctl::Rsm, Bctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Bus Enable"]
    #[inline(always)]
    pub fn buse(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, bctl::Buse, Bctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<31,0x1,1,0,bctl::Buse, Bctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Bctl {
    #[inline(always)]
    fn default() -> Bctl {
        <crate::RegValueT<Bctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Incba_SPEC;
    pub type Incba = crate::EnumBitfieldStruct<u8, Incba_SPEC>;
    impl Incba {
        #[doc = "Do not include I3C Broadcast Address for Private Transfers"]
        pub const _0: Self = Self::new(0);
        #[doc = "Include I3C Broadcast Address for Private Transfers"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bmds_SPEC;
    pub type Bmds = crate::EnumBitfieldStruct<u8, Bmds_SPEC>;
    impl Bmds {
        #[doc = "Legacy inclusive Bus mode disabled"]
        pub const _0: Self = Self::new(0);
        #[doc = "Legacy inclusive (mix) Bus mode enabled"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hjackctl_SPEC;
    pub type Hjackctl = crate::EnumBitfieldStruct<u8, Hjackctl_SPEC>;
    impl Hjackctl {
        #[doc = "ACK the Hot-Join request"]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK and send broadcast CCC to disable Hot-Join"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Abt_SPEC;
    pub type Abt = crate::EnumBitfieldStruct<u8, Abt_SPEC>;
    impl Abt {
        #[doc = "This IP is Running"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has Aborted a transfer"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsm_SPEC;
    pub type Rsm = crate::EnumBitfieldStruct<u8, Rsm_SPEC>;
    impl Rsm {
        #[doc = "This IP is Running"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP is Suspended (RW1C)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Buse_SPEC;
    pub type Buse = crate::EnumBitfieldStruct<u8, Buse_SPEC>;
    impl Buse {
        #[doc = "This IP bus operation is Disabled"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP bus operation is Enabled"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BctlHaL_SPEC;
impl crate::sealed::RegSpec for BctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Control Register"]
pub type BctlHaL = crate::RegValueT<BctlHaL_SPEC>;

impl BctlHaL {
    #[doc = "Include I3C Broadcast Address"]
    #[inline(always)]
    pub fn incba(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bctl_ha_l::Incba, BctlHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bctl_ha_l::Incba,
            BctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Bus Mode Selection"]
    #[inline(always)]
    pub fn bmds(
        self,
    ) -> crate::common::RegisterField<7, 0x1, 1, 0, bctl_ha_l::Bmds, BctlHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<7,0x1,1,0,bctl_ha_l::Bmds, BctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Hot-Join Acknowledge Control"]
    #[inline(always)]
    pub fn hjackctl(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        bctl_ha_l::Hjackctl,
        BctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            bctl_ha_l::Hjackctl,
            BctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BctlHaL {
    #[inline(always)]
    fn default() -> BctlHaL {
        <crate::RegValueT<BctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Incba_SPEC;
    pub type Incba = crate::EnumBitfieldStruct<u8, Incba_SPEC>;
    impl Incba {
        #[doc = "Do not include I3C Broadcast Address for Private Transfers"]
        pub const _0: Self = Self::new(0);
        #[doc = "Include I3C Broadcast Address for Private Transfers"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bmds_SPEC;
    pub type Bmds = crate::EnumBitfieldStruct<u8, Bmds_SPEC>;
    impl Bmds {
        #[doc = "Legacy inclusive Bus mode disabled"]
        pub const _0: Self = Self::new(0);
        #[doc = "Legacy inclusive (mix) Bus mode enabled"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hjackctl_SPEC;
    pub type Hjackctl = crate::EnumBitfieldStruct<u8, Hjackctl_SPEC>;
    impl Hjackctl {
        #[doc = "ACK the Hot-Join request"]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK and send broadcast CCC to disable Hot-Join"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BctlByLl_SPEC;
impl crate::sealed::RegSpec for BctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Control Register"]
pub type BctlByLl = crate::RegValueT<BctlByLl_SPEC>;

impl BctlByLl {
    #[doc = "Include I3C Broadcast Address"]
    #[inline(always)]
    pub fn incba(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bctl_by_ll::Incba,
        BctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bctl_by_ll::Incba,
            BctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x3f, 1, 0, u8, BctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x3f,1,0,u8, BctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Bus Mode Selection"]
    #[inline(always)]
    pub fn bmds(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        bctl_by_ll::Bmds,
        BctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            bctl_by_ll::Bmds,
            BctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for BctlByLl {
    #[inline(always)]
    fn default() -> BctlByLl {
        <crate::RegValueT<BctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Incba_SPEC;
    pub type Incba = crate::EnumBitfieldStruct<u8, Incba_SPEC>;
    impl Incba {
        #[doc = "Do not include I3C Broadcast Address for Private Transfers"]
        pub const _0: Self = Self::new(0);
        #[doc = "Include I3C Broadcast Address for Private Transfers"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bmds_SPEC;
    pub type Bmds = crate::EnumBitfieldStruct<u8, Bmds_SPEC>;
    impl Bmds {
        #[doc = "Legacy inclusive Bus mode disabled"]
        pub const _0: Self = Self::new(0);
        #[doc = "Legacy inclusive (mix) Bus mode enabled"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BctlByLh_SPEC;
impl crate::sealed::RegSpec for BctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Control Register"]
pub type BctlByLh = crate::RegValueT<BctlByLh_SPEC>;

impl BctlByLh {
    #[doc = "Hot-Join Acknowledge Control"]
    #[inline(always)]
    pub fn hjackctl(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bctl_by_lh::Hjackctl,
        BctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bctl_by_lh::Hjackctl,
            BctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BctlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BctlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BctlByLh {
    #[inline(always)]
    fn default() -> BctlByLh {
        <crate::RegValueT<BctlByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bctl_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hjackctl_SPEC;
    pub type Hjackctl = crate::EnumBitfieldStruct<u8, Hjackctl_SPEC>;
    impl Hjackctl {
        #[doc = "ACK the Hot-Join request"]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK and send broadcast CCC to disable Hot-Join"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BctlHaH_SPEC;
impl crate::sealed::RegSpec for BctlHaH_SPEC {
    type DataType = u16;
}
#[doc = "Bus Control Register"]
pub type BctlHaH = crate::RegValueT<BctlHaH_SPEC>;

impl BctlHaH {
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1fff, 1, 0, u16, BctlHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1fff,1,0,u16, BctlHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Abort"]
    #[inline(always)]
    pub fn abt(
        self,
    ) -> crate::common::RegisterField<13, 0x1, 1, 0, bctl_ha_h::Abt, BctlHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<13,0x1,1,0,bctl_ha_h::Abt, BctlHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Resume Values when read:"]
    #[inline(always)]
    pub fn rsm(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, bctl_ha_h::Rsm, BctlHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<14,0x1,1,0,bctl_ha_h::Rsm, BctlHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Bus Enable"]
    #[inline(always)]
    pub fn buse(
        self,
    ) -> crate::common::RegisterField<15, 0x1, 1, 0, bctl_ha_h::Buse, BctlHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            bctl_ha_h::Buse,
            BctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for BctlHaH {
    #[inline(always)]
    fn default() -> BctlHaH {
        <crate::RegValueT<BctlHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bctl_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Abt_SPEC;
    pub type Abt = crate::EnumBitfieldStruct<u8, Abt_SPEC>;
    impl Abt {
        #[doc = "This IP is Running"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has Aborted a transfer"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsm_SPEC;
    pub type Rsm = crate::EnumBitfieldStruct<u8, Rsm_SPEC>;
    impl Rsm {
        #[doc = "This IP is Running"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP is Suspended (RW1C)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Buse_SPEC;
    pub type Buse = crate::EnumBitfieldStruct<u8, Buse_SPEC>;
    impl Buse {
        #[doc = "This IP bus operation is Disabled"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP bus operation is Enabled"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BctlByHh_SPEC;
impl crate::sealed::RegSpec for BctlByHh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Control Register"]
pub type BctlByHh = crate::RegValueT<BctlByHh_SPEC>;

impl BctlByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, BctlByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, BctlByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Abort"]
    #[inline(always)]
    pub fn abt(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, bctl_by_hh::Abt, BctlByHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            bctl_by_hh::Abt,
            BctlByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Resume Values when read:"]
    #[inline(always)]
    pub fn rsm(
        self,
    ) -> crate::common::RegisterField<6, 0x1, 1, 0, bctl_by_hh::Rsm, BctlByHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            bctl_by_hh::Rsm,
            BctlByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Bus Enable"]
    #[inline(always)]
    pub fn buse(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        bctl_by_hh::Buse,
        BctlByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            bctl_by_hh::Buse,
            BctlByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for BctlByHh {
    #[inline(always)]
    fn default() -> BctlByHh {
        <crate::RegValueT<BctlByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bctl_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Abt_SPEC;
    pub type Abt = crate::EnumBitfieldStruct<u8, Abt_SPEC>;
    impl Abt {
        #[doc = "This IP is Running"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has Aborted a transfer"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsm_SPEC;
    pub type Rsm = crate::EnumBitfieldStruct<u8, Rsm_SPEC>;
    impl Rsm {
        #[doc = "This IP is Running"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP is Suspended (RW1C)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Buse_SPEC;
    pub type Buse = crate::EnumBitfieldStruct<u8, Buse_SPEC>;
    impl Buse {
        #[doc = "This IP bus operation is Disabled"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP bus operation is Enabled"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdvad_SPEC;
impl crate::sealed::RegSpec for Msdvad_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Address Register"]
pub type Msdvad = crate::RegValueT<Msdvad_SPEC>;

impl Msdvad {
    #[doc = "Master Dynamic Address"]
    #[inline(always)]
    pub fn mdyad(
        self,
    ) -> crate::common::RegisterField<16, 0x7f, 1, 0, u8, Msdvad_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x7f,1,0,u8, Msdvad_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<23, 0xff, 1, 0, u8, Msdvad_SPEC, crate::common::RW> {
        crate::common::RegisterField::<23,0xff,1,0,u8, Msdvad_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Master Dynamic Address Valid"]
    #[inline(always)]
    pub fn mdyadv(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, msdvad::Mdyadv, Msdvad_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,msdvad::Mdyadv, Msdvad_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdvad {
    #[inline(always)]
    fn default() -> Msdvad {
        <crate::RegValueT<Msdvad_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdvad {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mdyadv_SPEC;
    pub type Mdyadv = crate::EnumBitfieldStruct<u8, Mdyadv_SPEC>;
    impl Mdyadv {
        #[doc = "The Master Dynamic Address field is not valid"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master Dynamic Address Field is valid"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct MsdvadHaH_SPEC;
impl crate::sealed::RegSpec for MsdvadHaH_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Address Register"]
pub type MsdvadHaH = crate::RegValueT<MsdvadHaH_SPEC>;

impl MsdvadHaH {
    #[doc = "Master Dynamic Address"]
    #[inline(always)]
    pub fn mdyad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, MsdvadHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, MsdvadHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0xff, 1, 0, u8, MsdvadHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0xff,1,0,u8, MsdvadHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Master Dynamic Address Valid"]
    #[inline(always)]
    pub fn mdyadv(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        msdvad_ha_h::Mdyadv,
        MsdvadHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            msdvad_ha_h::Mdyadv,
            MsdvadHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for MsdvadHaH {
    #[inline(always)]
    fn default() -> MsdvadHaH {
        <crate::RegValueT<MsdvadHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdvad_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mdyadv_SPEC;
    pub type Mdyadv = crate::EnumBitfieldStruct<u8, Mdyadv_SPEC>;
    impl Mdyadv {
        #[doc = "The Master Dynamic Address field is not valid"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master Dynamic Address Field is valid"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct MsdvadByHl_SPEC;
impl crate::sealed::RegSpec for MsdvadByHl_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Address Register"]
pub type MsdvadByHl = crate::RegValueT<MsdvadByHl_SPEC>;

impl MsdvadByHl {
    #[doc = "Master Dynamic Address"]
    #[inline(always)]
    pub fn mdyad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, MsdvadByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, MsdvadByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, MsdvadByHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,MsdvadByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for MsdvadByHl {
    #[inline(always)]
    fn default() -> MsdvadByHl {
        <crate::RegValueT<MsdvadByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct MsdvadByHh_SPEC;
impl crate::sealed::RegSpec for MsdvadByHh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Address Register"]
pub type MsdvadByHh = crate::RegValueT<MsdvadByHh_SPEC>;

impl MsdvadByHh {
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, MsdvadByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, MsdvadByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Master Dynamic Address Valid"]
    #[inline(always)]
    pub fn mdyadv(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        msdvad_by_hh::Mdyadv,
        MsdvadByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            msdvad_by_hh::Mdyadv,
            MsdvadByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for MsdvadByHh {
    #[inline(always)]
    fn default() -> MsdvadByHh {
        <crate::RegValueT<MsdvadByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdvad_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mdyadv_SPEC;
    pub type Mdyadv = crate::EnumBitfieldStruct<u8, Mdyadv_SPEC>;
    impl Mdyadv {
        #[doc = "The Master Dynamic Address field is not valid"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master Dynamic Address Field is valid"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rstctl_SPEC;
impl crate::sealed::RegSpec for Rstctl_SPEC {
    type DataType = u32;
}
#[doc = "Reset Control Register"]
pub type Rstctl = crate::RegValueT<Rstctl_SPEC>;

impl Rstctl {
    #[doc = "R-I3C Software Reset"]
    #[inline(always)]
    pub fn ri3crst(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, rstctl::Ri3Crst, Rstctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,rstctl::Ri3Crst, Rstctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Command Queue Software Reset"]
    #[inline(always)]
    pub fn cmdqrst(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, rstctl::Cmdqrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<1,0x1,1,0,rstctl::Cmdqrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Response Queue Software Reset"]
    #[inline(always)]
    pub fn rspqrst(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, rstctl::Rspqrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<2,0x1,1,0,rstctl::Rspqrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Tx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn tdbrst(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, rstctl::Tdbrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<3,0x1,1,0,rstctl::Tdbrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Rx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn rdbrst(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, rstctl::Rdbrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<4,0x1,1,0,rstctl::Rdbrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "IBI Queue Software Reset"]
    #[inline(always)]
    pub fn ibiqrst(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, rstctl::Ibiqrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<5,0x1,1,0,rstctl::Ibiqrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Receive Status Queue Software Reset"]
    #[inline(always)]
    pub fn rsqrst(
        self,
    ) -> crate::common::RegisterField<6, 0x1, 1, 0, rstctl::Rsqrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<6,0x1,1,0,rstctl::Rsqrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Command Queue Software Reset"]
    #[inline(always)]
    pub fn hcmdqrst(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, rstctl::Hcmdqrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<9,0x1,1,0,rstctl::Hcmdqrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Response Queue Software Reset"]
    #[inline(always)]
    pub fn hrspqrst(
        self,
    ) -> crate::common::RegisterField<10, 0x1, 1, 0, rstctl::Hrspqrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<10,0x1,1,0,rstctl::Hrspqrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Tx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn htdbrst(
        self,
    ) -> crate::common::RegisterField<11, 0x1, 1, 0, rstctl::Htdbrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<11,0x1,1,0,rstctl::Htdbrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Rx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn hrdbrst(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, rstctl::Hrdbrst, Rstctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<12,0x1,1,0,rstctl::Hrdbrst, Rstctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Internal Software Reset"]
    #[inline(always)]
    pub fn intlrst(
        self,
    ) -> crate::common::RegisterField<16, 0x1, 1, 0, rstctl::Intlrst, Rstctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0x1,1,0,rstctl::Intlrst, Rstctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000000000. The write value should be 000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<17, 0x7fff, 1, 0, u16, Rstctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<17,0x7fff,1,0,u16, Rstctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Rstctl {
    #[inline(always)]
    fn default() -> Rstctl {
        <crate::RegValueT<Rstctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ri3Crst_SPEC;
    pub type Ri3Crst = crate::EnumBitfieldStruct<u8, Ri3Crst_SPEC>;
    impl Ri3Crst {
        #[doc = "Reset of All registers and Internal State."]
        pub const _1: Self = Self::new(1);
        #[doc = "Releases of All registers and Internal State."]
        pub const _0: Self = Self::new(0);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqrst_SPEC;
    pub type Cmdqrst = crate::EnumBitfieldStruct<u8, Cmdqrst_SPEC>;
    impl Cmdqrst {
        #[doc = "The Command Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Command Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqrst_SPEC;
    pub type Rspqrst = crate::EnumBitfieldStruct<u8, Rspqrst_SPEC>;
    impl Rspqrst {
        #[doc = "The Response Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Response Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbrst_SPEC;
    pub type Tdbrst = crate::EnumBitfieldStruct<u8, Tdbrst_SPEC>;
    impl Tdbrst {
        #[doc = "The Transmit Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Transmit Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbrst_SPEC;
    pub type Rdbrst = crate::EnumBitfieldStruct<u8, Rdbrst_SPEC>;
    impl Rdbrst {
        #[doc = "The Receive Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Receive Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqrst_SPEC;
    pub type Ibiqrst = crate::EnumBitfieldStruct<u8, Ibiqrst_SPEC>;
    impl Ibiqrst {
        #[doc = "The IBI Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The IBI Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqrst_SPEC;
    pub type Rsqrst = crate::EnumBitfieldStruct<u8, Rsqrst_SPEC>;
    impl Rsqrst {
        #[doc = "The Receive Status Queue in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Receive Status Queue in this IP flush"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hcmdqrst_SPEC;
    pub type Hcmdqrst = crate::EnumBitfieldStruct<u8, Hcmdqrst_SPEC>;
    impl Hcmdqrst {
        #[doc = "The High Priority Command Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Command Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hrspqrst_SPEC;
    pub type Hrspqrst = crate::EnumBitfieldStruct<u8, Hrspqrst_SPEC>;
    impl Hrspqrst {
        #[doc = "The High Priority Response Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Response Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htdbrst_SPEC;
    pub type Htdbrst = crate::EnumBitfieldStruct<u8, Htdbrst_SPEC>;
    impl Htdbrst {
        #[doc = "The High Priority Transmit Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Transmit Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hrdbrst_SPEC;
    pub type Hrdbrst = crate::EnumBitfieldStruct<u8, Hrdbrst_SPEC>;
    impl Hrdbrst {
        #[doc = "The High Priority Receive Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Receive Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Intlrst_SPEC;
    pub type Intlrst = crate::EnumBitfieldStruct<u8, Intlrst_SPEC>;
    impl Intlrst {
        #[doc = "Releases of some registers and internal state."]
        pub const _0: Self = Self::new(0);
        #[doc = "Resets of some registers and internal state."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstctlHaL_SPEC;
impl crate::sealed::RegSpec for RstctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Reset Control Register"]
pub type RstctlHaL = crate::RegValueT<RstctlHaL_SPEC>;

impl RstctlHaL {
    #[doc = "R-I3C Software Reset"]
    #[inline(always)]
    pub fn ri3crst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstctl_ha_l::Ri3Crst,
        RstctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstctl_ha_l::Ri3Crst,
            RstctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Command Queue Software Reset"]
    #[inline(always)]
    pub fn cmdqrst(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rstctl_ha_l::Cmdqrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rstctl_ha_l::Cmdqrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Response Queue Software Reset"]
    #[inline(always)]
    pub fn rspqrst(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rstctl_ha_l::Rspqrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rstctl_ha_l::Rspqrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Tx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn tdbrst(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rstctl_ha_l::Tdbrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rstctl_ha_l::Tdbrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Rx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn rdbrst(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rstctl_ha_l::Rdbrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rstctl_ha_l::Rdbrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "IBI Queue Software Reset"]
    #[inline(always)]
    pub fn ibiqrst(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rstctl_ha_l::Ibiqrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rstctl_ha_l::Ibiqrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Receive Status Queue Software Reset"]
    #[inline(always)]
    pub fn rsqrst(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rstctl_ha_l::Rsqrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rstctl_ha_l::Rsqrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Software Reset"]
    #[inline(always)]
    pub fn hcmdqrst(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        rstctl_ha_l::Hcmdqrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            rstctl_ha_l::Hcmdqrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Software Reset"]
    #[inline(always)]
    pub fn hrspqrst(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rstctl_ha_l::Hrspqrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rstctl_ha_l::Hrspqrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Tx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn htdbrst(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        rstctl_ha_l::Htdbrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            rstctl_ha_l::Htdbrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn hrdbrst(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        rstctl_ha_l::Hrdbrst,
        RstctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            rstctl_ha_l::Hrdbrst,
            RstctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, RstctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x7,1,0,u8, RstctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstctlHaL {
    #[inline(always)]
    fn default() -> RstctlHaL {
        <crate::RegValueT<RstctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ri3Crst_SPEC;
    pub type Ri3Crst = crate::EnumBitfieldStruct<u8, Ri3Crst_SPEC>;
    impl Ri3Crst {
        #[doc = "Reset of All registers and Internal State."]
        pub const _1: Self = Self::new(1);
        #[doc = "Releases of All registers and Internal State."]
        pub const _0: Self = Self::new(0);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqrst_SPEC;
    pub type Cmdqrst = crate::EnumBitfieldStruct<u8, Cmdqrst_SPEC>;
    impl Cmdqrst {
        #[doc = "The Command Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Command Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqrst_SPEC;
    pub type Rspqrst = crate::EnumBitfieldStruct<u8, Rspqrst_SPEC>;
    impl Rspqrst {
        #[doc = "The Response Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Response Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbrst_SPEC;
    pub type Tdbrst = crate::EnumBitfieldStruct<u8, Tdbrst_SPEC>;
    impl Tdbrst {
        #[doc = "The Transmit Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Transmit Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbrst_SPEC;
    pub type Rdbrst = crate::EnumBitfieldStruct<u8, Rdbrst_SPEC>;
    impl Rdbrst {
        #[doc = "The Receive Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Receive Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqrst_SPEC;
    pub type Ibiqrst = crate::EnumBitfieldStruct<u8, Ibiqrst_SPEC>;
    impl Ibiqrst {
        #[doc = "The IBI Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The IBI Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqrst_SPEC;
    pub type Rsqrst = crate::EnumBitfieldStruct<u8, Rsqrst_SPEC>;
    impl Rsqrst {
        #[doc = "The Receive Status Queue in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Receive Status Queue in this IP flush"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hcmdqrst_SPEC;
    pub type Hcmdqrst = crate::EnumBitfieldStruct<u8, Hcmdqrst_SPEC>;
    impl Hcmdqrst {
        #[doc = "The High Priority Command Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Command Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hrspqrst_SPEC;
    pub type Hrspqrst = crate::EnumBitfieldStruct<u8, Hrspqrst_SPEC>;
    impl Hrspqrst {
        #[doc = "The High Priority Response Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Response Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htdbrst_SPEC;
    pub type Htdbrst = crate::EnumBitfieldStruct<u8, Htdbrst_SPEC>;
    impl Htdbrst {
        #[doc = "The High Priority Transmit Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Transmit Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hrdbrst_SPEC;
    pub type Hrdbrst = crate::EnumBitfieldStruct<u8, Hrdbrst_SPEC>;
    impl Hrdbrst {
        #[doc = "The High Priority Receive Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Receive Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstctlByLl_SPEC;
impl crate::sealed::RegSpec for RstctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Reset Control Register"]
pub type RstctlByLl = crate::RegValueT<RstctlByLl_SPEC>;

impl RstctlByLl {
    #[doc = "R-I3C Software Reset"]
    #[inline(always)]
    pub fn ri3crst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstctl_by_ll::Ri3Crst,
        RstctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstctl_by_ll::Ri3Crst,
            RstctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Command Queue Software Reset"]
    #[inline(always)]
    pub fn cmdqrst(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rstctl_by_ll::Cmdqrst,
        RstctlByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rstctl_by_ll::Cmdqrst,
            RstctlByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Response Queue Software Reset"]
    #[inline(always)]
    pub fn rspqrst(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rstctl_by_ll::Rspqrst,
        RstctlByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rstctl_by_ll::Rspqrst,
            RstctlByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Tx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn tdbrst(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rstctl_by_ll::Tdbrst,
        RstctlByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rstctl_by_ll::Tdbrst,
            RstctlByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Rx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn rdbrst(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rstctl_by_ll::Rdbrst,
        RstctlByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rstctl_by_ll::Rdbrst,
            RstctlByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "IBI Queue Software Reset"]
    #[inline(always)]
    pub fn ibiqrst(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rstctl_by_ll::Ibiqrst,
        RstctlByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rstctl_by_ll::Ibiqrst,
            RstctlByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Receive Status Queue Software Reset"]
    #[inline(always)]
    pub fn rsqrst(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rstctl_by_ll::Rsqrst,
        RstctlByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rstctl_by_ll::Rsqrst,
            RstctlByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, RstctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,RstctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstctlByLl {
    #[inline(always)]
    fn default() -> RstctlByLl {
        <crate::RegValueT<RstctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ri3Crst_SPEC;
    pub type Ri3Crst = crate::EnumBitfieldStruct<u8, Ri3Crst_SPEC>;
    impl Ri3Crst {
        #[doc = "Reset of All registers and Internal State."]
        pub const _1: Self = Self::new(1);
        #[doc = "Releases of All registers and Internal State."]
        pub const _0: Self = Self::new(0);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqrst_SPEC;
    pub type Cmdqrst = crate::EnumBitfieldStruct<u8, Cmdqrst_SPEC>;
    impl Cmdqrst {
        #[doc = "The Command Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Command Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqrst_SPEC;
    pub type Rspqrst = crate::EnumBitfieldStruct<u8, Rspqrst_SPEC>;
    impl Rspqrst {
        #[doc = "The Response Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Response Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbrst_SPEC;
    pub type Tdbrst = crate::EnumBitfieldStruct<u8, Tdbrst_SPEC>;
    impl Tdbrst {
        #[doc = "The Transmit Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Transmit Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbrst_SPEC;
    pub type Rdbrst = crate::EnumBitfieldStruct<u8, Rdbrst_SPEC>;
    impl Rdbrst {
        #[doc = "The Receive Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Receive Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqrst_SPEC;
    pub type Ibiqrst = crate::EnumBitfieldStruct<u8, Ibiqrst_SPEC>;
    impl Ibiqrst {
        #[doc = "The IBI Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The IBI Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqrst_SPEC;
    pub type Rsqrst = crate::EnumBitfieldStruct<u8, Rsqrst_SPEC>;
    impl Rsqrst {
        #[doc = "The Receive Status Queue in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Receive Status Queue in this IP flush"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstctlByLh_SPEC;
impl crate::sealed::RegSpec for RstctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "Reset Control Register"]
pub type RstctlByLh = crate::RegValueT<RstctlByLh_SPEC>;

impl RstctlByLh {
    #[doc = "High Priority Command Queue Software Reset"]
    #[inline(always)]
    pub fn hcmdqrst(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rstctl_by_lh::Hcmdqrst,
        RstctlByLh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rstctl_by_lh::Hcmdqrst,
            RstctlByLh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Software Reset"]
    #[inline(always)]
    pub fn hrspqrst(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rstctl_by_lh::Hrspqrst,
        RstctlByLh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rstctl_by_lh::Hrspqrst,
            RstctlByLh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Tx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn htdbrst(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rstctl_by_lh::Htdbrst,
        RstctlByLh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rstctl_by_lh::Htdbrst,
            RstctlByLh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx DATA Buffer Software Reset"]
    #[inline(always)]
    pub fn hrdbrst(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rstctl_by_lh::Hrdbrst,
        RstctlByLh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rstctl_by_lh::Hrdbrst,
            RstctlByLh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, RstctlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, RstctlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstctlByLh {
    #[inline(always)]
    fn default() -> RstctlByLh {
        <crate::RegValueT<RstctlByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstctl_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hcmdqrst_SPEC;
    pub type Hcmdqrst = crate::EnumBitfieldStruct<u8, Hcmdqrst_SPEC>;
    impl Hcmdqrst {
        #[doc = "The High Priority Command Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Command Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hrspqrst_SPEC;
    pub type Hrspqrst = crate::EnumBitfieldStruct<u8, Hrspqrst_SPEC>;
    impl Hrspqrst {
        #[doc = "The High Priority Response Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Response Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htdbrst_SPEC;
    pub type Htdbrst = crate::EnumBitfieldStruct<u8, Htdbrst_SPEC>;
    impl Htdbrst {
        #[doc = "The High Priority Transmit Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Transmit Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hrdbrst_SPEC;
    pub type Hrdbrst = crate::EnumBitfieldStruct<u8, Hrdbrst_SPEC>;
    impl Hrdbrst {
        #[doc = "The High Priority Receive Queues in this IP do not flush."]
        pub const _0: Self = Self::new(0);
        #[doc = "The High Priority Receive Queues in this IP flush."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstctlHaH_SPEC;
impl crate::sealed::RegSpec for RstctlHaH_SPEC {
    type DataType = u16;
}
#[doc = "Reset Control Register"]
pub type RstctlHaH = crate::RegValueT<RstctlHaH_SPEC>;

impl RstctlHaH {
    #[doc = "Internal Software Reset"]
    #[inline(always)]
    pub fn intlrst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstctl_ha_h::Intlrst,
        RstctlHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstctl_ha_h::Intlrst,
            RstctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000000. The write value should be 000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fff, 1, 0, u16, RstctlHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7fff,1,0,u16, RstctlHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstctlHaH {
    #[inline(always)]
    fn default() -> RstctlHaH {
        <crate::RegValueT<RstctlHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstctl_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Intlrst_SPEC;
    pub type Intlrst = crate::EnumBitfieldStruct<u8, Intlrst_SPEC>;
    impl Intlrst {
        #[doc = "Releases of some registers and internal state."]
        pub const _0: Self = Self::new(0);
        #[doc = "Resets of some registers and internal state."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstctlByHl_SPEC;
impl crate::sealed::RegSpec for RstctlByHl_SPEC {
    type DataType = u8;
}
#[doc = "Reset Control Register"]
pub type RstctlByHl = crate::RegValueT<RstctlByHl_SPEC>;

impl RstctlByHl {
    #[doc = "Internal Software Reset"]
    #[inline(always)]
    pub fn intlrst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstctl_by_hl::Intlrst,
        RstctlByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstctl_by_hl::Intlrst,
            RstctlByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, RstctlByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, RstctlByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstctlByHl {
    #[inline(always)]
    fn default() -> RstctlByHl {
        <crate::RegValueT<RstctlByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstctl_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Intlrst_SPEC;
    pub type Intlrst = crate::EnumBitfieldStruct<u8, Intlrst_SPEC>;
    impl Intlrst {
        #[doc = "Releases of some registers and internal state."]
        pub const _0: Self = Self::new(0);
        #[doc = "Resets of some registers and internal state."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Prsst_SPEC;
impl crate::sealed::RegSpec for Prsst_SPEC {
    type DataType = u32;
}
#[doc = "Present State Register"]
pub type Prsst = crate::RegValueT<Prsst_SPEC>;

impl Prsst {
    #[doc = "Current Master"]
    #[inline(always)]
    pub fn crms(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, prsst::Crms, Prsst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,prsst::Crms, Prsst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Transmit/Receive Mode"]
    #[inline(always)]
    pub fn trmd(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, prsst::Trmd, Prsst_SPEC, crate::common::R> {
        crate::common::RegisterField::<4,0x1,1,0,prsst::Trmd, Prsst_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Present State Write Protect"]
    #[inline(always)]
    pub fn prsstwp(
        self,
    ) -> crate::common::RegisterField<7, 0x1, 1, 0, prsst::Prsstwp, Prsst_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<7,0x1,1,0,prsst::Prsstwp, Prsst_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Prsst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Prsst_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Prsst {
    #[inline(always)]
    fn default() -> Prsst {
        <crate::RegValueT<Prsst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod prsst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crms_SPEC;
    pub type Crms = crate::EnumBitfieldStruct<u8, Crms_SPEC>;
    impl Crms {
        #[doc = "The Master is not the Current Master, and must request and acquire Bus ownership before initiating any transfer."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master is the Current Master, and as a result can initiate transfers."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Trmd_SPEC;
    pub type Trmd = crate::EnumBitfieldStruct<u8, Trmd_SPEC>;
    impl Trmd {
        #[doc = "Receive mode"]
        pub const _0: Self = Self::new(0);
        #[doc = "Transmit mode"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prsstwp_SPEC;
    pub type Prsstwp = crate::EnumBitfieldStruct<u8, Prsstwp_SPEC>;
    impl Prsstwp {
        #[doc = "Bit CRMS is protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "Bit CRMS can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrsstHaL_SPEC;
impl crate::sealed::RegSpec for PrsstHaL_SPEC {
    type DataType = u16;
}
#[doc = "Present State Register"]
pub type PrsstHaL = crate::RegValueT<PrsstHaL_SPEC>;

impl PrsstHaL {
    #[doc = "Current Master"]
    #[inline(always)]
    pub fn crms(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        prsst_ha_l::Crms,
        PrsstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            prsst_ha_l::Crms,
            PrsstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Transmit/Receive Mode"]
    #[inline(always)]
    pub fn trmd(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, prsst_ha_l::Trmd, PrsstHaL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            prsst_ha_l::Trmd,
            PrsstHaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Present State Write Protect"]
    #[inline(always)]
    pub fn prsstwp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        prsst_ha_l::Prsstwp,
        PrsstHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            prsst_ha_l::Prsstwp,
            PrsstHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, PrsstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, PrsstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PrsstHaL {
    #[inline(always)]
    fn default() -> PrsstHaL {
        <crate::RegValueT<PrsstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod prsst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crms_SPEC;
    pub type Crms = crate::EnumBitfieldStruct<u8, Crms_SPEC>;
    impl Crms {
        #[doc = "The Master is not the Current Master, and must request and acquire Bus ownership before initiating any transfer."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master is the Current Master, and as a result can initiate transfers."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Trmd_SPEC;
    pub type Trmd = crate::EnumBitfieldStruct<u8, Trmd_SPEC>;
    impl Trmd {
        #[doc = "Receive mode"]
        pub const _0: Self = Self::new(0);
        #[doc = "Transmit mode"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prsstwp_SPEC;
    pub type Prsstwp = crate::EnumBitfieldStruct<u8, Prsstwp_SPEC>;
    impl Prsstwp {
        #[doc = "Bit CRMS is protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "Bit CRMS can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrsstByLl_SPEC;
impl crate::sealed::RegSpec for PrsstByLl_SPEC {
    type DataType = u8;
}
#[doc = "Present State Register"]
pub type PrsstByLl = crate::RegValueT<PrsstByLl_SPEC>;

impl PrsstByLl {
    #[doc = "Current Master"]
    #[inline(always)]
    pub fn crms(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        prsst_by_ll::Crms,
        PrsstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            prsst_by_ll::Crms,
            PrsstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Transmit/Receive Mode"]
    #[inline(always)]
    pub fn trmd(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        prsst_by_ll::Trmd,
        PrsstByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            prsst_by_ll::Trmd,
            PrsstByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, PrsstByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, PrsstByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Present State Write Protect"]
    #[inline(always)]
    pub fn prsstwp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        prsst_by_ll::Prsstwp,
        PrsstByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            prsst_by_ll::Prsstwp,
            PrsstByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for PrsstByLl {
    #[inline(always)]
    fn default() -> PrsstByLl {
        <crate::RegValueT<PrsstByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod prsst_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crms_SPEC;
    pub type Crms = crate::EnumBitfieldStruct<u8, Crms_SPEC>;
    impl Crms {
        #[doc = "The Master is not the Current Master, and must request and acquire Bus ownership before initiating any transfer."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master is the Current Master, and as a result can initiate transfers."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Trmd_SPEC;
    pub type Trmd = crate::EnumBitfieldStruct<u8, Trmd_SPEC>;
    impl Trmd {
        #[doc = "Receive mode"]
        pub const _0: Self = Self::new(0);
        #[doc = "Transmit mode"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prsstwp_SPEC;
    pub type Prsstwp = crate::EnumBitfieldStruct<u8, Prsstwp_SPEC>;
    impl Prsstwp {
        #[doc = "Bit CRMS is protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "Bit CRMS can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Inst_SPEC;
impl crate::sealed::RegSpec for Inst_SPEC {
    type DataType = u32;
}
#[doc = "Internal Status Register"]
pub type Inst = crate::RegValueT<Inst_SPEC>;

impl Inst {
    #[doc = "Internal Error Flag"]
    #[inline(always)]
    pub fn inef(
        self,
    ) -> crate::common::RegisterField<10, 0x1, 1, 0, inst::Inef, Inst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x1,1,0,inst::Inef, Inst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Inst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Inst_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Inst {
    #[inline(always)]
    fn default() -> Inst {
        <crate::RegValueT<Inst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inef_SPEC;
    pub type Inef = crate::EnumBitfieldStruct<u8, Inef_SPEC>;
    impl Inef {
        #[doc = "This IP Internal Error has not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP Internal Error has detected"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InstHaL_SPEC;
impl crate::sealed::RegSpec for InstHaL_SPEC {
    type DataType = u16;
}
#[doc = "Internal Status Register"]
pub type InstHaL = crate::RegValueT<InstHaL_SPEC>;

impl InstHaL {
    #[doc = "Internal Error Flag"]
    #[inline(always)]
    pub fn inef(
        self,
    ) -> crate::common::RegisterField<10, 0x1, 1, 0, inst_ha_l::Inef, InstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            inst_ha_l::Inef,
            InstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, InstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<11,0x1f,1,0,u8, InstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for InstHaL {
    #[inline(always)]
    fn default() -> InstHaL {
        <crate::RegValueT<InstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inef_SPEC;
    pub type Inef = crate::EnumBitfieldStruct<u8, Inef_SPEC>;
    impl Inef {
        #[doc = "This IP Internal Error has not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP Internal Error has detected"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InstByLh_SPEC;
impl crate::sealed::RegSpec for InstByLh_SPEC {
    type DataType = u8;
}
#[doc = "Internal Status Register"]
pub type InstByLh = crate::RegValueT<InstByLh_SPEC>;

impl InstByLh {
    #[doc = "Internal Error Flag"]
    #[inline(always)]
    pub fn inef(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        inst_by_lh::Inef,
        InstByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            inst_by_lh::Inef,
            InstByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, InstByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, InstByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for InstByLh {
    #[inline(always)]
    fn default() -> InstByLh {
        <crate::RegValueT<InstByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inst_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inef_SPEC;
    pub type Inef = crate::EnumBitfieldStruct<u8, Inef_SPEC>;
    impl Inef {
        #[doc = "This IP Internal Error has not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP Internal Error has detected"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Inste_SPEC;
impl crate::sealed::RegSpec for Inste_SPEC {
    type DataType = u32;
}
#[doc = "Internal Status Enable Register"]
pub type Inste = crate::RegValueT<Inste_SPEC>;

impl Inste {
    #[doc = "Internal Error Enable"]
    #[inline(always)]
    pub fn inee(
        self,
    ) -> crate::common::RegisterField<10, 0x1, 1, 0, inste::Inee, Inste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<10,0x1,1,0,inste::Inee, Inste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Inste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Inste_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Inste {
    #[inline(always)]
    fn default() -> Inste {
        <crate::RegValueT<Inste_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inste {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inee_SPEC;
    pub type Inee = crate::EnumBitfieldStruct<u8, Inee_SPEC>;
    impl Inee {
        #[doc = "Disable INST.INEF"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable INST.INEF"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InsteHaL_SPEC;
impl crate::sealed::RegSpec for InsteHaL_SPEC {
    type DataType = u16;
}
#[doc = "Internal Status Enable Register"]
pub type InsteHaL = crate::RegValueT<InsteHaL_SPEC>;

impl InsteHaL {
    #[doc = "Internal Error Enable"]
    #[inline(always)]
    pub fn inee(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        inste_ha_l::Inee,
        InsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            inste_ha_l::Inee,
            InsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, InsteHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<11,0x1f,1,0,u8, InsteHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for InsteHaL {
    #[inline(always)]
    fn default() -> InsteHaL {
        <crate::RegValueT<InsteHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inste_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inee_SPEC;
    pub type Inee = crate::EnumBitfieldStruct<u8, Inee_SPEC>;
    impl Inee {
        #[doc = "Disable INST.INEF"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable INST.INEF"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InsteByLh_SPEC;
impl crate::sealed::RegSpec for InsteByLh_SPEC {
    type DataType = u8;
}
#[doc = "Internal Status Enable Register"]
pub type InsteByLh = crate::RegValueT<InsteByLh_SPEC>;

impl InsteByLh {
    #[doc = "Internal Error Enable"]
    #[inline(always)]
    pub fn inee(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        inste_by_lh::Inee,
        InsteByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            inste_by_lh::Inee,
            InsteByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, InsteByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, InsteByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for InsteByLh {
    #[inline(always)]
    fn default() -> InsteByLh {
        <crate::RegValueT<InsteByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inste_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inee_SPEC;
    pub type Inee = crate::EnumBitfieldStruct<u8, Inee_SPEC>;
    impl Inee {
        #[doc = "Disable INST.INEF"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable INST.INEF"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Inie_SPEC;
impl crate::sealed::RegSpec for Inie_SPEC {
    type DataType = u32;
}
#[doc = "Internal Interrupt Enable Register"]
pub type Inie = crate::RegValueT<Inie_SPEC>;

impl Inie {
    #[doc = "Internal Error Interrupt Enable"]
    #[inline(always)]
    pub fn ineie(
        self,
    ) -> crate::common::RegisterField<10, 0x1, 1, 0, inie::Ineie, Inie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<10,0x1,1,0,inie::Ineie, Inie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Inie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Inie_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Inie {
    #[inline(always)]
    fn default() -> Inie {
        <crate::RegValueT<Inie_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inie {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ineie_SPEC;
    pub type Ineie = crate::EnumBitfieldStruct<u8, Ineie_SPEC>;
    impl Ineie {
        #[doc = "Disables Non-recoverable Internal Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Non-recoverable Internal Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InieHaL_SPEC;
impl crate::sealed::RegSpec for InieHaL_SPEC {
    type DataType = u16;
}
#[doc = "Internal Interrupt Enable Register"]
pub type InieHaL = crate::RegValueT<InieHaL_SPEC>;

impl InieHaL {
    #[doc = "Internal Error Interrupt Enable"]
    #[inline(always)]
    pub fn ineie(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        inie_ha_l::Ineie,
        InieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            inie_ha_l::Ineie,
            InieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, InieHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<11,0x1f,1,0,u8, InieHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for InieHaL {
    #[inline(always)]
    fn default() -> InieHaL {
        <crate::RegValueT<InieHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inie_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ineie_SPEC;
    pub type Ineie = crate::EnumBitfieldStruct<u8, Ineie_SPEC>;
    impl Ineie {
        #[doc = "Disables Non-recoverable Internal Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Non-recoverable Internal Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InieByLh_SPEC;
impl crate::sealed::RegSpec for InieByLh_SPEC {
    type DataType = u8;
}
#[doc = "Internal Interrupt Enable Register"]
pub type InieByLh = crate::RegValueT<InieByLh_SPEC>;

impl InieByLh {
    #[doc = "Internal Error Interrupt Enable"]
    #[inline(always)]
    pub fn ineie(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        inie_by_lh::Ineie,
        InieByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            inie_by_lh::Ineie,
            InieByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, InieByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, InieByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for InieByLh {
    #[inline(always)]
    fn default() -> InieByLh {
        <crate::RegValueT<InieByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod inie_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ineie_SPEC;
    pub type Ineie = crate::EnumBitfieldStruct<u8, Ineie_SPEC>;
    impl Ineie {
        #[doc = "Disables Non-recoverable Internal Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Non-recoverable Internal Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Instfc_SPEC;
impl crate::sealed::RegSpec for Instfc_SPEC {
    type DataType = u32;
}
#[doc = "Internal Status Force Register"]
pub type Instfc = crate::RegValueT<Instfc_SPEC>;

impl Instfc {
    #[doc = "Internal Error Force"]
    #[inline(always)]
    pub fn inefc(
        self,
    ) -> crate::common::RegisterField<10, 0x1, 1, 0, instfc::Inefc, Instfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<10,0x1,1,0,instfc::Inefc, Instfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Instfc_SPEC, crate::common::W> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Instfc_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Instfc {
    #[inline(always)]
    fn default() -> Instfc {
        <crate::RegValueT<Instfc_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod instfc {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inefc_SPEC;
    pub type Inefc = crate::EnumBitfieldStruct<u8, Inefc_SPEC>;
    impl Inefc {
        #[doc = "not force a specific interrupt"]
        pub const _0: Self = Self::new(0);
        #[doc = "force a specific interrupt"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InstfcHaL_SPEC;
impl crate::sealed::RegSpec for InstfcHaL_SPEC {
    type DataType = u16;
}
#[doc = "Internal Status Force Register"]
pub type InstfcHaL = crate::RegValueT<InstfcHaL_SPEC>;

impl InstfcHaL {
    #[doc = "Internal Error Force"]
    #[inline(always)]
    pub fn inefc(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        instfc_ha_l::Inefc,
        InstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            instfc_ha_l::Inefc,
            InstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, InstfcHaL_SPEC, crate::common::W> {
        crate::common::RegisterField::<11,0x1f,1,0,u8, InstfcHaL_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for InstfcHaL {
    #[inline(always)]
    fn default() -> InstfcHaL {
        <crate::RegValueT<InstfcHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod instfc_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inefc_SPEC;
    pub type Inefc = crate::EnumBitfieldStruct<u8, Inefc_SPEC>;
    impl Inefc {
        #[doc = "not force a specific interrupt"]
        pub const _0: Self = Self::new(0);
        #[doc = "force a specific interrupt"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InstfcByLh_SPEC;
impl crate::sealed::RegSpec for InstfcByLh_SPEC {
    type DataType = u8;
}
#[doc = "Internal Status Force Register"]
pub type InstfcByLh = crate::RegValueT<InstfcByLh_SPEC>;

impl InstfcByLh {
    #[doc = "Internal Error Force"]
    #[inline(always)]
    pub fn inefc(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        instfc_by_lh::Inefc,
        InstfcByLh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            instfc_by_lh::Inefc,
            InstfcByLh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, InstfcByLh_SPEC, crate::common::W> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, InstfcByLh_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for InstfcByLh {
    #[inline(always)]
    fn default() -> InstfcByLh {
        <crate::RegValueT<InstfcByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod instfc_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inefc_SPEC;
    pub type Inefc = crate::EnumBitfieldStruct<u8, Inefc_SPEC>;
    impl Inefc {
        #[doc = "not force a specific interrupt"]
        pub const _0: Self = Self::new(0);
        #[doc = "force a specific interrupt"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Dvct_SPEC;
impl crate::sealed::RegSpec for Dvct_SPEC {
    type DataType = u32;
}
#[doc = "Device Characteristic Table Register"]
pub type Dvct = crate::RegValueT<Dvct_SPEC>;

impl Dvct {
    #[doc = "DCT Table Index"]
    #[inline(always)]
    pub fn idx(
        self,
    ) -> crate::common::RegisterField<19, 0x1f, 1, 0, u8, Dvct_SPEC, crate::common::R> {
        crate::common::RegisterField::<19,0x1f,1,0,u8, Dvct_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Dvct_SPEC, crate::common::R> {
        crate::common::RegisterField::<24,0xff,1,0,u8, Dvct_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Dvct {
    #[inline(always)]
    fn default() -> Dvct {
        <crate::RegValueT<Dvct_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DvctHaH_SPEC;
impl crate::sealed::RegSpec for DvctHaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Characteristic Table Register"]
pub type DvctHaH = crate::RegValueT<DvctHaH_SPEC>;

impl DvctHaH {
    #[doc = "DCT Table Index"]
    #[inline(always)]
    pub fn idx(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, DvctHaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, DvctHaH_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, DvctHaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, DvctHaH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for DvctHaH {
    #[inline(always)]
    fn default() -> DvctHaH {
        <crate::RegValueT<DvctHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DvctByHl_SPEC;
impl crate::sealed::RegSpec for DvctByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Characteristic Table Register"]
pub type DvctByHl = crate::RegValueT<DvctByHl_SPEC>;

impl DvctByHl {
    #[doc = "These bits are read as 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x7, 1, 0, u8, DvctByHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x7,1,0,u8, DvctByHl_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "DCT Table Index"]
    #[inline(always)]
    pub fn idx(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, DvctByHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, DvctByHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for DvctByHl {
    #[inline(always)]
    fn default() -> DvctByHl {
        <crate::RegValueT<DvctByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ibinctl_SPEC;
impl crate::sealed::RegSpec for Ibinctl_SPEC {
    type DataType = u32;
}
#[doc = "IBI Notify Control Register"]
pub type Ibinctl = crate::RegValueT<Ibinctl_SPEC>;

impl Ibinctl {
    #[doc = "Notify Rejected Hot-Join Control"]
    #[inline(always)]
    pub fn nrhjctl(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, ibinctl::Nrhjctl, Ibinctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ibinctl::Nrhjctl,
            Ibinctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Notify Rejected Master Request Control"]
    #[inline(always)]
    pub fn nrmrctl(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, ibinctl::Nrmrctl, Ibinctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ibinctl::Nrmrctl,
            Ibinctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Notify Rejected Slave Interrupt Request Control"]
    #[inline(always)]
    pub fn nrsirctl(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ibinctl::Nrsirctl,
        Ibinctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ibinctl::Nrsirctl,
            Ibinctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000000000000000000000. The write value should be 0000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfffffff, 1, 0, u32, Ibinctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xfffffff,1,0,u32, Ibinctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ibinctl {
    #[inline(always)]
    fn default() -> Ibinctl {
        <crate::RegValueT<Ibinctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ibinctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrhjctl_SPEC;
    pub type Nrhjctl = crate::EnumBitfieldStruct<u8, Nrhjctl_SPEC>;
    impl Nrhjctl {
        #[doc = "Do not pass rejected IBI Status to IBI Queue, if the incoming HotJoin request is NACKed and is auto-disabled based on field HJACKCTL of BCTL."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue, if the incoming Hot Join request is NACKed and is auto-disabled based on field HJACKCTL of BCTL."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrmrctl_SPEC;
    pub type Nrmrctl = crate::EnumBitfieldStruct<u8, Nrmrctl_SPEC>;
    impl Nrmrctl {
        #[doc = "Do not pass rejected IBI Status to IBI Queue/Ring, if the incoming Master Request is NACKed and is auto-disabled based on DVMRRJ field in relevant DAT entry."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue, if the incoming Master Request is NACKed and is auto-disabled based on DVMRRJ field in relevant DAT entry."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrsirctl_SPEC;
    pub type Nrsirctl = crate::EnumBitfieldStruct<u8, Nrsirctl_SPEC>;
    impl Nrsirctl {
        #[doc = "Do not pass rejected IBI Status to the IBI Queue/Rings, if the incoming SIR is NACKed and is auto-disabled based on DVSIRRJ field in relevant DAT entry."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue/Rings, if the incoming SIR is NACKed and is auto-disabled based on DVSIRRJ field in relevant DAT entry."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IbinctlHaL_SPEC;
impl crate::sealed::RegSpec for IbinctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "IBI Notify Control Register"]
pub type IbinctlHaL = crate::RegValueT<IbinctlHaL_SPEC>;

impl IbinctlHaL {
    #[doc = "Notify Rejected Hot-Join Control"]
    #[inline(always)]
    pub fn nrhjctl(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ibinctl_ha_l::Nrhjctl,
        IbinctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ibinctl_ha_l::Nrhjctl,
            IbinctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Notify Rejected Master Request Control"]
    #[inline(always)]
    pub fn nrmrctl(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ibinctl_ha_l::Nrmrctl,
        IbinctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ibinctl_ha_l::Nrmrctl,
            IbinctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Notify Rejected Slave Interrupt Request Control"]
    #[inline(always)]
    pub fn nrsirctl(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ibinctl_ha_l::Nrsirctl,
        IbinctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ibinctl_ha_l::Nrsirctl,
            IbinctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000. The write value should be 000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, IbinctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xfff,1,0,u16, IbinctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for IbinctlHaL {
    #[inline(always)]
    fn default() -> IbinctlHaL {
        <crate::RegValueT<IbinctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ibinctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrhjctl_SPEC;
    pub type Nrhjctl = crate::EnumBitfieldStruct<u8, Nrhjctl_SPEC>;
    impl Nrhjctl {
        #[doc = "Do not pass rejected IBI Status to IBI Queue, if the incoming HotJoin request is NACKed and is auto-disabled based on field HJACKCTL of BCTL."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue, if the incoming Hot Join request is NACKed and is auto-disabled based on field HJACKCTL of BCTL."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrmrctl_SPEC;
    pub type Nrmrctl = crate::EnumBitfieldStruct<u8, Nrmrctl_SPEC>;
    impl Nrmrctl {
        #[doc = "Do not pass rejected IBI Status to IBI Queue/Ring, if the incoming Master Request is NACKed and is auto-disabled based on DVMRRJ field in relevant DAT entry."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue, if the incoming Master Request is NACKed and is auto-disabled based on DVMRRJ field in relevant DAT entry."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrsirctl_SPEC;
    pub type Nrsirctl = crate::EnumBitfieldStruct<u8, Nrsirctl_SPEC>;
    impl Nrsirctl {
        #[doc = "Do not pass rejected IBI Status to the IBI Queue/Rings, if the incoming SIR is NACKed and is auto-disabled based on DVSIRRJ field in relevant DAT entry."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue/Rings, if the incoming SIR is NACKed and is auto-disabled based on DVSIRRJ field in relevant DAT entry."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IbinctlByLl_SPEC;
impl crate::sealed::RegSpec for IbinctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "IBI Notify Control Register"]
pub type IbinctlByLl = crate::RegValueT<IbinctlByLl_SPEC>;

impl IbinctlByLl {
    #[doc = "Notify Rejected Hot-Join Control"]
    #[inline(always)]
    pub fn nrhjctl(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ibinctl_by_ll::Nrhjctl,
        IbinctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ibinctl_by_ll::Nrhjctl,
            IbinctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Notify Rejected Master Request Control"]
    #[inline(always)]
    pub fn nrmrctl(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ibinctl_by_ll::Nrmrctl,
        IbinctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ibinctl_by_ll::Nrmrctl,
            IbinctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Notify Rejected Slave Interrupt Request Control"]
    #[inline(always)]
    pub fn nrsirctl(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ibinctl_by_ll::Nrsirctl,
        IbinctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ibinctl_by_ll::Nrsirctl,
            IbinctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, IbinctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, IbinctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for IbinctlByLl {
    #[inline(always)]
    fn default() -> IbinctlByLl {
        <crate::RegValueT<IbinctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ibinctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrhjctl_SPEC;
    pub type Nrhjctl = crate::EnumBitfieldStruct<u8, Nrhjctl_SPEC>;
    impl Nrhjctl {
        #[doc = "Do not pass rejected IBI Status to IBI Queue, if the incoming HotJoin request is NACKed and is auto-disabled based on field HJACKCTL of BCTL."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue, if the incoming Hot Join request is NACKed and is auto-disabled based on field HJACKCTL of BCTL."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrmrctl_SPEC;
    pub type Nrmrctl = crate::EnumBitfieldStruct<u8, Nrmrctl_SPEC>;
    impl Nrmrctl {
        #[doc = "Do not pass rejected IBI Status to IBI Queue/Ring, if the incoming Master Request is NACKed and is auto-disabled based on DVMRRJ field in relevant DAT entry."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue, if the incoming Master Request is NACKed and is auto-disabled based on DVMRRJ field in relevant DAT entry."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nrsirctl_SPEC;
    pub type Nrsirctl = crate::EnumBitfieldStruct<u8, Nrsirctl_SPEC>;
    impl Nrsirctl {
        #[doc = "Do not pass rejected IBI Status to the IBI Queue/Rings, if the incoming SIR is NACKed and is auto-disabled based on DVSIRRJ field in relevant DAT entry."]
        pub const _0: Self = Self::new(0);
        #[doc = "Pass rejected IBI Status to the IBI Queue/Rings, if the incoming SIR is NACKed and is auto-disabled based on DVSIRRJ field in relevant DAT entry."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bfctl_SPEC;
impl crate::sealed::RegSpec for Bfctl_SPEC {
    type DataType = u32;
}
#[doc = "Bus Function Control Register"]
pub type Bfctl = crate::RegValueT<Bfctl_SPEC>;

impl Bfctl {
    #[doc = "Master Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn male(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bfctl::Male, Bfctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,bfctl::Male, Bfctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "NACK Transmission Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn nale(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, bfctl::Nale, Bfctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,bfctl::Nale, Bfctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn sale(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, bfctl::Sale, Bfctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,bfctl::Sale, Bfctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "SCL Synchronous Circuit Enable"]
    #[inline(always)]
    pub fn scsyne(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bfctl::Scsyne, Bfctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0x1,1,0,bfctl::Scsyne, Bfctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "SMBus/I2C Bus Selection"]
    #[inline(always)]
    pub fn smbs(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, bfctl::Smbs, Bfctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<12,0x1,1,0,bfctl::Smbs, Bfctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Fast-mode Plus Enable"]
    #[inline(always)]
    pub fn fmpe(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, bfctl::Fmpe, Bfctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<14,0x1,1,0,bfctl::Fmpe, Bfctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Speed Mode Enable"]
    #[inline(always)]
    pub fn hsme(
        self,
    ) -> crate::common::RegisterField<15, 0x1, 1, 0, bfctl::Hsme, Bfctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<15,0x1,1,0,bfctl::Hsme, Bfctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Bfctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Bfctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Bfctl {
    #[inline(always)]
    fn default() -> Bfctl {
        <crate::RegValueT<Bfctl_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod bfctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Male_SPEC;
    pub type Male = crate::EnumBitfieldStruct<u8, Male_SPEC>;
    impl Male {
        #[doc = "Master arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Master arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nale_SPEC;
    pub type Nale = crate::EnumBitfieldStruct<u8, Nale_SPEC>;
    impl Nale {
        #[doc = "NACK transmission arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK transmission arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sale_SPEC;
    pub type Sale = crate::EnumBitfieldStruct<u8, Sale_SPEC>;
    impl Sale {
        #[doc = "Slave arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scsyne_SPEC;
    pub type Scsyne = crate::EnumBitfieldStruct<u8, Scsyne_SPEC>;
    impl Scsyne {
        #[doc = "No SCL synchronous circuit uses."]
        pub const _0: Self = Self::new(0);
        #[doc = "An SCL synchronous circuit uses."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Smbs_SPEC;
    pub type Smbs = crate::EnumBitfieldStruct<u8, Smbs_SPEC>;
    impl Smbs {
        #[doc = "The I2C bus select."]
        pub const _0: Self = Self::new(0);
        #[doc = "The SMBus select."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmpe_SPEC;
    pub type Fmpe = crate::EnumBitfieldStruct<u8, Fmpe_SPEC>;
    impl Fmpe {
        #[doc = "No Fm+ slope control circuit uses for the SCLn pin and SDAn pin."]
        pub const _0: Self = Self::new(0);
        #[doc = "An Fm+ slope control circuit uses for the SCLn pin and SDAn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsme_SPEC;
    pub type Hsme = crate::EnumBitfieldStruct<u8, Hsme_SPEC>;
    impl Hsme {
        #[doc = "Disable High Speed Mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable High Speed Mode."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BfctlHaL_SPEC;
impl crate::sealed::RegSpec for BfctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Function Control Register"]
pub type BfctlHaL = crate::RegValueT<BfctlHaL_SPEC>;

impl BfctlHaL {
    #[doc = "Master Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn male(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bfctl_ha_l::Male,
        BfctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bfctl_ha_l::Male,
            BfctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "NACK Transmission Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn nale(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bfctl_ha_l::Nale,
        BfctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bfctl_ha_l::Nale,
            BfctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Slave Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn sale(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bfctl_ha_l::Sale,
        BfctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bfctl_ha_l::Sale,
            BfctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "SCL Synchronous Circuit Enable"]
    #[inline(always)]
    pub fn scsyne(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        bfctl_ha_l::Scsyne,
        BfctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            bfctl_ha_l::Scsyne,
            BfctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "SMBus/I2C Bus Selection"]
    #[inline(always)]
    pub fn smbs(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        bfctl_ha_l::Smbs,
        BfctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            bfctl_ha_l::Smbs,
            BfctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<13, 1, 0, BfctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<13,1,0,BfctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Fast-mode Plus Enable"]
    #[inline(always)]
    pub fn fmpe(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        bfctl_ha_l::Fmpe,
        BfctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            bfctl_ha_l::Fmpe,
            BfctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Speed Mode Enable"]
    #[inline(always)]
    pub fn hsme(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        bfctl_ha_l::Hsme,
        BfctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            bfctl_ha_l::Hsme,
            BfctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for BfctlHaL {
    #[inline(always)]
    fn default() -> BfctlHaL {
        <crate::RegValueT<BfctlHaL_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod bfctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Male_SPEC;
    pub type Male = crate::EnumBitfieldStruct<u8, Male_SPEC>;
    impl Male {
        #[doc = "Master arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Master arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nale_SPEC;
    pub type Nale = crate::EnumBitfieldStruct<u8, Nale_SPEC>;
    impl Nale {
        #[doc = "NACK transmission arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK transmission arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sale_SPEC;
    pub type Sale = crate::EnumBitfieldStruct<u8, Sale_SPEC>;
    impl Sale {
        #[doc = "Slave arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scsyne_SPEC;
    pub type Scsyne = crate::EnumBitfieldStruct<u8, Scsyne_SPEC>;
    impl Scsyne {
        #[doc = "No SCL synchronous circuit uses."]
        pub const _0: Self = Self::new(0);
        #[doc = "An SCL synchronous circuit uses."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Smbs_SPEC;
    pub type Smbs = crate::EnumBitfieldStruct<u8, Smbs_SPEC>;
    impl Smbs {
        #[doc = "The I2C bus select."]
        pub const _0: Self = Self::new(0);
        #[doc = "The SMBus select."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmpe_SPEC;
    pub type Fmpe = crate::EnumBitfieldStruct<u8, Fmpe_SPEC>;
    impl Fmpe {
        #[doc = "No Fm+ slope control circuit uses for the SCLn pin and SDAn pin."]
        pub const _0: Self = Self::new(0);
        #[doc = "An Fm+ slope control circuit uses for the SCLn pin and SDAn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsme_SPEC;
    pub type Hsme = crate::EnumBitfieldStruct<u8, Hsme_SPEC>;
    impl Hsme {
        #[doc = "Disable High Speed Mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable High Speed Mode."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BfctlByLl_SPEC;
impl crate::sealed::RegSpec for BfctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Function Control Register"]
pub type BfctlByLl = crate::RegValueT<BfctlByLl_SPEC>;

impl BfctlByLl {
    #[doc = "Master Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn male(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bfctl_by_ll::Male,
        BfctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bfctl_by_ll::Male,
            BfctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "NACK Transmission Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn nale(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bfctl_by_ll::Nale,
        BfctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bfctl_by_ll::Nale,
            BfctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Slave Arbitration-Lost Detection Enable"]
    #[inline(always)]
    pub fn sale(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bfctl_by_ll::Sale,
        BfctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bfctl_by_ll::Sale,
            BfctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, BfctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, BfctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BfctlByLl {
    #[inline(always)]
    fn default() -> BfctlByLl {
        <crate::RegValueT<BfctlByLl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod bfctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Male_SPEC;
    pub type Male = crate::EnumBitfieldStruct<u8, Male_SPEC>;
    impl Male {
        #[doc = "Master arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Master arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nale_SPEC;
    pub type Nale = crate::EnumBitfieldStruct<u8, Nale_SPEC>;
    impl Nale {
        #[doc = "NACK transmission arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK transmission arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sale_SPEC;
    pub type Sale = crate::EnumBitfieldStruct<u8, Sale_SPEC>;
    impl Sale {
        #[doc = "Slave arbitration-lost detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave arbitration-lost detection enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BfctlByLh_SPEC;
impl crate::sealed::RegSpec for BfctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Function Control Register"]
pub type BfctlByLh = crate::RegValueT<BfctlByLh_SPEC>;

impl BfctlByLh {
    #[doc = "SCL Synchronous Circuit Enable"]
    #[inline(always)]
    pub fn scsyne(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bfctl_by_lh::Scsyne,
        BfctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bfctl_by_lh::Scsyne,
            BfctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "SMBus/I2C Bus Selection"]
    #[inline(always)]
    pub fn smbs(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bfctl_by_lh::Smbs,
        BfctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bfctl_by_lh::Smbs,
            BfctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<5, 1, 0, BfctlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<5,1,0,BfctlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Fast-mode Plus Enable"]
    #[inline(always)]
    pub fn fmpe(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        bfctl_by_lh::Fmpe,
        BfctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            bfctl_by_lh::Fmpe,
            BfctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Speed Mode Enable"]
    #[inline(always)]
    pub fn hsme(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        bfctl_by_lh::Hsme,
        BfctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            bfctl_by_lh::Hsme,
            BfctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for BfctlByLh {
    #[inline(always)]
    fn default() -> BfctlByLh {
        <crate::RegValueT<BfctlByLh_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod bfctl_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scsyne_SPEC;
    pub type Scsyne = crate::EnumBitfieldStruct<u8, Scsyne_SPEC>;
    impl Scsyne {
        #[doc = "No SCL synchronous circuit uses."]
        pub const _0: Self = Self::new(0);
        #[doc = "An SCL synchronous circuit uses."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Smbs_SPEC;
    pub type Smbs = crate::EnumBitfieldStruct<u8, Smbs_SPEC>;
    impl Smbs {
        #[doc = "The I2C bus select."]
        pub const _0: Self = Self::new(0);
        #[doc = "The SMBus select."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmpe_SPEC;
    pub type Fmpe = crate::EnumBitfieldStruct<u8, Fmpe_SPEC>;
    impl Fmpe {
        #[doc = "No Fm+ slope control circuit uses for the SCLn pin and SDAn pin."]
        pub const _0: Self = Self::new(0);
        #[doc = "An Fm+ slope control circuit uses for the SCLn pin and SDAn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsme_SPEC;
    pub type Hsme = crate::EnumBitfieldStruct<u8, Hsme_SPEC>;
    impl Hsme {
        #[doc = "Disable High Speed Mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable High Speed Mode."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svctl_SPEC;
impl crate::sealed::RegSpec for Svctl_SPEC {
    type DataType = u32;
}
#[doc = "Slave Control Register"]
pub type Svctl = crate::RegValueT<Svctl_SPEC>;

impl Svctl {
    #[doc = "General Call Address Enable"]
    #[inline(always)]
    pub fn gcae(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, svctl::Gcae, Svctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,svctl::Gcae, Svctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Hs-mode Master Code Enable"]
    #[inline(always)]
    pub fn hsmce(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, svctl::Hsmce, Svctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x1,1,0,svctl::Hsmce, Svctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device-ID Address Enable"]
    #[inline(always)]
    pub fn dvide(
        self,
    ) -> crate::common::RegisterField<6, 0x1, 1, 0, svctl::Dvide, Svctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x1,1,0,svctl::Dvide, Svctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Host Address Enable"]
    #[inline(always)]
    pub fn hoae(
        self,
    ) -> crate::common::RegisterField<15, 0x1, 1, 0, svctl::Hoae, Svctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<15,0x1,1,0,svctl::Hoae, Svctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Address Enable $x ($x=2 to 0)"]
    #[inline(always)]
    pub fn svae(
        self,
    ) -> crate::common::RegisterField<16, 0x7, 1, 0, svctl::Svae, Svctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0x7,1,0,svctl::Svae, Svctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<19, 0x1fff, 1, 0, u16, Svctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<19,0x1fff,1,0,u16, Svctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Svctl {
    #[inline(always)]
    fn default() -> Svctl {
        <crate::RegValueT<Svctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Gcae_SPEC;
    pub type Gcae = crate::EnumBitfieldStruct<u8, Gcae_SPEC>;
    impl Gcae {
        #[doc = "General call address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "General call address detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsmce_SPEC;
    pub type Hsmce = crate::EnumBitfieldStruct<u8, Hsmce_SPEC>;
    impl Hsmce {
        #[doc = "Hs-mode Master Code Detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Hs-mode Master Code Detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvide_SPEC;
    pub type Dvide = crate::EnumBitfieldStruct<u8, Dvide_SPEC>;
    impl Dvide {
        #[doc = "Device-ID address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Device-ID address detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hoae_SPEC;
    pub type Hoae = crate::EnumBitfieldStruct<u8, Hoae_SPEC>;
    impl Hoae {
        #[doc = "Host address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Host address detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svae_SPEC;
    pub type Svae = crate::EnumBitfieldStruct<u8, Svae_SPEC>;
    impl Svae {
        #[doc = "Slave $x disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave $x enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvctlHaL_SPEC;
impl crate::sealed::RegSpec for SvctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Slave Control Register"]
pub type SvctlHaL = crate::RegValueT<SvctlHaL_SPEC>;

impl SvctlHaL {
    #[doc = "General Call Address Enable"]
    #[inline(always)]
    pub fn gcae(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        svctl_ha_l::Gcae,
        SvctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            svctl_ha_l::Gcae,
            SvctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Hs-mode Master Code Enable"]
    #[inline(always)]
    pub fn hsmce(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        svctl_ha_l::Hsmce,
        SvctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            svctl_ha_l::Hsmce,
            SvctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device-ID Address Enable"]
    #[inline(always)]
    pub fn dvide(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        svctl_ha_l::Dvide,
        SvctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            svctl_ha_l::Dvide,
            SvctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0xff, 1, 0, u8, SvctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0xff,1,0,u8, SvctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Host Address Enable"]
    #[inline(always)]
    pub fn hoae(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        svctl_ha_l::Hoae,
        SvctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            svctl_ha_l::Hoae,
            SvctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for SvctlHaL {
    #[inline(always)]
    fn default() -> SvctlHaL {
        <crate::RegValueT<SvctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Gcae_SPEC;
    pub type Gcae = crate::EnumBitfieldStruct<u8, Gcae_SPEC>;
    impl Gcae {
        #[doc = "General call address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "General call address detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsmce_SPEC;
    pub type Hsmce = crate::EnumBitfieldStruct<u8, Hsmce_SPEC>;
    impl Hsmce {
        #[doc = "Hs-mode Master Code Detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Hs-mode Master Code Detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvide_SPEC;
    pub type Dvide = crate::EnumBitfieldStruct<u8, Dvide_SPEC>;
    impl Dvide {
        #[doc = "Device-ID address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Device-ID address detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hoae_SPEC;
    pub type Hoae = crate::EnumBitfieldStruct<u8, Hoae_SPEC>;
    impl Hoae {
        #[doc = "Host address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Host address detection enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvctlByLl_SPEC;
impl crate::sealed::RegSpec for SvctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Control Register"]
pub type SvctlByLl = crate::RegValueT<SvctlByLl_SPEC>;

impl SvctlByLl {
    #[doc = "General Call Address Enable"]
    #[inline(always)]
    pub fn gcae(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        svctl_by_ll::Gcae,
        SvctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            svctl_by_ll::Gcae,
            SvctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Hs-mode Master Code Enable"]
    #[inline(always)]
    pub fn hsmce(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        svctl_by_ll::Hsmce,
        SvctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            svctl_by_ll::Hsmce,
            SvctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device-ID Address Enable"]
    #[inline(always)]
    pub fn dvide(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        svctl_by_ll::Dvide,
        SvctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            svctl_by_ll::Dvide,
            SvctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, SvctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,SvctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SvctlByLl {
    #[inline(always)]
    fn default() -> SvctlByLl {
        <crate::RegValueT<SvctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Gcae_SPEC;
    pub type Gcae = crate::EnumBitfieldStruct<u8, Gcae_SPEC>;
    impl Gcae {
        #[doc = "General call address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "General call address detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsmce_SPEC;
    pub type Hsmce = crate::EnumBitfieldStruct<u8, Hsmce_SPEC>;
    impl Hsmce {
        #[doc = "Hs-mode Master Code Detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Hs-mode Master Code Detection enables."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvide_SPEC;
    pub type Dvide = crate::EnumBitfieldStruct<u8, Dvide_SPEC>;
    impl Dvide {
        #[doc = "Device-ID address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Device-ID address detection enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvctlByLh_SPEC;
impl crate::sealed::RegSpec for SvctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Control Register"]
pub type SvctlByLh = crate::RegValueT<SvctlByLh_SPEC>;

impl SvctlByLh {
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, SvctlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, SvctlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Host Address Enable"]
    #[inline(always)]
    pub fn hoae(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        svctl_by_lh::Hoae,
        SvctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            svctl_by_lh::Hoae,
            SvctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for SvctlByLh {
    #[inline(always)]
    fn default() -> SvctlByLh {
        <crate::RegValueT<SvctlByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svctl_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hoae_SPEC;
    pub type Hoae = crate::EnumBitfieldStruct<u8, Hoae_SPEC>;
    impl Hoae {
        #[doc = "Host address detection disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Host address detection enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvctlHaH_SPEC;
impl crate::sealed::RegSpec for SvctlHaH_SPEC {
    type DataType = u16;
}
#[doc = "Slave Control Register"]
pub type SvctlHaH = crate::RegValueT<SvctlHaH_SPEC>;

impl SvctlHaH {
    #[doc = "Slave Address Enable $x ($x=2 to 0)"]
    #[inline(always)]
    pub fn svae(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        svctl_ha_h::Svae,
        SvctlHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            svctl_ha_h::Svae,
            SvctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, SvctlHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1fff,1,0,u16, SvctlHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SvctlHaH {
    #[inline(always)]
    fn default() -> SvctlHaH {
        <crate::RegValueT<SvctlHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svctl_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svae_SPEC;
    pub type Svae = crate::EnumBitfieldStruct<u8, Svae_SPEC>;
    impl Svae {
        #[doc = "Slave $x disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave $x enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvctlByHl_SPEC;
impl crate::sealed::RegSpec for SvctlByHl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Control Register"]
pub type SvctlByHl = crate::RegValueT<SvctlByHl_SPEC>;

impl SvctlByHl {
    #[doc = "Slave Address Enable $x ($x=2 to 0)"]
    #[inline(always)]
    pub fn svae(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        svctl_by_hl::Svae,
        SvctlByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            svctl_by_hl::Svae,
            SvctlByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, SvctlByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, SvctlByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SvctlByHl {
    #[inline(always)]
    fn default() -> SvctlByHl {
        <crate::RegValueT<SvctlByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svctl_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svae_SPEC;
    pub type Svae = crate::EnumBitfieldStruct<u8, Svae_SPEC>;
    impl Svae {
        #[doc = "Slave $x disables."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave $x enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Refckctl_SPEC;
impl crate::sealed::RegSpec for Refckctl_SPEC {
    type DataType = u32;
}
#[doc = "Reference Clock Control Register"]
pub type Refckctl = crate::RegValueT<Refckctl_SPEC>;

impl Refckctl {
    #[doc = "Internal Reference Clock SelectionSelects the internal reference clock source (I3Cφ) for this IP."]
    #[inline(always)]
    pub fn irefcks(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        refckctl::Irefcks,
        Refckctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            refckctl::Irefcks,
            Refckctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000000000000000000000000. The write value should be 00000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fffffff, 1, 0, u32, Refckctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fffffff,1,0,u32, Refckctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Refckctl {
    #[inline(always)]
    fn default() -> Refckctl {
        <crate::RegValueT<Refckctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod refckctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Irefcks_SPEC;
    pub type Irefcks = crate::EnumBitfieldStruct<u8, Irefcks_SPEC>;
    impl Irefcks {
        #[doc = "TCLK/1 clock"]
        pub const _000: Self = Self::new(0);
        #[doc = "TCLK/2 clock"]
        pub const _001: Self = Self::new(1);
        #[doc = "TCLK/4 clock"]
        pub const _010: Self = Self::new(2);
        #[doc = "TCLK/8 clock"]
        pub const _011: Self = Self::new(3);
        #[doc = "TCLK/16 clock"]
        pub const _100: Self = Self::new(4);
        #[doc = "TCLK/32 clock"]
        pub const _101: Self = Self::new(5);
        #[doc = "TCLK/64 clock"]
        pub const _110: Self = Self::new(6);
        #[doc = "TCLK/128 clock"]
        pub const _111: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RefckctlHaL_SPEC;
impl crate::sealed::RegSpec for RefckctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Reference Clock Control Register"]
pub type RefckctlHaL = crate::RegValueT<RefckctlHaL_SPEC>;

impl RefckctlHaL {
    #[doc = "Internal Reference Clock SelectionSelects the internal reference clock source (I3Cφ) for this IP."]
    #[inline(always)]
    pub fn irefcks(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        refckctl_ha_l::Irefcks,
        RefckctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            refckctl_ha_l::Irefcks,
            RefckctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, RefckctlHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fff,1,0,u16, RefckctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RefckctlHaL {
    #[inline(always)]
    fn default() -> RefckctlHaL {
        <crate::RegValueT<RefckctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod refckctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Irefcks_SPEC;
    pub type Irefcks = crate::EnumBitfieldStruct<u8, Irefcks_SPEC>;
    impl Irefcks {
        #[doc = "TCLK/1 clock"]
        pub const _000: Self = Self::new(0);
        #[doc = "TCLK/2 clock"]
        pub const _001: Self = Self::new(1);
        #[doc = "TCLK/4 clock"]
        pub const _010: Self = Self::new(2);
        #[doc = "TCLK/8 clock"]
        pub const _011: Self = Self::new(3);
        #[doc = "TCLK/16 clock"]
        pub const _100: Self = Self::new(4);
        #[doc = "TCLK/32 clock"]
        pub const _101: Self = Self::new(5);
        #[doc = "TCLK/64 clock"]
        pub const _110: Self = Self::new(6);
        #[doc = "TCLK/128 clock"]
        pub const _111: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RefckctlByLl_SPEC;
impl crate::sealed::RegSpec for RefckctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Reference Clock Control Register"]
pub type RefckctlByLl = crate::RegValueT<RefckctlByLl_SPEC>;

impl RefckctlByLl {
    #[doc = "Internal Reference Clock SelectionSelects the internal reference clock source (I3Cφ) for this IP."]
    #[inline(always)]
    pub fn irefcks(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        refckctl_by_ll::Irefcks,
        RefckctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            refckctl_by_ll::Irefcks,
            RefckctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, RefckctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, RefckctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RefckctlByLl {
    #[inline(always)]
    fn default() -> RefckctlByLl {
        <crate::RegValueT<RefckctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod refckctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Irefcks_SPEC;
    pub type Irefcks = crate::EnumBitfieldStruct<u8, Irefcks_SPEC>;
    impl Irefcks {
        #[doc = "TCLK/1 clock"]
        pub const _000: Self = Self::new(0);
        #[doc = "TCLK/2 clock"]
        pub const _001: Self = Self::new(1);
        #[doc = "TCLK/4 clock"]
        pub const _010: Self = Self::new(2);
        #[doc = "TCLK/8 clock"]
        pub const _011: Self = Self::new(3);
        #[doc = "TCLK/16 clock"]
        pub const _100: Self = Self::new(4);
        #[doc = "TCLK/32 clock"]
        pub const _101: Self = Self::new(5);
        #[doc = "TCLK/64 clock"]
        pub const _110: Self = Self::new(6);
        #[doc = "TCLK/128 clock"]
        pub const _111: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Stdbr_SPEC;
impl crate::sealed::RegSpec for Stdbr_SPEC {
    type DataType = u32;
}
#[doc = "Standard Bit Rate Register"]
pub type Stdbr = crate::RegValueT<Stdbr_SPEC>;

impl Stdbr {
    #[doc = "Standard Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn sbrlo(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Stdbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Stdbr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Standard Bit Rate High-Level Period Open-Drain"]
    #[inline(always)]
    pub fn sbrho(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Stdbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Stdbr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Standard Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn sbrlp(
        self,
    ) -> crate::common::RegisterField<16, 0x3f, 1, 0, u8, Stdbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x3f,1,0,u8, Stdbr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Standard Bit Rate High-Level Period Push-Pull"]
    #[inline(always)]
    pub fn sbrhp(
        self,
    ) -> crate::common::RegisterField<24, 0x3f, 1, 0, u8, Stdbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x3f,1,0,u8, Stdbr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<30, 1, 0, Stdbr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<30, 1, 0, Stdbr_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Double the Standard Bit Rate Period for Open-Drain"]
    #[inline(always)]
    pub fn dsbrpo(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, stdbr::Dsbrpo, Stdbr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,stdbr::Dsbrpo, Stdbr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Stdbr {
    #[inline(always)]
    fn default() -> Stdbr {
        <crate::RegValueT<Stdbr_SPEC> as RegisterValue<_>>::new(1061158911)
    }
}
pub mod stdbr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dsbrpo_SPEC;
    pub type Dsbrpo = crate::EnumBitfieldStruct<u8, Dsbrpo_SPEC>;
    impl Dsbrpo {
        #[doc = "Normal"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct StdbrHaL_SPEC;
impl crate::sealed::RegSpec for StdbrHaL_SPEC {
    type DataType = u16;
}
#[doc = "Standard Bit Rate Register"]
pub type StdbrHaL = crate::RegValueT<StdbrHaL_SPEC>;

impl StdbrHaL {
    #[doc = "Standard Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn sbrlo(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, StdbrHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, StdbrHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Standard Bit Rate High-Level Period Open-Drain"]
    #[inline(always)]
    pub fn sbrho(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, StdbrHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, StdbrHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for StdbrHaL {
    #[inline(always)]
    fn default() -> StdbrHaL {
        <crate::RegValueT<StdbrHaL_SPEC> as RegisterValue<_>>::new(65535)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct StdbrByLl_SPEC;
impl crate::sealed::RegSpec for StdbrByLl_SPEC {
    type DataType = u8;
}
#[doc = "Standard Bit Rate Register"]
pub type StdbrByLl = crate::RegValueT<StdbrByLl_SPEC>;

impl StdbrByLl {
    #[doc = "Standard Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn sbrlo(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, StdbrByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, StdbrByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for StdbrByLl {
    #[inline(always)]
    fn default() -> StdbrByLl {
        <crate::RegValueT<StdbrByLl_SPEC> as RegisterValue<_>>::new(255)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct StdbrByLh_SPEC;
impl crate::sealed::RegSpec for StdbrByLh_SPEC {
    type DataType = u8;
}
#[doc = "Standard Bit Rate Register"]
pub type StdbrByLh = crate::RegValueT<StdbrByLh_SPEC>;

impl StdbrByLh {
    #[doc = "Standard Bit Rate High-Level Period Open-Drain"]
    #[inline(always)]
    pub fn sbrho(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, StdbrByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, StdbrByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for StdbrByLh {
    #[inline(always)]
    fn default() -> StdbrByLh {
        <crate::RegValueT<StdbrByLh_SPEC> as RegisterValue<_>>::new(255)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct StdbrHaH_SPEC;
impl crate::sealed::RegSpec for StdbrHaH_SPEC {
    type DataType = u16;
}
#[doc = "Standard Bit Rate Register"]
pub type StdbrHaH = crate::RegValueT<StdbrHaH_SPEC>;

impl StdbrHaH {
    #[doc = "Standard Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn sbrlp(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, StdbrHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3f,1,0,u8, StdbrHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Standard Bit Rate High-Level Period Push-Pull"]
    #[inline(always)]
    pub fn sbrhp(
        self,
    ) -> crate::common::RegisterField<8, 0x3f, 1, 0, u8, StdbrHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x3f,1,0,u8, StdbrHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<14, 1, 0, StdbrHaH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<14,1,0,StdbrHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Double the Standard Bit Rate Period for Open-Drain"]
    #[inline(always)]
    pub fn dsbrpo(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        stdbr_ha_h::Dsbrpo,
        StdbrHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            stdbr_ha_h::Dsbrpo,
            StdbrHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for StdbrHaH {
    #[inline(always)]
    fn default() -> StdbrHaH {
        <crate::RegValueT<StdbrHaH_SPEC> as RegisterValue<_>>::new(16191)
    }
}
pub mod stdbr_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dsbrpo_SPEC;
    pub type Dsbrpo = crate::EnumBitfieldStruct<u8, Dsbrpo_SPEC>;
    impl Dsbrpo {
        #[doc = "Normal"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct StdbrByHl_SPEC;
impl crate::sealed::RegSpec for StdbrByHl_SPEC {
    type DataType = u8;
}
#[doc = "Standard Bit Rate Register"]
pub type StdbrByHl = crate::RegValueT<StdbrByHl_SPEC>;

impl StdbrByHl {
    #[doc = "Standard Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn sbrlp(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, StdbrByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3f,1,0,u8, StdbrByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, StdbrByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, StdbrByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for StdbrByHl {
    #[inline(always)]
    fn default() -> StdbrByHl {
        <crate::RegValueT<StdbrByHl_SPEC> as RegisterValue<_>>::new(63)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct StdbrByHh_SPEC;
impl crate::sealed::RegSpec for StdbrByHh_SPEC {
    type DataType = u8;
}
#[doc = "Standard Bit Rate Register"]
pub type StdbrByHh = crate::RegValueT<StdbrByHh_SPEC>;

impl StdbrByHh {
    #[doc = "Standard Bit Rate High-Level Period Push-Pull"]
    #[inline(always)]
    pub fn sbrhp(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, StdbrByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3f,1,0,u8, StdbrByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<6, 1, 0, StdbrByHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<6,1,0,StdbrByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Double the Standard Bit Rate Period for Open-Drain"]
    #[inline(always)]
    pub fn dsbrpo(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        stdbr_by_hh::Dsbrpo,
        StdbrByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            stdbr_by_hh::Dsbrpo,
            StdbrByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for StdbrByHh {
    #[inline(always)]
    fn default() -> StdbrByHh {
        <crate::RegValueT<StdbrByHh_SPEC> as RegisterValue<_>>::new(63)
    }
}
pub mod stdbr_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dsbrpo_SPEC;
    pub type Dsbrpo = crate::EnumBitfieldStruct<u8, Dsbrpo_SPEC>;
    impl Dsbrpo {
        #[doc = "Normal"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Extbr_SPEC;
impl crate::sealed::RegSpec for Extbr_SPEC {
    type DataType = u32;
}
#[doc = "Extended Bit Rate Register"]
pub type Extbr = crate::RegValueT<Extbr_SPEC>;

impl Extbr {
    #[doc = "Extended Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn ebrlo(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Extbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Extbr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn ebrho(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Extbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Extbr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn ebrlp(
        self,
    ) -> crate::common::RegisterField<16, 0x3f, 1, 0, u8, Extbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x3f,1,0,u8, Extbr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn ebrhp(
        self,
    ) -> crate::common::RegisterField<24, 0x3f, 1, 0, u8, Extbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x3f,1,0,u8, Extbr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, Extbr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<30,0x3,1,0,u8, Extbr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Extbr {
    #[inline(always)]
    fn default() -> Extbr {
        <crate::RegValueT<Extbr_SPEC> as RegisterValue<_>>::new(1061158911)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExtbrHaL_SPEC;
impl crate::sealed::RegSpec for ExtbrHaL_SPEC {
    type DataType = u16;
}
#[doc = "Extended Bit Rate Register"]
pub type ExtbrHaL = crate::RegValueT<ExtbrHaL_SPEC>;

impl ExtbrHaL {
    #[doc = "Extended Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn ebrlo(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ExtbrHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ExtbrHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn ebrho(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, ExtbrHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, ExtbrHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExtbrHaL {
    #[inline(always)]
    fn default() -> ExtbrHaL {
        <crate::RegValueT<ExtbrHaL_SPEC> as RegisterValue<_>>::new(65535)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExtbrByLl_SPEC;
impl crate::sealed::RegSpec for ExtbrByLl_SPEC {
    type DataType = u8;
}
#[doc = "Extended Bit Rate Register"]
pub type ExtbrByLl = crate::RegValueT<ExtbrByLl_SPEC>;

impl ExtbrByLl {
    #[doc = "Extended Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn ebrlo(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ExtbrByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ExtbrByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExtbrByLl {
    #[inline(always)]
    fn default() -> ExtbrByLl {
        <crate::RegValueT<ExtbrByLl_SPEC> as RegisterValue<_>>::new(255)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExtbrByLh_SPEC;
impl crate::sealed::RegSpec for ExtbrByLh_SPEC {
    type DataType = u8;
}
#[doc = "Extended Bit Rate Register"]
pub type ExtbrByLh = crate::RegValueT<ExtbrByLh_SPEC>;

impl ExtbrByLh {
    #[doc = "Extended Bit Rate Low-Level Period Open-Drain"]
    #[inline(always)]
    pub fn ebrho(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ExtbrByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ExtbrByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExtbrByLh {
    #[inline(always)]
    fn default() -> ExtbrByLh {
        <crate::RegValueT<ExtbrByLh_SPEC> as RegisterValue<_>>::new(255)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExtbrHaH_SPEC;
impl crate::sealed::RegSpec for ExtbrHaH_SPEC {
    type DataType = u16;
}
#[doc = "Extended Bit Rate Register"]
pub type ExtbrHaH = crate::RegValueT<ExtbrHaH_SPEC>;

impl ExtbrHaH {
    #[doc = "Extended Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn ebrlp(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, ExtbrHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3f,1,0,u8, ExtbrHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn ebrhp(
        self,
    ) -> crate::common::RegisterField<8, 0x3f, 1, 0, u8, ExtbrHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x3f,1,0,u8, ExtbrHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 11. The write value should be 11."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, ExtbrHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<14,0x3,1,0,u8, ExtbrHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExtbrHaH {
    #[inline(always)]
    fn default() -> ExtbrHaH {
        <crate::RegValueT<ExtbrHaH_SPEC> as RegisterValue<_>>::new(65535)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExtbrByHl_SPEC;
impl crate::sealed::RegSpec for ExtbrByHl_SPEC {
    type DataType = u8;
}
#[doc = "Extended Bit Rate Register"]
pub type ExtbrByHl = crate::RegValueT<ExtbrByHl_SPEC>;

impl ExtbrByHl {
    #[doc = "Extended Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn ebrlp(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, ExtbrByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3f,1,0,u8, ExtbrByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 11. The write value should be 11."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, ExtbrByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, ExtbrByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExtbrByHl {
    #[inline(always)]
    fn default() -> ExtbrByHl {
        <crate::RegValueT<ExtbrByHl_SPEC> as RegisterValue<_>>::new(255)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExtbrByHh_SPEC;
impl crate::sealed::RegSpec for ExtbrByHh_SPEC {
    type DataType = u8;
}
#[doc = "Extended Bit Rate Register"]
pub type ExtbrByHh = crate::RegValueT<ExtbrByHh_SPEC>;

impl ExtbrByHh {
    #[doc = "Extended Bit Rate Low-Level Period Push-Pull"]
    #[inline(always)]
    pub fn ebrhp(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, ExtbrByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3f,1,0,u8, ExtbrByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 11. The write value should be 11."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, ExtbrByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, ExtbrByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExtbrByHh {
    #[inline(always)]
    fn default() -> ExtbrByHh {
        <crate::RegValueT<ExtbrByHh_SPEC> as RegisterValue<_>>::new(255)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bfrecdt_SPEC;
impl crate::sealed::RegSpec for Bfrecdt_SPEC {
    type DataType = u32;
}
#[doc = "Bus Free Condition Detection Time Register"]
pub type Bfrecdt = crate::RegValueT<Bfrecdt_SPEC>;

impl Bfrecdt {
    #[doc = "Bus Free Condition Detection Cycle"]
    #[inline(always)]
    pub fn frecyc(
        self,
    ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Bfrecdt_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1ff,1,0,u16, Bfrecdt_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000000000000. The write value should be 00000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7fffff, 1, 0, u32, Bfrecdt_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7fffff,1,0,u32, Bfrecdt_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Bfrecdt {
    #[inline(always)]
    fn default() -> Bfrecdt {
        <crate::RegValueT<Bfrecdt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BfrecdtHaL_SPEC;
impl crate::sealed::RegSpec for BfrecdtHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Free Condition Detection Time Register"]
pub type BfrecdtHaL = crate::RegValueT<BfrecdtHaL_SPEC>;

impl BfrecdtHaL {
    #[doc = "Bus Free Condition Detection Cycle"]
    #[inline(always)]
    pub fn frecyc(
        self,
    ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, BfrecdtHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1ff,1,0,u16, BfrecdtHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BfrecdtHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BfrecdtHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BfrecdtHaL {
    #[inline(always)]
    fn default() -> BfrecdtHaL {
        <crate::RegValueT<BfrecdtHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BfrecdtByLl_SPEC;
impl crate::sealed::RegSpec for BfrecdtByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Free Condition Detection Time Register"]
pub type BfrecdtByLl = crate::RegValueT<BfrecdtByLl_SPEC>;

impl BfrecdtByLl {
    #[doc = "Bus Free Condition Detection Cycle"]
    #[inline(always)]
    pub fn frecyc(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, BfrecdtByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, BfrecdtByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BfrecdtByLl {
    #[inline(always)]
    fn default() -> BfrecdtByLl {
        <crate::RegValueT<BfrecdtByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BfrecdtByLh_SPEC;
impl crate::sealed::RegSpec for BfrecdtByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Free Condition Detection Time Register"]
pub type BfrecdtByLh = crate::RegValueT<BfrecdtByLh_SPEC>;

impl BfrecdtByLh {
    #[doc = "Bus Free Condition Detection Cycle"]
    #[inline(always)]
    pub fn frecyc(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, BfrecdtByLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0,1,0,BfrecdtByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BfrecdtByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BfrecdtByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BfrecdtByLh {
    #[inline(always)]
    fn default() -> BfrecdtByLh {
        <crate::RegValueT<BfrecdtByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bavlcdt_SPEC;
impl crate::sealed::RegSpec for Bavlcdt_SPEC {
    type DataType = u32;
}
#[doc = "Bus Available Condition Detection Time Register"]
pub type Bavlcdt = crate::RegValueT<Bavlcdt_SPEC>;

impl Bavlcdt {
    #[doc = "Bus Available Condition Detection Cycle"]
    #[inline(always)]
    pub fn avlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, Bavlcdt_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1ff,1,0,u16, Bavlcdt_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000000000000. The write value should be 00000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7fffff, 1, 0, u32, Bavlcdt_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7fffff,1,0,u32, Bavlcdt_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Bavlcdt {
    #[inline(always)]
    fn default() -> Bavlcdt {
        <crate::RegValueT<Bavlcdt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BavlcdtHaL_SPEC;
impl crate::sealed::RegSpec for BavlcdtHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Available Condition Detection Time Register"]
pub type BavlcdtHaL = crate::RegValueT<BavlcdtHaL_SPEC>;

impl BavlcdtHaL {
    #[doc = "Bus Available Condition Detection Cycle"]
    #[inline(always)]
    pub fn avlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0x1ff, 1, 0, u16, BavlcdtHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1ff,1,0,u16, BavlcdtHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BavlcdtHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BavlcdtHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BavlcdtHaL {
    #[inline(always)]
    fn default() -> BavlcdtHaL {
        <crate::RegValueT<BavlcdtHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BavlcdtByLl_SPEC;
impl crate::sealed::RegSpec for BavlcdtByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Available Condition Detection Time Register"]
pub type BavlcdtByLl = crate::RegValueT<BavlcdtByLl_SPEC>;

impl BavlcdtByLl {
    #[doc = "Bus Available Condition Detection Cycle"]
    #[inline(always)]
    pub fn avlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, BavlcdtByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, BavlcdtByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BavlcdtByLl {
    #[inline(always)]
    fn default() -> BavlcdtByLl {
        <crate::RegValueT<BavlcdtByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BavlcdtByLh_SPEC;
impl crate::sealed::RegSpec for BavlcdtByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Available Condition Detection Time Register"]
pub type BavlcdtByLh = crate::RegValueT<BavlcdtByLh_SPEC>;

impl BavlcdtByLh {
    #[doc = "Bus Available Condition Detection Cycle"]
    #[inline(always)]
    pub fn avlcyc(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, BavlcdtByLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0,1,0,BavlcdtByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BavlcdtByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BavlcdtByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BavlcdtByLh {
    #[inline(always)]
    fn default() -> BavlcdtByLh {
        <crate::RegValueT<BavlcdtByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bidlcdt_SPEC;
impl crate::sealed::RegSpec for Bidlcdt_SPEC {
    type DataType = u32;
}
#[doc = "Bus Idle Condition Detection Time Register"]
pub type Bidlcdt = crate::RegValueT<Bidlcdt_SPEC>;

impl Bidlcdt {
    #[doc = "Bus Idle Condition Detection Cycle"]
    #[inline(always)]
    pub fn idlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0x3ffff, 1, 0, u32, Bidlcdt_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3ffff,1,0,u32, Bidlcdt_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000. The write value should be 00000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<18, 0x3fff, 1, 0, u16, Bidlcdt_SPEC, crate::common::RW> {
        crate::common::RegisterField::<18,0x3fff,1,0,u16, Bidlcdt_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Bidlcdt {
    #[inline(always)]
    fn default() -> Bidlcdt {
        <crate::RegValueT<Bidlcdt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BidlcdtHaL_SPEC;
impl crate::sealed::RegSpec for BidlcdtHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Idle Condition Detection Time Register"]
pub type BidlcdtHaL = crate::RegValueT<BidlcdtHaL_SPEC>;

impl BidlcdtHaL {
    #[doc = "Bus Idle Condition Detection Cycle"]
    #[inline(always)]
    pub fn idlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, BidlcdtHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16, BidlcdtHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BidlcdtHaL {
    #[inline(always)]
    fn default() -> BidlcdtHaL {
        <crate::RegValueT<BidlcdtHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BidlcdtByLl_SPEC;
impl crate::sealed::RegSpec for BidlcdtByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Idle Condition Detection Time Register"]
pub type BidlcdtByLl = crate::RegValueT<BidlcdtByLl_SPEC>;

impl BidlcdtByLl {
    #[doc = "Bus Idle Condition Detection Cycle"]
    #[inline(always)]
    pub fn idlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, BidlcdtByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, BidlcdtByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BidlcdtByLl {
    #[inline(always)]
    fn default() -> BidlcdtByLl {
        <crate::RegValueT<BidlcdtByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BidlcdtByLh_SPEC;
impl crate::sealed::RegSpec for BidlcdtByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Idle Condition Detection Time Register"]
pub type BidlcdtByLh = crate::RegValueT<BidlcdtByLh_SPEC>;

impl BidlcdtByLh {
    #[doc = "Bus Idle Condition Detection Cycle"]
    #[inline(always)]
    pub fn idlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, BidlcdtByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, BidlcdtByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BidlcdtByLh {
    #[inline(always)]
    fn default() -> BidlcdtByLh {
        <crate::RegValueT<BidlcdtByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BidlcdtHaH_SPEC;
impl crate::sealed::RegSpec for BidlcdtHaH_SPEC {
    type DataType = u16;
}
#[doc = "Bus Idle Condition Detection Time Register"]
pub type BidlcdtHaH = crate::RegValueT<BidlcdtHaH_SPEC>;

impl BidlcdtHaH {
    #[doc = "Bus Idle Condition Detection Cycle"]
    #[inline(always)]
    pub fn idlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, BidlcdtHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, BidlcdtHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000. The write value should be 00000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3fff, 1, 0, u16, BidlcdtHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3fff,1,0,u16, BidlcdtHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BidlcdtHaH {
    #[inline(always)]
    fn default() -> BidlcdtHaH {
        <crate::RegValueT<BidlcdtHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BidlcdtByHl_SPEC;
impl crate::sealed::RegSpec for BidlcdtByHl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Idle Condition Detection Time Register"]
pub type BidlcdtByHl = crate::RegValueT<BidlcdtByHl_SPEC>;

impl BidlcdtByHl {
    #[doc = "Bus Idle Condition Detection Cycle"]
    #[inline(always)]
    pub fn idlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, BidlcdtByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, BidlcdtByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, BidlcdtByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, BidlcdtByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BidlcdtByHl {
    #[inline(always)]
    fn default() -> BidlcdtByHl {
        <crate::RegValueT<BidlcdtByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Outctl_SPEC;
impl crate::sealed::RegSpec for Outctl_SPEC {
    type DataType = u32;
}
#[doc = "Output Control Register"]
pub type Outctl = crate::RegValueT<Outctl_SPEC>;

impl Outctl {
    #[doc = "SDA Output Control"]
    #[inline(always)]
    pub fn sdoc(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, outctl::Sdoc, Outctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,outctl::Sdoc, Outctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "SCL Output Control"]
    #[inline(always)]
    pub fn scoc(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, outctl::Scoc, Outctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,outctl::Scoc, Outctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "SCL/SDA Output Control Write Protect"]
    #[inline(always)]
    pub fn socwp(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, outctl::Socwp, Outctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<2,0x1,1,0,outctl::Socwp, Outctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Extra SCL Clock Cycle Output"]
    #[inline(always)]
    pub fn excyc(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, outctl::Excyc, Outctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,outctl::Excyc, Outctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "SDA Output Delay"]
    #[inline(always)]
    pub fn sdod(
        self,
    ) -> crate::common::RegisterField<8, 0x7, 1, 0, outctl::Sdod, Outctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0x7,1,0,outctl::Sdod, Outctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "SDA Output Delay Clock Source Selection"]
    #[inline(always)]
    pub fn sdodcs(
        self,
    ) -> crate::common::RegisterField<15, 0x1, 1, 0, outctl::Sdodcs, Outctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<15,0x1,1,0,outctl::Sdodcs, Outctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Outctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Outctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Outctl {
    #[inline(always)]
    fn default() -> Outctl {
        <crate::RegValueT<Outctl_SPEC> as RegisterValue<_>>::new(3)
    }
}
pub mod outctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdoc_SPEC;
    pub type Sdoc = crate::EnumBitfieldStruct<u8, Sdoc_SPEC>;
    impl Sdoc {
        #[doc = "This IP drives the SDAn pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP releases the SDAn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scoc_SPEC;
    pub type Scoc = crate::EnumBitfieldStruct<u8, Scoc_SPEC>;
    impl Scoc {
        #[doc = "This IP drives the SCLn pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP releases the SCLn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Socwp_SPEC;
    pub type Socwp = crate::EnumBitfieldStruct<u8, Socwp_SPEC>;
    impl Socwp {
        #[doc = "Bits SCOC and SDOC are protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "Bits SCOC and SDOC can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Excyc_SPEC;
    pub type Excyc = crate::EnumBitfieldStruct<u8, Excyc_SPEC>;
    impl Excyc {
        #[doc = "Does not output an extra SCL clock cycle (default)."]
        pub const _0: Self = Self::new(0);
        #[doc = "Outputs an extra SCL clock cycle."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdod_SPEC;
    pub type Sdod = crate::EnumBitfieldStruct<u8, Sdod_SPEC>;
    impl Sdod {
        #[doc = "No output delay"]
        pub const _000: Self = Self::new(0);
        #[doc = "1 I3Cφ cycle"]
        pub const _001: Self = Self::new(1);
        #[doc = "2 I3Cφ cycles"]
        pub const _010: Self = Self::new(2);
        #[doc = "3 I3Cφ cycles"]
        pub const _011: Self = Self::new(3);
        #[doc = "4 I3Cφ cycles"]
        pub const _100: Self = Self::new(4);
        #[doc = "5 I3Cφ cycles"]
        pub const _101: Self = Self::new(5);
        #[doc = "6 I3Cφ cycles"]
        pub const _110: Self = Self::new(6);
        #[doc = "7 I3Cφ cycles"]
        pub const _111: Self = Self::new(7);
        #[doc = "No output delay"]
        pub const _000: Self = Self::new(0);
        #[doc = "1 or 2 I3Cφ cycles"]
        pub const _001: Self = Self::new(1);
        #[doc = "3 or 4 I3Cφ cycles"]
        pub const _010: Self = Self::new(2);
        #[doc = "5 or 6 I3Cφ cycles"]
        pub const _011: Self = Self::new(3);
        #[doc = "7 or 8 I3Cφ cycles"]
        pub const _100: Self = Self::new(4);
        #[doc = "9 or 10 I3Cφ cycles"]
        pub const _101: Self = Self::new(5);
        #[doc = "11 or 12 I3Cφ cycles"]
        pub const _110: Self = Self::new(6);
        #[doc = "13 or 14 I3Cφ cycles"]
        pub const _111: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdodcs_SPEC;
    pub type Sdodcs = crate::EnumBitfieldStruct<u8, Sdodcs_SPEC>;
    impl Sdodcs {
        #[doc = "The internal reference clock (I3Cφ) is selected as the clock source of the SDA output delay counter."]
        pub const _0: Self = Self::new(0);
        #[doc = "The internal reference clock divided by 2 (I3Cφ/2) is selected as the clock source of the SDA output delay counter. *1"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct OutctlHaL_SPEC;
impl crate::sealed::RegSpec for OutctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Output Control Register"]
pub type OutctlHaL = crate::RegValueT<OutctlHaL_SPEC>;

impl OutctlHaL {
    #[doc = "SDA Output Control"]
    #[inline(always)]
    pub fn sdoc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        outctl_ha_l::Sdoc,
        OutctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            outctl_ha_l::Sdoc,
            OutctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "SCL Output Control"]
    #[inline(always)]
    pub fn scoc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        outctl_ha_l::Scoc,
        OutctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            outctl_ha_l::Scoc,
            OutctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "SCL/SDA Output Control Write Protect"]
    #[inline(always)]
    pub fn socwp(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        outctl_ha_l::Socwp,
        OutctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            outctl_ha_l::Socwp,
            OutctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Extra SCL Clock Cycle Output"]
    #[inline(always)]
    pub fn excyc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        outctl_ha_l::Excyc,
        OutctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            outctl_ha_l::Excyc,
            OutctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "SDA Output Delay"]
    #[inline(always)]
    pub fn sdod(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x7,
        1,
        0,
        outctl_ha_l::Sdod,
        OutctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x7,
            1,
            0,
            outctl_ha_l::Sdod,
            OutctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0xf, 1, 0, u8, OutctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<11,0xf,1,0,u8, OutctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "SDA Output Delay Clock Source Selection"]
    #[inline(always)]
    pub fn sdodcs(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        outctl_ha_l::Sdodcs,
        OutctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            outctl_ha_l::Sdodcs,
            OutctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for OutctlHaL {
    #[inline(always)]
    fn default() -> OutctlHaL {
        <crate::RegValueT<OutctlHaL_SPEC> as RegisterValue<_>>::new(3)
    }
}
pub mod outctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdoc_SPEC;
    pub type Sdoc = crate::EnumBitfieldStruct<u8, Sdoc_SPEC>;
    impl Sdoc {
        #[doc = "This IP drives the SDAn pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP releases the SDAn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scoc_SPEC;
    pub type Scoc = crate::EnumBitfieldStruct<u8, Scoc_SPEC>;
    impl Scoc {
        #[doc = "This IP drives the SCLn pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP releases the SCLn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Socwp_SPEC;
    pub type Socwp = crate::EnumBitfieldStruct<u8, Socwp_SPEC>;
    impl Socwp {
        #[doc = "Bits SCOC and SDOC are protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "Bits SCOC and SDOC can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Excyc_SPEC;
    pub type Excyc = crate::EnumBitfieldStruct<u8, Excyc_SPEC>;
    impl Excyc {
        #[doc = "Does not output an extra SCL clock cycle (default)."]
        pub const _0: Self = Self::new(0);
        #[doc = "Outputs an extra SCL clock cycle."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdod_SPEC;
    pub type Sdod = crate::EnumBitfieldStruct<u8, Sdod_SPEC>;
    impl Sdod {
        #[doc = "No output delay"]
        pub const _000: Self = Self::new(0);
        #[doc = "1 I3Cφ cycle"]
        pub const _001: Self = Self::new(1);
        #[doc = "2 I3Cφ cycles"]
        pub const _010: Self = Self::new(2);
        #[doc = "3 I3Cφ cycles"]
        pub const _011: Self = Self::new(3);
        #[doc = "4 I3Cφ cycles"]
        pub const _100: Self = Self::new(4);
        #[doc = "5 I3Cφ cycles"]
        pub const _101: Self = Self::new(5);
        #[doc = "6 I3Cφ cycles"]
        pub const _110: Self = Self::new(6);
        #[doc = "7 I3Cφ cycles"]
        pub const _111: Self = Self::new(7);
        #[doc = "No output delay"]
        pub const _000: Self = Self::new(0);
        #[doc = "1 or 2 I3Cφ cycles"]
        pub const _001: Self = Self::new(1);
        #[doc = "3 or 4 I3Cφ cycles"]
        pub const _010: Self = Self::new(2);
        #[doc = "5 or 6 I3Cφ cycles"]
        pub const _011: Self = Self::new(3);
        #[doc = "7 or 8 I3Cφ cycles"]
        pub const _100: Self = Self::new(4);
        #[doc = "9 or 10 I3Cφ cycles"]
        pub const _101: Self = Self::new(5);
        #[doc = "11 or 12 I3Cφ cycles"]
        pub const _110: Self = Self::new(6);
        #[doc = "13 or 14 I3Cφ cycles"]
        pub const _111: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdodcs_SPEC;
    pub type Sdodcs = crate::EnumBitfieldStruct<u8, Sdodcs_SPEC>;
    impl Sdodcs {
        #[doc = "The internal reference clock (I3Cφ) is selected as the clock source of the SDA output delay counter."]
        pub const _0: Self = Self::new(0);
        #[doc = "The internal reference clock divided by 2 (I3Cφ/2) is selected as the clock source of the SDA output delay counter. *1"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct OutctlByLl_SPEC;
impl crate::sealed::RegSpec for OutctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Output Control Register"]
pub type OutctlByLl = crate::RegValueT<OutctlByLl_SPEC>;

impl OutctlByLl {
    #[doc = "SDA Output Control"]
    #[inline(always)]
    pub fn sdoc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        outctl_by_ll::Sdoc,
        OutctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            outctl_by_ll::Sdoc,
            OutctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "SCL Output Control"]
    #[inline(always)]
    pub fn scoc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        outctl_by_ll::Scoc,
        OutctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            outctl_by_ll::Scoc,
            OutctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "SCL/SDA Output Control Write Protect"]
    #[inline(always)]
    pub fn socwp(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        outctl_by_ll::Socwp,
        OutctlByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            outctl_by_ll::Socwp,
            OutctlByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Extra SCL Clock Cycle Output"]
    #[inline(always)]
    pub fn excyc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        outctl_by_ll::Excyc,
        OutctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            outctl_by_ll::Excyc,
            OutctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, OutctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, OutctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for OutctlByLl {
    #[inline(always)]
    fn default() -> OutctlByLl {
        <crate::RegValueT<OutctlByLl_SPEC> as RegisterValue<_>>::new(3)
    }
}
pub mod outctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdoc_SPEC;
    pub type Sdoc = crate::EnumBitfieldStruct<u8, Sdoc_SPEC>;
    impl Sdoc {
        #[doc = "This IP drives the SDAn pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP releases the SDAn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scoc_SPEC;
    pub type Scoc = crate::EnumBitfieldStruct<u8, Scoc_SPEC>;
    impl Scoc {
        #[doc = "This IP drives the SCLn pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP releases the SCLn pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Socwp_SPEC;
    pub type Socwp = crate::EnumBitfieldStruct<u8, Socwp_SPEC>;
    impl Socwp {
        #[doc = "Bits SCOC and SDOC are protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "Bits SCOC and SDOC can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Excyc_SPEC;
    pub type Excyc = crate::EnumBitfieldStruct<u8, Excyc_SPEC>;
    impl Excyc {
        #[doc = "Does not output an extra SCL clock cycle (default)."]
        pub const _0: Self = Self::new(0);
        #[doc = "Outputs an extra SCL clock cycle."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct OutctlByLh_SPEC;
impl crate::sealed::RegSpec for OutctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "Output Control Register"]
pub type OutctlByLh = crate::RegValueT<OutctlByLh_SPEC>;

impl OutctlByLh {
    #[doc = "SDA Output Delay"]
    #[inline(always)]
    pub fn sdod(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        outctl_by_lh::Sdod,
        OutctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            outctl_by_lh::Sdod,
            OutctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0xf, 1, 0, u8, OutctlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0xf,1,0,u8, OutctlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "SDA Output Delay Clock Source Selection"]
    #[inline(always)]
    pub fn sdodcs(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        outctl_by_lh::Sdodcs,
        OutctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            outctl_by_lh::Sdodcs,
            OutctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for OutctlByLh {
    #[inline(always)]
    fn default() -> OutctlByLh {
        <crate::RegValueT<OutctlByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod outctl_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdod_SPEC;
    pub type Sdod = crate::EnumBitfieldStruct<u8, Sdod_SPEC>;
    impl Sdod {
        #[doc = "No output delay"]
        pub const _000: Self = Self::new(0);
        #[doc = "1 I3Cφ cycle"]
        pub const _001: Self = Self::new(1);
        #[doc = "2 I3Cφ cycles"]
        pub const _010: Self = Self::new(2);
        #[doc = "3 I3Cφ cycles"]
        pub const _011: Self = Self::new(3);
        #[doc = "4 I3Cφ cycles"]
        pub const _100: Self = Self::new(4);
        #[doc = "5 I3Cφ cycles"]
        pub const _101: Self = Self::new(5);
        #[doc = "6 I3Cφ cycles"]
        pub const _110: Self = Self::new(6);
        #[doc = "7 I3Cφ cycles"]
        pub const _111: Self = Self::new(7);
        #[doc = "No output delay"]
        pub const _000: Self = Self::new(0);
        #[doc = "1 or 2 I3Cφ cycles"]
        pub const _001: Self = Self::new(1);
        #[doc = "3 or 4 I3Cφ cycles"]
        pub const _010: Self = Self::new(2);
        #[doc = "5 or 6 I3Cφ cycles"]
        pub const _011: Self = Self::new(3);
        #[doc = "7 or 8 I3Cφ cycles"]
        pub const _100: Self = Self::new(4);
        #[doc = "9 or 10 I3Cφ cycles"]
        pub const _101: Self = Self::new(5);
        #[doc = "11 or 12 I3Cφ cycles"]
        pub const _110: Self = Self::new(6);
        #[doc = "13 or 14 I3Cφ cycles"]
        pub const _111: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdodcs_SPEC;
    pub type Sdodcs = crate::EnumBitfieldStruct<u8, Sdodcs_SPEC>;
    impl Sdodcs {
        #[doc = "The internal reference clock (I3Cφ) is selected as the clock source of the SDA output delay counter."]
        pub const _0: Self = Self::new(0);
        #[doc = "The internal reference clock divided by 2 (I3Cφ/2) is selected as the clock source of the SDA output delay counter. *1"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Inctl_SPEC;
impl crate::sealed::RegSpec for Inctl_SPEC {
    type DataType = u32;
}
#[doc = "Input Control Register"]
pub type Inctl = crate::RegValueT<Inctl_SPEC>;

impl Inctl {
    #[doc = "Digital Noise Filter Stage Selection"]
    #[inline(always)]
    pub fn dnfs(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, inctl::Dnfs, Inctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xf,1,0,inctl::Dnfs, Inctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Digital Noise Filter Circuit Enable"]
    #[inline(always)]
    pub fn dnfe(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, inctl::Dnfe, Inctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,inctl::Dnfe, Inctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Inctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Inctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Inctl {
    #[inline(always)]
    fn default() -> Inctl {
        <crate::RegValueT<Inctl_SPEC> as RegisterValue<_>>::new(208)
    }
}
pub mod inctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dnfs_SPEC;
    pub type Dnfs = crate::EnumBitfieldStruct<u8, Dnfs_SPEC>;
    impl Dnfs {
        #[doc = "Noise of up to one I3Cφ cycle is filtered out (single-stage filter)."]
        pub const _0000: Self = Self::new(0);
        #[doc = "Noise of up to two I3Cφ cycles is filtered out (2-stage filter)."]
        pub const _0001: Self = Self::new(1);
        #[doc = "Noise of up to three I3Cφ cycles is filtered out (3-stage filter)."]
        pub const _0010: Self = Self::new(2);
        #[doc = "Noise of up to four I3Cφ cycles is filtered out (4-stage filter)."]
        pub const _0011: Self = Self::new(3);
        #[doc = "Noise of up to five I3Cφ cycles is filtered out (5-stage filter)."]
        pub const _0100: Self = Self::new(4);
        #[doc = "Noise of up to sixteen I3Cφ cycles is filtered out (16-stage filter)."]
        pub const _1111: Self = Self::new(15);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dnfe_SPEC;
    pub type Dnfe = crate::EnumBitfieldStruct<u8, Dnfe_SPEC>;
    impl Dnfe {
        #[doc = "No digital noise filter circuit is used."]
        pub const _0: Self = Self::new(0);
        #[doc = "A digital noise filter circuit is used."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InctlHaL_SPEC;
impl crate::sealed::RegSpec for InctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Input Control Register"]
pub type InctlHaL = crate::RegValueT<InctlHaL_SPEC>;

impl InctlHaL {
    #[doc = "Digital Noise Filter Stage Selection"]
    #[inline(always)]
    pub fn dnfs(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xf,
        1,
        0,
        inctl_ha_l::Dnfs,
        InctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xf,
            1,
            0,
            inctl_ha_l::Dnfs,
            InctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Digital Noise Filter Circuit Enable"]
    #[inline(always)]
    pub fn dnfe(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        inctl_ha_l::Dnfe,
        InctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            inctl_ha_l::Dnfe,
            InctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, InctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, InctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for InctlHaL {
    #[inline(always)]
    fn default() -> InctlHaL {
        <crate::RegValueT<InctlHaL_SPEC> as RegisterValue<_>>::new(208)
    }
}
pub mod inctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dnfs_SPEC;
    pub type Dnfs = crate::EnumBitfieldStruct<u8, Dnfs_SPEC>;
    impl Dnfs {
        #[doc = "Noise of up to one I3Cφ cycle is filtered out (single-stage filter)."]
        pub const _0000: Self = Self::new(0);
        #[doc = "Noise of up to two I3Cφ cycles is filtered out (2-stage filter)."]
        pub const _0001: Self = Self::new(1);
        #[doc = "Noise of up to three I3Cφ cycles is filtered out (3-stage filter)."]
        pub const _0010: Self = Self::new(2);
        #[doc = "Noise of up to four I3Cφ cycles is filtered out (4-stage filter)."]
        pub const _0011: Self = Self::new(3);
        #[doc = "Noise of up to five I3Cφ cycles is filtered out (5-stage filter)."]
        pub const _0100: Self = Self::new(4);
        #[doc = "Noise of up to sixteen I3Cφ cycles is filtered out (16-stage filter)."]
        pub const _1111: Self = Self::new(15);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dnfe_SPEC;
    pub type Dnfe = crate::EnumBitfieldStruct<u8, Dnfe_SPEC>;
    impl Dnfe {
        #[doc = "No digital noise filter circuit is used."]
        pub const _0: Self = Self::new(0);
        #[doc = "A digital noise filter circuit is used."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct InctlByLl_SPEC;
impl crate::sealed::RegSpec for InctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Input Control Register"]
pub type InctlByLl = crate::RegValueT<InctlByLl_SPEC>;

impl InctlByLl {
    #[doc = "Digital Noise Filter Stage Selection"]
    #[inline(always)]
    pub fn dnfs(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xf,
        1,
        0,
        inctl_by_ll::Dnfs,
        InctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xf,
            1,
            0,
            inctl_by_ll::Dnfs,
            InctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Digital Noise Filter Circuit Enable"]
    #[inline(always)]
    pub fn dnfe(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        inctl_by_ll::Dnfe,
        InctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            inctl_by_ll::Dnfe,
            InctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 11. The write value should be 11."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, InctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, InctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for InctlByLl {
    #[inline(always)]
    fn default() -> InctlByLl {
        <crate::RegValueT<InctlByLl_SPEC> as RegisterValue<_>>::new(208)
    }
}
pub mod inctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dnfs_SPEC;
    pub type Dnfs = crate::EnumBitfieldStruct<u8, Dnfs_SPEC>;
    impl Dnfs {
        #[doc = "Noise of up to one I3Cφ cycle is filtered out (single-stage filter)."]
        pub const _0000: Self = Self::new(0);
        #[doc = "Noise of up to two I3Cφ cycles is filtered out (2-stage filter)."]
        pub const _0001: Self = Self::new(1);
        #[doc = "Noise of up to three I3Cφ cycles is filtered out (3-stage filter)."]
        pub const _0010: Self = Self::new(2);
        #[doc = "Noise of up to four I3Cφ cycles is filtered out (4-stage filter)."]
        pub const _0011: Self = Self::new(3);
        #[doc = "Noise of up to five I3Cφ cycles is filtered out (5-stage filter)."]
        pub const _0100: Self = Self::new(4);
        #[doc = "Noise of up to sixteen I3Cφ cycles is filtered out (16-stage filter)."]
        pub const _1111: Self = Self::new(15);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dnfe_SPEC;
    pub type Dnfe = crate::EnumBitfieldStruct<u8, Dnfe_SPEC>;
    impl Dnfe {
        #[doc = "No digital noise filter circuit is used."]
        pub const _0: Self = Self::new(0);
        #[doc = "A digital noise filter circuit is used."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Tmoctl_SPEC;
impl crate::sealed::RegSpec for Tmoctl_SPEC {
    type DataType = u32;
}
#[doc = "Timeout Control Register"]
pub type Tmoctl = crate::RegValueT<Tmoctl_SPEC>;

impl Tmoctl {
    #[doc = "Timeout Detection Time Selection"]
    #[inline(always)]
    pub fn todts(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, tmoctl::Todts, Tmoctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3,1,0,tmoctl::Todts, Tmoctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout L Count Control"]
    #[inline(always)]
    pub fn tolctl(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, tmoctl::Tolctl, Tmoctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,tmoctl::Tolctl, Tmoctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout H Count Control"]
    #[inline(always)]
    pub fn tohctl(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, tmoctl::Tohctl, Tmoctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x1,1,0,tmoctl::Tohctl, Tmoctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Operation Mode Selection"]
    #[inline(always)]
    pub fn tomds(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, tmoctl::Tomds, Tmoctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,tmoctl::Tomds, Tmoctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Tmoctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Tmoctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Tmoctl {
    #[inline(always)]
    fn default() -> Tmoctl {
        <crate::RegValueT<Tmoctl_SPEC> as RegisterValue<_>>::new(48)
    }
}
pub mod tmoctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todts_SPEC;
    pub type Todts = crate::EnumBitfieldStruct<u8, Todts_SPEC>;
    impl Todts {
        #[doc = "16bit-timeout"]
        pub const _00: Self = Self::new(0);
        #[doc = "14bit-timeout"]
        pub const _01: Self = Self::new(1);
        #[doc = "8bit-timeout"]
        pub const _10: Self = Self::new(2);
        #[doc = "6bit-timeout"]
        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tolctl_SPEC;
    pub type Tolctl = crate::EnumBitfieldStruct<u8, Tolctl_SPEC>;
    impl Tolctl {
        #[doc = "Count is disabled while the SCLn line is at a low level."]
        pub const _0: Self = Self::new(0);
        #[doc = "Count is enabled while the SCLn line is at a low level."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tohctl_SPEC;
    pub type Tohctl = crate::EnumBitfieldStruct<u8, Tohctl_SPEC>;
    impl Tohctl {
        #[doc = "Count is disabled while the SCLn line is at a high level."]
        pub const _0: Self = Self::new(0);
        #[doc = "Count is enabled while the SCLn line is at a high level."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tomds_SPEC;
    pub type Tomds = crate::EnumBitfieldStruct<u8, Tomds_SPEC>;
    impl Tomds {
        #[doc = "Timeout is detected during the following conditions."]
        pub const _00: Self = Self::new(0);
        #[doc = "Timeout is detected while the bus is busy"]
        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TmoctlHaL_SPEC;
impl crate::sealed::RegSpec for TmoctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Timeout Control Register"]
pub type TmoctlHaL = crate::RegValueT<TmoctlHaL_SPEC>;

impl TmoctlHaL {
    #[doc = "Timeout Detection Time Selection"]
    #[inline(always)]
    pub fn todts(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x3,
        1,
        0,
        tmoctl_ha_l::Todts,
        TmoctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x3,
            1,
            0,
            tmoctl_ha_l::Todts,
            TmoctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Timeout L Count Control"]
    #[inline(always)]
    pub fn tolctl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        tmoctl_ha_l::Tolctl,
        TmoctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            tmoctl_ha_l::Tolctl,
            TmoctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Timeout H Count Control"]
    #[inline(always)]
    pub fn tohctl(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        tmoctl_ha_l::Tohctl,
        TmoctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            tmoctl_ha_l::Tohctl,
            TmoctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Timeout Operation Mode Selection"]
    #[inline(always)]
    pub fn tomds(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x3,
        1,
        0,
        tmoctl_ha_l::Tomds,
        TmoctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x3,
            1,
            0,
            tmoctl_ha_l::Tomds,
            TmoctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, TmoctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, TmoctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for TmoctlHaL {
    #[inline(always)]
    fn default() -> TmoctlHaL {
        <crate::RegValueT<TmoctlHaL_SPEC> as RegisterValue<_>>::new(48)
    }
}
pub mod tmoctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todts_SPEC;
    pub type Todts = crate::EnumBitfieldStruct<u8, Todts_SPEC>;
    impl Todts {
        #[doc = "16bit-timeout"]
        pub const _00: Self = Self::new(0);
        #[doc = "14bit-timeout"]
        pub const _01: Self = Self::new(1);
        #[doc = "8bit-timeout"]
        pub const _10: Self = Self::new(2);
        #[doc = "6bit-timeout"]
        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tolctl_SPEC;
    pub type Tolctl = crate::EnumBitfieldStruct<u8, Tolctl_SPEC>;
    impl Tolctl {
        #[doc = "Count is disabled while the SCLn line is at a low level."]
        pub const _0: Self = Self::new(0);
        #[doc = "Count is enabled while the SCLn line is at a low level."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tohctl_SPEC;
    pub type Tohctl = crate::EnumBitfieldStruct<u8, Tohctl_SPEC>;
    impl Tohctl {
        #[doc = "Count is disabled while the SCLn line is at a high level."]
        pub const _0: Self = Self::new(0);
        #[doc = "Count is enabled while the SCLn line is at a high level."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tomds_SPEC;
    pub type Tomds = crate::EnumBitfieldStruct<u8, Tomds_SPEC>;
    impl Tomds {
        #[doc = "Timeout is detected during the following conditions."]
        pub const _00: Self = Self::new(0);
        #[doc = "Timeout is detected while the bus is busy"]
        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TmoctlByLl_SPEC;
impl crate::sealed::RegSpec for TmoctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Timeout Control Register"]
pub type TmoctlByLl = crate::RegValueT<TmoctlByLl_SPEC>;

impl TmoctlByLl {
    #[doc = "Timeout Detection Time Selection"]
    #[inline(always)]
    pub fn todts(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x3,
        1,
        0,
        tmoctl_by_ll::Todts,
        TmoctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x3,
            1,
            0,
            tmoctl_by_ll::Todts,
            TmoctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3, 1, 0, u8, TmoctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3,1,0,u8, TmoctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout L Count Control"]
    #[inline(always)]
    pub fn tolctl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        tmoctl_by_ll::Tolctl,
        TmoctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            tmoctl_by_ll::Tolctl,
            TmoctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Timeout H Count Control"]
    #[inline(always)]
    pub fn tohctl(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        tmoctl_by_ll::Tohctl,
        TmoctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            tmoctl_by_ll::Tohctl,
            TmoctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Timeout Operation Mode Selection"]
    #[inline(always)]
    pub fn tomds(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x3,
        1,
        0,
        tmoctl_by_ll::Tomds,
        TmoctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x3,
            1,
            0,
            tmoctl_by_ll::Tomds,
            TmoctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for TmoctlByLl {
    #[inline(always)]
    fn default() -> TmoctlByLl {
        <crate::RegValueT<TmoctlByLl_SPEC> as RegisterValue<_>>::new(48)
    }
}
pub mod tmoctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todts_SPEC;
    pub type Todts = crate::EnumBitfieldStruct<u8, Todts_SPEC>;
    impl Todts {
        #[doc = "16bit-timeout"]
        pub const _00: Self = Self::new(0);
        #[doc = "14bit-timeout"]
        pub const _01: Self = Self::new(1);
        #[doc = "8bit-timeout"]
        pub const _10: Self = Self::new(2);
        #[doc = "6bit-timeout"]
        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tolctl_SPEC;
    pub type Tolctl = crate::EnumBitfieldStruct<u8, Tolctl_SPEC>;
    impl Tolctl {
        #[doc = "Count is disabled while the SCLn line is at a low level."]
        pub const _0: Self = Self::new(0);
        #[doc = "Count is enabled while the SCLn line is at a low level."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tohctl_SPEC;
    pub type Tohctl = crate::EnumBitfieldStruct<u8, Tohctl_SPEC>;
    impl Tohctl {
        #[doc = "Count is disabled while the SCLn line is at a high level."]
        pub const _0: Self = Self::new(0);
        #[doc = "Count is enabled while the SCLn line is at a high level."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tomds_SPEC;
    pub type Tomds = crate::EnumBitfieldStruct<u8, Tomds_SPEC>;
    impl Tomds {
        #[doc = "Timeout is detected during the following conditions."]
        pub const _00: Self = Self::new(0);
        #[doc = "Timeout is detected while the bus is busy"]
        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Wuctl_SPEC;
impl crate::sealed::RegSpec for Wuctl_SPEC {
    type DataType = u32;
}
#[doc = "Wake Up Unit Control Register"]
pub type Wuctl = crate::RegValueT<Wuctl_SPEC>;

impl Wuctl {
    #[doc = "Wake-Up Acknowledge Selection"]
    #[inline(always)]
    pub fn wuacks(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, Wuctl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, Wuctl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Wake-Up Analog Noise Filter Selection"]
    #[inline(always)]
    pub fn wuanfs(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, wuctl::Wuanfs, Wuctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,wuctl::Wuanfs, Wuctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-Up function Synchronous Enable"]
    #[inline(always)]
    pub fn wufsyne(
        self,
    ) -> crate::common::RegisterField<6, 0x1, 1, 0, wuctl::Wufsyne, Wuctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x1,1,0,wuctl::Wufsyne, Wuctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake Up function Enable"]
    #[inline(always)]
    pub fn wufe(
        self,
    ) -> crate::common::RegisterField<7, 0x1, 1, 0, wuctl::Wufe, Wuctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<7,0x1,1,0,wuctl::Wufe, Wuctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000000000000000000. The write value should be 000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xffffff, 1, 0, u32, Wuctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xffffff,1,0,u32, Wuctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Wuctl {
    #[inline(always)]
    fn default() -> Wuctl {
        <crate::RegValueT<Wuctl_SPEC> as RegisterValue<_>>::new(65)
    }
}
pub mod wuctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wuanfs_SPEC;
    pub type Wuanfs = crate::EnumBitfieldStruct<u8, Wuanfs_SPEC>;
    impl Wuanfs {
        #[doc = "Do not add the Wake Up analog filter."]
        pub const _0: Self = Self::new(0);
        #[doc = "Add the Wake Up analog filter."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wufsyne_SPEC;
    pub type Wufsyne = crate::EnumBitfieldStruct<u8, Wufsyne_SPEC>;
    impl Wufsyne {
        #[doc = "This IP asynchronous circuit enable"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP synchronous circuit enable"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wufe_SPEC;
    pub type Wufe = crate::EnumBitfieldStruct<u8, Wufe_SPEC>;
    impl Wufe {
        #[doc = "Wake-up function disables"]
        pub const _0: Self = Self::new(0);
        #[doc = "Wake-up function enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct WuctlHaL_SPEC;
impl crate::sealed::RegSpec for WuctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Wake Up Unit Control Register"]
pub type WuctlHaL = crate::RegValueT<WuctlHaL_SPEC>;

impl WuctlHaL {
    #[doc = "Wake-Up Acknowledge Selection"]
    #[inline(always)]
    pub fn wuacks(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, WuctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0, 1, 0, WuctlHaL_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
    #[doc = "Wake-Up Analog Noise Filter Selection"]
    #[inline(always)]
    pub fn wuanfs(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        wuctl_ha_l::Wuanfs,
        WuctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            wuctl_ha_l::Wuanfs,
            WuctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Wake-Up function Synchronous Enable"]
    #[inline(always)]
    pub fn wufsyne(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        wuctl_ha_l::Wufsyne,
        WuctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            wuctl_ha_l::Wufsyne,
            WuctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Wake Up function Enable"]
    #[inline(always)]
    pub fn wufe(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        wuctl_ha_l::Wufe,
        WuctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            wuctl_ha_l::Wufe,
            WuctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, WuctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, WuctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for WuctlHaL {
    #[inline(always)]
    fn default() -> WuctlHaL {
        <crate::RegValueT<WuctlHaL_SPEC> as RegisterValue<_>>::new(65)
    }
}
pub mod wuctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wuanfs_SPEC;
    pub type Wuanfs = crate::EnumBitfieldStruct<u8, Wuanfs_SPEC>;
    impl Wuanfs {
        #[doc = "Do not add the Wake Up analog filter."]
        pub const _0: Self = Self::new(0);
        #[doc = "Add the Wake Up analog filter."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wufsyne_SPEC;
    pub type Wufsyne = crate::EnumBitfieldStruct<u8, Wufsyne_SPEC>;
    impl Wufsyne {
        #[doc = "This IP asynchronous circuit enable"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP synchronous circuit enable"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wufe_SPEC;
    pub type Wufe = crate::EnumBitfieldStruct<u8, Wufe_SPEC>;
    impl Wufe {
        #[doc = "Wake-up function disables"]
        pub const _0: Self = Self::new(0);
        #[doc = "Wake-up function enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct WuctlByLl_SPEC;
impl crate::sealed::RegSpec for WuctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Wake Up Unit Control Register"]
pub type WuctlByLl = crate::RegValueT<WuctlByLl_SPEC>;

impl WuctlByLl {
    #[doc = "Wake-Up Acknowledge Selection"]
    #[inline(always)]
    pub fn wuacks(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, WuctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<0,1,0,WuctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-Up Analog Noise Filter Selection"]
    #[inline(always)]
    pub fn wuanfs(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        wuctl_by_ll::Wuanfs,
        WuctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            wuctl_by_ll::Wuanfs,
            WuctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<5, 1, 0, WuctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<5,1,0,WuctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-Up function Synchronous Enable"]
    #[inline(always)]
    pub fn wufsyne(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        wuctl_by_ll::Wufsyne,
        WuctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            wuctl_by_ll::Wufsyne,
            WuctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Wake Up function Enable"]
    #[inline(always)]
    pub fn wufe(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        wuctl_by_ll::Wufe,
        WuctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            wuctl_by_ll::Wufe,
            WuctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for WuctlByLl {
    #[inline(always)]
    fn default() -> WuctlByLl {
        <crate::RegValueT<WuctlByLl_SPEC> as RegisterValue<_>>::new(65)
    }
}
pub mod wuctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wuanfs_SPEC;
    pub type Wuanfs = crate::EnumBitfieldStruct<u8, Wuanfs_SPEC>;
    impl Wuanfs {
        #[doc = "Do not add the Wake Up analog filter."]
        pub const _0: Self = Self::new(0);
        #[doc = "Add the Wake Up analog filter."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wufsyne_SPEC;
    pub type Wufsyne = crate::EnumBitfieldStruct<u8, Wufsyne_SPEC>;
    impl Wufsyne {
        #[doc = "This IP asynchronous circuit enable"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP synchronous circuit enable"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wufe_SPEC;
    pub type Wufe = crate::EnumBitfieldStruct<u8, Wufe_SPEC>;
    impl Wufe {
        #[doc = "Wake-up function disables"]
        pub const _0: Self = Self::new(0);
        #[doc = "Wake-up function enables."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ackctl_SPEC;
impl crate::sealed::RegSpec for Ackctl_SPEC {
    type DataType = u32;
}
#[doc = "Acknowledge Control Register"]
pub type Ackctl = crate::RegValueT<Ackctl_SPEC>;

impl Ackctl {
    #[doc = "Acknowledge Reception"]
    #[inline(always)]
    pub fn ackr(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, ackctl::Ackr, Ackctl_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0x1,1,0,ackctl::Ackr, Ackctl_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Acknowledge Transmission"]
    #[inline(always)]
    pub fn ackt(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, ackctl::Ackt, Ackctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,ackctl::Ackt, Ackctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "ACKT Write Protect"]
    #[inline(always)]
    pub fn acktwp(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, ackctl::Acktwp, Ackctl_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<2,0x1,1,0,ackctl::Acktwp, Ackctl_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000000000000000000. The write value should be 00000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fffffff, 1, 0, u32, Ackctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fffffff,1,0,u32, Ackctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ackctl {
    #[inline(always)]
    fn default() -> Ackctl {
        <crate::RegValueT<Ackctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ackctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackr_SPEC;
    pub type Ackr = crate::EnumBitfieldStruct<u8, Ackr_SPEC>;
    impl Ackr {
        #[doc = "A 0 is received as the acknowledge bit (ACK reception)."]
        pub const _0: Self = Self::new(0);
        #[doc = "A 1 is received as the acknowledge bit (NACK reception)."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackt_SPEC;
    pub type Ackt = crate::EnumBitfieldStruct<u8, Ackt_SPEC>;
    impl Ackt {
        #[doc = "A 0 is sent as the acknowledge bit (ACK transmission)."]
        pub const _0: Self = Self::new(0);
        #[doc = "A 1 is sent as the acknowledge bit (NACK transmission)."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Acktwp_SPEC;
    pub type Acktwp = crate::EnumBitfieldStruct<u8, Acktwp_SPEC>;
    impl Acktwp {
        #[doc = "The ACKT bit are protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The ACKT bit can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AckctlHaL_SPEC;
impl crate::sealed::RegSpec for AckctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Acknowledge Control Register"]
pub type AckctlHaL = crate::RegValueT<AckctlHaL_SPEC>;

impl AckctlHaL {
    #[doc = "Acknowledge Reception"]
    #[inline(always)]
    pub fn ackr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ackctl_ha_l::Ackr,
        AckctlHaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ackctl_ha_l::Ackr,
            AckctlHaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Acknowledge Transmission"]
    #[inline(always)]
    pub fn ackt(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ackctl_ha_l::Ackt,
        AckctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ackctl_ha_l::Ackt,
            AckctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "ACKT Write Protect"]
    #[inline(always)]
    pub fn acktwp(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ackctl_ha_l::Acktwp,
        AckctlHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ackctl_ha_l::Acktwp,
            AckctlHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, AckctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1fff,1,0,u16, AckctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AckctlHaL {
    #[inline(always)]
    fn default() -> AckctlHaL {
        <crate::RegValueT<AckctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ackctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackr_SPEC;
    pub type Ackr = crate::EnumBitfieldStruct<u8, Ackr_SPEC>;
    impl Ackr {
        #[doc = "A 0 is received as the acknowledge bit (ACK reception)."]
        pub const _0: Self = Self::new(0);
        #[doc = "A 1 is received as the acknowledge bit (NACK reception)."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackt_SPEC;
    pub type Ackt = crate::EnumBitfieldStruct<u8, Ackt_SPEC>;
    impl Ackt {
        #[doc = "A 0 is sent as the acknowledge bit (ACK transmission)."]
        pub const _0: Self = Self::new(0);
        #[doc = "A 1 is sent as the acknowledge bit (NACK transmission)."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Acktwp_SPEC;
    pub type Acktwp = crate::EnumBitfieldStruct<u8, Acktwp_SPEC>;
    impl Acktwp {
        #[doc = "The ACKT bit are protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The ACKT bit can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AckctlByLl_SPEC;
impl crate::sealed::RegSpec for AckctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Acknowledge Control Register"]
pub type AckctlByLl = crate::RegValueT<AckctlByLl_SPEC>;

impl AckctlByLl {
    #[doc = "Acknowledge Reception"]
    #[inline(always)]
    pub fn ackr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ackctl_by_ll::Ackr,
        AckctlByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ackctl_by_ll::Ackr,
            AckctlByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Acknowledge Transmission"]
    #[inline(always)]
    pub fn ackt(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ackctl_by_ll::Ackt,
        AckctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ackctl_by_ll::Ackt,
            AckctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "ACKT Write Protect"]
    #[inline(always)]
    pub fn acktwp(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ackctl_by_ll::Acktwp,
        AckctlByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ackctl_by_ll::Acktwp,
            AckctlByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, AckctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, AckctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AckctlByLl {
    #[inline(always)]
    fn default() -> AckctlByLl {
        <crate::RegValueT<AckctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ackctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackr_SPEC;
    pub type Ackr = crate::EnumBitfieldStruct<u8, Ackr_SPEC>;
    impl Ackr {
        #[doc = "A 0 is received as the acknowledge bit (ACK reception)."]
        pub const _0: Self = Self::new(0);
        #[doc = "A 1 is received as the acknowledge bit (NACK reception)."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackt_SPEC;
    pub type Ackt = crate::EnumBitfieldStruct<u8, Ackt_SPEC>;
    impl Ackt {
        #[doc = "A 0 is sent as the acknowledge bit (ACK transmission)."]
        pub const _0: Self = Self::new(0);
        #[doc = "A 1 is sent as the acknowledge bit (NACK transmission)."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Acktwp_SPEC;
    pub type Acktwp = crate::EnumBitfieldStruct<u8, Acktwp_SPEC>;
    impl Acktwp {
        #[doc = "The ACKT bit are protected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The ACKT bit can be written (When writing simultaneously with the value of the target bit)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Scstrctl_SPEC;
impl crate::sealed::RegSpec for Scstrctl_SPEC {
    type DataType = u32;
}
#[doc = "SCL Stretch Control Register"]
pub type Scstrctl = crate::RegValueT<Scstrctl_SPEC>;

impl Scstrctl {
    #[doc = "Acknowledge Transmission Wait Enabl (*1)"]
    #[inline(always)]
    pub fn acktwe(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        scstrctl::Acktwe,
        Scstrctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            scstrctl::Acktwe,
            Scstrctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Receive Wait Enable"]
    #[inline(always)]
    pub fn rwe(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, scstrctl::Rwe, Scstrctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,scstrctl::Rwe, Scstrctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000000000000000000000000. The write value should be 000000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3fffffff, 1, 0, u32, Scstrctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3fffffff,1,0,u32, Scstrctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Scstrctl {
    #[inline(always)]
    fn default() -> Scstrctl {
        <crate::RegValueT<Scstrctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod scstrctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Acktwe_SPEC;
    pub type Acktwe = crate::EnumBitfieldStruct<u8, Acktwe_SPEC>;
    impl Acktwe {
        #[doc = "NTST.RDBFF0 is set at the rising edge of the ninth SCL clock cycle."]
        pub const _0: Self = Self::new(0);
        #[doc = "NTST.RDBFF0 is set at the rising edge of the eighth SCL clock cycle."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rwe_SPEC;
    pub type Rwe = crate::EnumBitfieldStruct<u8, Rwe_SPEC>;
    impl Rwe {
        #[doc = "No WAIT (The period between ninth clock cycle and first clock cycle is not held low.)"]
        pub const _0: Self = Self::new(0);
        #[doc = "WAIT (The period between ninth clock cycle and first clock cycle is held low.)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ScstrctlHaL_SPEC;
impl crate::sealed::RegSpec for ScstrctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "SCL Stretch Control Register"]
pub type ScstrctlHaL = crate::RegValueT<ScstrctlHaL_SPEC>;

impl ScstrctlHaL {
    #[doc = "Acknowledge Transmission Wait Enabl (*1)"]
    #[inline(always)]
    pub fn acktwe(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        scstrctl_ha_l::Acktwe,
        ScstrctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            scstrctl_ha_l::Acktwe,
            ScstrctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Receive Wait Enable"]
    #[inline(always)]
    pub fn rwe(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        scstrctl_ha_l::Rwe,
        ScstrctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            scstrctl_ha_l::Rwe,
            ScstrctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000000000. The write value should be 00000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3fff, 1, 0, u16, ScstrctlHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3fff,1,0,u16, ScstrctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ScstrctlHaL {
    #[inline(always)]
    fn default() -> ScstrctlHaL {
        <crate::RegValueT<ScstrctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod scstrctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Acktwe_SPEC;
    pub type Acktwe = crate::EnumBitfieldStruct<u8, Acktwe_SPEC>;
    impl Acktwe {
        #[doc = "NTST.RDBFF0 is set at the rising edge of the ninth SCL clock cycle."]
        pub const _0: Self = Self::new(0);
        #[doc = "NTST.RDBFF0 is set at the rising edge of the eighth SCL clock cycle."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rwe_SPEC;
    pub type Rwe = crate::EnumBitfieldStruct<u8, Rwe_SPEC>;
    impl Rwe {
        #[doc = "No WAIT (The period between ninth clock cycle and first clock cycle is not held low.)"]
        pub const _0: Self = Self::new(0);
        #[doc = "WAIT (The period between ninth clock cycle and first clock cycle is held low.)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ScstrctlByLl_SPEC;
impl crate::sealed::RegSpec for ScstrctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "SCL Stretch Control Register"]
pub type ScstrctlByLl = crate::RegValueT<ScstrctlByLl_SPEC>;

impl ScstrctlByLl {
    #[doc = "Acknowledge Transmission Wait Enabl (*1)"]
    #[inline(always)]
    pub fn acktwe(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        scstrctl_by_ll::Acktwe,
        ScstrctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            scstrctl_by_ll::Acktwe,
            ScstrctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Receive Wait Enable"]
    #[inline(always)]
    pub fn rwe(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        scstrctl_by_ll::Rwe,
        ScstrctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            scstrctl_by_ll::Rwe,
            ScstrctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, ScstrctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, ScstrctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ScstrctlByLl {
    #[inline(always)]
    fn default() -> ScstrctlByLl {
        <crate::RegValueT<ScstrctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod scstrctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Acktwe_SPEC;
    pub type Acktwe = crate::EnumBitfieldStruct<u8, Acktwe_SPEC>;
    impl Acktwe {
        #[doc = "NTST.RDBFF0 is set at the rising edge of the ninth SCL clock cycle."]
        pub const _0: Self = Self::new(0);
        #[doc = "NTST.RDBFF0 is set at the rising edge of the eighth SCL clock cycle."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rwe_SPEC;
    pub type Rwe = crate::EnumBitfieldStruct<u8, Rwe_SPEC>;
    impl Rwe {
        #[doc = "No WAIT (The period between ninth clock cycle and first clock cycle is not held low.)"]
        pub const _0: Self = Self::new(0);
        #[doc = "WAIT (The period between ninth clock cycle and first clock cycle is held low.)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Scstlctl_SPEC;
impl crate::sealed::RegSpec for Scstlctl_SPEC {
    type DataType = u32;
}
#[doc = "SCL Stalling Control Register"]
pub type Scstlctl = crate::RegValueT<Scstlctl_SPEC>;

impl Scstlctl {
    #[doc = "Stalling Cycle"]
    #[inline(always)]
    pub fn stlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Scstlctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Scstlctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Assigend Address Phase EnableEnable bit that allows stall by the first bit at address assignment"]
    #[inline(always)]
    pub fn aape(
        self,
    ) -> crate::common::RegisterField<28, 0x1, 1, 0, scstlctl::Aape, Scstlctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            scstlctl::Aape,
            Scstlctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<29, 1, 0, Scstlctl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<29,1,0,Scstlctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Parity Phase EnableStall enable bit in parity bit period"]
    #[inline(always)]
    pub fn parpe(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        scstlctl::Parpe,
        Scstlctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            scstlctl::Parpe,
            Scstlctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "ACK phase EnableStall enable bit during ACK/NACK phase"]
    #[inline(always)]
    pub fn ackpe(
        self,
    ) -> crate::common::RegisterField<
        31,
        0x1,
        1,
        0,
        scstlctl::Ackpe,
        Scstlctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            31,
            0x1,
            1,
            0,
            scstlctl::Ackpe,
            Scstlctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Scstlctl {
    #[inline(always)]
    fn default() -> Scstlctl {
        <crate::RegValueT<Scstlctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod scstlctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aape_SPEC;
    pub type Aape = crate::EnumBitfieldStruct<u8, Aape_SPEC>;
    impl Aape {
        #[doc = "Does not stall the SCL clock during the address assignment phase."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the parity bit period address assignment phase."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Parpe_SPEC;
    pub type Parpe = crate::EnumBitfieldStruct<u8, Parpe_SPEC>;
    impl Parpe {
        #[doc = "Does not stall the SCL clock during the parity bit period."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the parity bit period."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackpe_SPEC;
    pub type Ackpe = crate::EnumBitfieldStruct<u8, Ackpe_SPEC>;
    impl Ackpe {
        #[doc = "Does not stall the SCL clock during the ACK/NACK phase."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the ACK/NACK phase."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ScstlctlHaL_SPEC;
impl crate::sealed::RegSpec for ScstlctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "SCL Stalling Control Register"]
pub type ScstlctlHaL = crate::RegValueT<ScstlctlHaL_SPEC>;

impl ScstlctlHaL {
    #[doc = "Stalling Cycle"]
    #[inline(always)]
    pub fn stlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, ScstlctlHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16, ScstlctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ScstlctlHaL {
    #[inline(always)]
    fn default() -> ScstlctlHaL {
        <crate::RegValueT<ScstlctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ScstlctlByLl_SPEC;
impl crate::sealed::RegSpec for ScstlctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "SCL Stalling Control Register"]
pub type ScstlctlByLl = crate::RegValueT<ScstlctlByLl_SPEC>;

impl ScstlctlByLl {
    #[doc = "Stalling Cycle"]
    #[inline(always)]
    pub fn stlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ScstlctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ScstlctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ScstlctlByLl {
    #[inline(always)]
    fn default() -> ScstlctlByLl {
        <crate::RegValueT<ScstlctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ScstlctlByLh_SPEC;
impl crate::sealed::RegSpec for ScstlctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "SCL Stalling Control Register"]
pub type ScstlctlByLh = crate::RegValueT<ScstlctlByLh_SPEC>;

impl ScstlctlByLh {
    #[doc = "Stalling Cycle"]
    #[inline(always)]
    pub fn stlcyc(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ScstlctlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ScstlctlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ScstlctlByLh {
    #[inline(always)]
    fn default() -> ScstlctlByLh {
        <crate::RegValueT<ScstlctlByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ScstlctlHaH_SPEC;
impl crate::sealed::RegSpec for ScstlctlHaH_SPEC {
    type DataType = u16;
}
#[doc = "SCL Stalling Control Register"]
pub type ScstlctlHaH = crate::RegValueT<ScstlctlHaH_SPEC>;

impl ScstlctlHaH {
    #[doc = "Assigend Address Phase EnableEnable bit that allows stall by the first bit at address assignment"]
    #[inline(always)]
    pub fn aape(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        scstlctl_ha_h::Aape,
        ScstlctlHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            scstlctl_ha_h::Aape,
            ScstlctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<13, 1, 0, ScstlctlHaH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<13,1,0,ScstlctlHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Parity Phase EnableStall enable bit in parity bit period"]
    #[inline(always)]
    pub fn parpe(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        scstlctl_ha_h::Parpe,
        ScstlctlHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            scstlctl_ha_h::Parpe,
            ScstlctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "ACK phase EnableStall enable bit during ACK/NACK phase"]
    #[inline(always)]
    pub fn ackpe(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        scstlctl_ha_h::Ackpe,
        ScstlctlHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            scstlctl_ha_h::Ackpe,
            ScstlctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for ScstlctlHaH {
    #[inline(always)]
    fn default() -> ScstlctlHaH {
        <crate::RegValueT<ScstlctlHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod scstlctl_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aape_SPEC;
    pub type Aape = crate::EnumBitfieldStruct<u8, Aape_SPEC>;
    impl Aape {
        #[doc = "Does not stall the SCL clock during the address assignment phase."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the parity bit period address assignment phase."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Parpe_SPEC;
    pub type Parpe = crate::EnumBitfieldStruct<u8, Parpe_SPEC>;
    impl Parpe {
        #[doc = "Does not stall the SCL clock during the parity bit period."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the parity bit period."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackpe_SPEC;
    pub type Ackpe = crate::EnumBitfieldStruct<u8, Ackpe_SPEC>;
    impl Ackpe {
        #[doc = "Does not stall the SCL clock during the ACK/NACK phase."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the ACK/NACK phase."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ScstlctlByHh_SPEC;
impl crate::sealed::RegSpec for ScstlctlByHh_SPEC {
    type DataType = u8;
}
#[doc = "SCL Stalling Control Register"]
pub type ScstlctlByHh = crate::RegValueT<ScstlctlByHh_SPEC>;

impl ScstlctlByHh {
    #[doc = "Assigend Address Phase EnableEnable bit that allows stall by the first bit at address assignment"]
    #[inline(always)]
    pub fn aape(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        scstlctl_by_hh::Aape,
        ScstlctlByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            scstlctl_by_hh::Aape,
            ScstlctlByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<5, 1, 0, ScstlctlByHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<5,1,0,ScstlctlByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Parity Phase EnableStall enable bit in parity bit period"]
    #[inline(always)]
    pub fn parpe(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        scstlctl_by_hh::Parpe,
        ScstlctlByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            scstlctl_by_hh::Parpe,
            ScstlctlByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "ACK phase EnableStall enable bit during ACK/NACK phase"]
    #[inline(always)]
    pub fn ackpe(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        scstlctl_by_hh::Ackpe,
        ScstlctlByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            scstlctl_by_hh::Ackpe,
            ScstlctlByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for ScstlctlByHh {
    #[inline(always)]
    fn default() -> ScstlctlByHh {
        <crate::RegValueT<ScstlctlByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod scstlctl_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aape_SPEC;
    pub type Aape = crate::EnumBitfieldStruct<u8, Aape_SPEC>;
    impl Aape {
        #[doc = "Does not stall the SCL clock during the address assignment phase."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the parity bit period address assignment phase."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Parpe_SPEC;
    pub type Parpe = crate::EnumBitfieldStruct<u8, Parpe_SPEC>;
    impl Parpe {
        #[doc = "Does not stall the SCL clock during the parity bit period."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the parity bit period."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ackpe_SPEC;
    pub type Ackpe = crate::EnumBitfieldStruct<u8, Ackpe_SPEC>;
    impl Ackpe {
        #[doc = "Does not stall the SCL clock during the ACK/NACK phase."]
        pub const _0: Self = Self::new(0);
        #[doc = "Stall the SCL clock during the ACK/NACK phase."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svtdlg0_SPEC;
impl crate::sealed::RegSpec for Svtdlg0_SPEC {
    type DataType = u32;
}
#[doc = "Slave Transfer Data Length Register 0"]
pub type Svtdlg0 = crate::RegValueT<Svtdlg0_SPEC>;

impl Svtdlg0 {
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Svtdlg0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Svtdlg0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Transfer Data Length"]
    #[inline(always)]
    pub fn stdlg(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Svtdlg0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Svtdlg0_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Svtdlg0 {
    #[inline(always)]
    fn default() -> Svtdlg0 {
        <crate::RegValueT<Svtdlg0_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svtdlg0HaH_SPEC;
impl crate::sealed::RegSpec for Svtdlg0HaH_SPEC {
    type DataType = u16;
}
#[doc = "Slave Transfer Data Length Register 0"]
pub type Svtdlg0HaH = crate::RegValueT<Svtdlg0HaH_SPEC>;

impl Svtdlg0HaH {
    #[doc = "Slave Transfer Data Length"]
    #[inline(always)]
    pub fn stdlg(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Svtdlg0HaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Svtdlg0HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Svtdlg0HaH {
    #[inline(always)]
    fn default() -> Svtdlg0HaH {
        <crate::RegValueT<Svtdlg0HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svtdlg0ByHl_SPEC;
impl crate::sealed::RegSpec for Svtdlg0ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Transfer Data Length Register 0"]
pub type Svtdlg0ByHl = crate::RegValueT<Svtdlg0ByHl_SPEC>;

impl Svtdlg0ByHl {
    #[doc = "Slave Transfer Data Length"]
    #[inline(always)]
    pub fn stdlg(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Svtdlg0ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Svtdlg0ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Svtdlg0ByHl {
    #[inline(always)]
    fn default() -> Svtdlg0ByHl {
        <crate::RegValueT<Svtdlg0ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svtdlg0ByHh_SPEC;
impl crate::sealed::RegSpec for Svtdlg0ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Transfer Data Length Register 0"]
pub type Svtdlg0ByHh = crate::RegValueT<Svtdlg0ByHh_SPEC>;

impl Svtdlg0ByHh {
    #[doc = "Slave Transfer Data Length"]
    #[inline(always)]
    pub fn stdlg(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Svtdlg0ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Svtdlg0ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Svtdlg0ByHh {
    #[inline(always)]
    fn default() -> Svtdlg0ByHh {
        <crate::RegValueT<Svtdlg0ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Stctl_SPEC;
impl crate::sealed::RegSpec for Stctl_SPEC {
    type DataType = u32;
}
#[doc = "Synchronous Timiming Control Register"]
pub type Stctl = crate::RegValueT<Stctl_SPEC>;

impl Stctl {
    #[doc = "Synchronous Timing output Enable"]
    #[inline(always)]
    pub fn stoe(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, stctl::Stoe, Stctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,stctl::Stoe, Stctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000000000000000000. The write value should be 0000000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fffffff, 1, 0, u32, Stctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7fffffff,1,0,u32, Stctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Stctl {
    #[inline(always)]
    fn default() -> Stctl {
        <crate::RegValueT<Stctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod stctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stoe_SPEC;
    pub type Stoe = crate::EnumBitfieldStruct<u8, Stoe_SPEC>;
    impl Stoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct StctlHaL_SPEC;
impl crate::sealed::RegSpec for StctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Synchronous Timiming Control Register"]
pub type StctlHaL = crate::RegValueT<StctlHaL_SPEC>;

impl StctlHaL {
    #[doc = "Synchronous Timing output Enable"]
    #[inline(always)]
    pub fn stoe(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        stctl_ha_l::Stoe,
        StctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            stctl_ha_l::Stoe,
            StctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000000. The write value should be 000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fff, 1, 0, u16, StctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7fff,1,0,u16, StctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for StctlHaL {
    #[inline(always)]
    fn default() -> StctlHaL {
        <crate::RegValueT<StctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod stctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stoe_SPEC;
    pub type Stoe = crate::EnumBitfieldStruct<u8, Stoe_SPEC>;
    impl Stoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct StctlByLl_SPEC;
impl crate::sealed::RegSpec for StctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Synchronous Timiming Control Register"]
pub type StctlByLl = crate::RegValueT<StctlByLl_SPEC>;

impl StctlByLl {
    #[doc = "Synchronous Timing output Enable"]
    #[inline(always)]
    pub fn stoe(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        stctl_by_ll::Stoe,
        StctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            stctl_by_ll::Stoe,
            StctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, StctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, StctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for StctlByLl {
    #[inline(always)]
    fn default() -> StctlByLl {
        <crate::RegValueT<StctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod stctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stoe_SPEC;
    pub type Stoe = crate::EnumBitfieldStruct<u8, Stoe_SPEC>;
    impl Stoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Atctl_SPEC;
impl crate::sealed::RegSpec for Atctl_SPEC {
    type DataType = u32;
}
#[doc = "Asynchronous Timimg Control Register"]
pub type Atctl = crate::RegValueT<Atctl_SPEC>;

impl Atctl {
    #[doc = "Asynchronous Timing Trigger Select"]
    #[inline(always)]
    pub fn attrgs(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, atctl::Attrgs, Atctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,atctl::Attrgs, Atctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "MREF Output Enable (Capture Event / Counter Overflow)"]
    #[inline(always)]
    pub fn mrefoe(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, atctl::Mrefoe, Atctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,atctl::Mrefoe, Atctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Additional Master-initiated bus Event Output Enable"]
    #[inline(always)]
    pub fn ameoe(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, atctl::Ameoe, Atctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,atctl::Ameoe, Atctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TCLK Counter Divide Setting"]
    #[inline(always)]
    pub fn cdiv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Atctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Atctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Atctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Atctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Atctl {
    #[inline(always)]
    fn default() -> Atctl {
        <crate::RegValueT<Atctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod atctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Attrgs_SPEC;
    pub type Attrgs = crate::EnumBitfieldStruct<u8, Attrgs_SPEC>;
    impl Attrgs {
        #[doc = "Software Trigger"]
        pub const _0: Self = Self::new(0);
        #[doc = "Hardware Trigger"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mrefoe_SPEC;
    pub type Mrefoe = crate::EnumBitfieldStruct<u8, Mrefoe_SPEC>;
    impl Mrefoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ameoe_SPEC;
    pub type Ameoe = crate::EnumBitfieldStruct<u8, Ameoe_SPEC>;
    impl Ameoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AtctlHaL_SPEC;
impl crate::sealed::RegSpec for AtctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Asynchronous Timimg Control Register"]
pub type AtctlHaL = crate::RegValueT<AtctlHaL_SPEC>;

impl AtctlHaL {
    #[doc = "Asynchronous Timing Trigger Select"]
    #[inline(always)]
    pub fn attrgs(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        atctl_ha_l::Attrgs,
        AtctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            atctl_ha_l::Attrgs,
            AtctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "MREF Output Enable (Capture Event / Counter Overflow)"]
    #[inline(always)]
    pub fn mrefoe(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        atctl_ha_l::Mrefoe,
        AtctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            atctl_ha_l::Mrefoe,
            AtctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Additional Master-initiated bus Event Output Enable"]
    #[inline(always)]
    pub fn ameoe(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        atctl_ha_l::Ameoe,
        AtctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            atctl_ha_l::Ameoe,
            AtctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, AtctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, AtctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "TCLK Counter Divide Setting"]
    #[inline(always)]
    pub fn cdiv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, AtctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, AtctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AtctlHaL {
    #[inline(always)]
    fn default() -> AtctlHaL {
        <crate::RegValueT<AtctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod atctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Attrgs_SPEC;
    pub type Attrgs = crate::EnumBitfieldStruct<u8, Attrgs_SPEC>;
    impl Attrgs {
        #[doc = "Software Trigger"]
        pub const _0: Self = Self::new(0);
        #[doc = "Hardware Trigger"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mrefoe_SPEC;
    pub type Mrefoe = crate::EnumBitfieldStruct<u8, Mrefoe_SPEC>;
    impl Mrefoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ameoe_SPEC;
    pub type Ameoe = crate::EnumBitfieldStruct<u8, Ameoe_SPEC>;
    impl Ameoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AtctlByLl_SPEC;
impl crate::sealed::RegSpec for AtctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Asynchronous Timimg Control Register"]
pub type AtctlByLl = crate::RegValueT<AtctlByLl_SPEC>;

impl AtctlByLl {
    #[doc = "Asynchronous Timing Trigger Select"]
    #[inline(always)]
    pub fn attrgs(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        atctl_by_ll::Attrgs,
        AtctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            atctl_by_ll::Attrgs,
            AtctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "MREF Output Enable (Capture Event / Counter Overflow)"]
    #[inline(always)]
    pub fn mrefoe(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        atctl_by_ll::Mrefoe,
        AtctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            atctl_by_ll::Mrefoe,
            AtctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Additional Master-initiated bus Event Output Enable"]
    #[inline(always)]
    pub fn ameoe(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        atctl_by_ll::Ameoe,
        AtctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            atctl_by_ll::Ameoe,
            AtctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, AtctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, AtctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AtctlByLl {
    #[inline(always)]
    fn default() -> AtctlByLl {
        <crate::RegValueT<AtctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod atctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Attrgs_SPEC;
    pub type Attrgs = crate::EnumBitfieldStruct<u8, Attrgs_SPEC>;
    impl Attrgs {
        #[doc = "Software Trigger"]
        pub const _0: Self = Self::new(0);
        #[doc = "Hardware Trigger"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mrefoe_SPEC;
    pub type Mrefoe = crate::EnumBitfieldStruct<u8, Mrefoe_SPEC>;
    impl Mrefoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ameoe_SPEC;
    pub type Ameoe = crate::EnumBitfieldStruct<u8, Ameoe_SPEC>;
    impl Ameoe {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AtctlByLh_SPEC;
impl crate::sealed::RegSpec for AtctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "Asynchronous Timimg Control Register"]
pub type AtctlByLh = crate::RegValueT<AtctlByLh_SPEC>;

impl AtctlByLh {
    #[doc = "TCLK Counter Divide Setting"]
    #[inline(always)]
    pub fn cdiv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, AtctlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, AtctlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AtctlByLh {
    #[inline(always)]
    fn default() -> AtctlByLh {
        <crate::RegValueT<AtctlByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Attrg_SPEC;
impl crate::sealed::RegSpec for Attrg_SPEC {
    type DataType = u32;
}
#[doc = "Asynchronous Timiming Trigger Register"]
pub type Attrg = crate::RegValueT<Attrg_SPEC>;

impl Attrg {
    #[doc = "Asynchronous Timing Software Trigger"]
    #[inline(always)]
    pub fn atstrg(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, attrg::Atstrg, Attrg_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<0,0x1,1,0,attrg::Atstrg, Attrg_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "The write value should be 0000000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fffffff, 1, 0, u32, Attrg_SPEC, crate::common::W> {
        crate::common::RegisterField::<1,0x7fffffff,1,0,u32, Attrg_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Attrg {
    #[inline(always)]
    fn default() -> Attrg {
        <crate::RegValueT<Attrg_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod attrg {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Atstrg_SPEC;
    pub type Atstrg = crate::EnumBitfieldStruct<u8, Atstrg_SPEC>;
    impl Atstrg {
        #[doc = "Write : do nothing"]
        pub const _0: Self = Self::new(0);
        #[doc = "Write : Software trigger (one-shot pulse) output"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AttrgHaL_SPEC;
impl crate::sealed::RegSpec for AttrgHaL_SPEC {
    type DataType = u16;
}
#[doc = "Asynchronous Timiming Trigger Register"]
pub type AttrgHaL = crate::RegValueT<AttrgHaL_SPEC>;

impl AttrgHaL {
    #[doc = "Asynchronous Timing Software Trigger"]
    #[inline(always)]
    pub fn atstrg(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        attrg_ha_l::Atstrg,
        AttrgHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            attrg_ha_l::Atstrg,
            AttrgHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fff, 1, 0, u16, AttrgHaL_SPEC, crate::common::W> {
        crate::common::RegisterField::<1,0x7fff,1,0,u16, AttrgHaL_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for AttrgHaL {
    #[inline(always)]
    fn default() -> AttrgHaL {
        <crate::RegValueT<AttrgHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod attrg_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Atstrg_SPEC;
    pub type Atstrg = crate::EnumBitfieldStruct<u8, Atstrg_SPEC>;
    impl Atstrg {
        #[doc = "Write : do nothing"]
        pub const _0: Self = Self::new(0);
        #[doc = "Write : Software trigger (one-shot pulse) output"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AttrgByLl_SPEC;
impl crate::sealed::RegSpec for AttrgByLl_SPEC {
    type DataType = u8;
}
#[doc = "Asynchronous Timiming Trigger Register"]
pub type AttrgByLl = crate::RegValueT<AttrgByLl_SPEC>;

impl AttrgByLl {
    #[doc = "Asynchronous Timing Software Trigger"]
    #[inline(always)]
    pub fn atstrg(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        attrg_by_ll::Atstrg,
        AttrgByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            attrg_by_ll::Atstrg,
            AttrgByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, AttrgByLl_SPEC, crate::common::W> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, AttrgByLl_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for AttrgByLl {
    #[inline(always)]
    fn default() -> AttrgByLl {
        <crate::RegValueT<AttrgByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod attrg_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Atstrg_SPEC;
    pub type Atstrg = crate::EnumBitfieldStruct<u8, Atstrg_SPEC>;
    impl Atstrg {
        #[doc = "Write : do nothing"]
        pub const _0: Self = Self::new(0);
        #[doc = "Write : Software trigger (one-shot pulse) output"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Atccnte_SPEC;
impl crate::sealed::RegSpec for Atccnte_SPEC {
    type DataType = u32;
}
#[doc = "Asynchronous Timing Contorol Counter enable Register"]
pub type Atccnte = crate::RegValueT<Atccnte_SPEC>;

impl Atccnte {
    #[doc = "Asynchronous Timing Counter Enable for MREF, MC2, SC1, SC2."]
    #[inline(always)]
    pub fn atce(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, atccnte::Atce, Atccnte_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,atccnte::Atce, Atccnte_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000000000000000000. The write value should be 0000000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fffffff, 1, 0, u32, Atccnte_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x7fffffff,1,0,u32, Atccnte_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Atccnte {
    #[inline(always)]
    fn default() -> Atccnte {
        <crate::RegValueT<Atccnte_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod atccnte {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Atce_SPEC;
    pub type Atce = crate::EnumBitfieldStruct<u8, Atce_SPEC>;
    impl Atce {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AtccnteHaL_SPEC;
impl crate::sealed::RegSpec for AtccnteHaL_SPEC {
    type DataType = u16;
}
#[doc = "Asynchronous Timing Contorol Counter enable Register"]
pub type AtccnteHaL = crate::RegValueT<AtccnteHaL_SPEC>;

impl AtccnteHaL {
    #[doc = "Asynchronous Timing Counter Enable for MREF, MC2, SC1, SC2."]
    #[inline(always)]
    pub fn atce(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        atccnte_ha_l::Atce,
        AtccnteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            atccnte_ha_l::Atce,
            AtccnteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000000. The write value should be 000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fff, 1, 0, u16, AtccnteHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x7fff,1,0,u16, AtccnteHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AtccnteHaL {
    #[inline(always)]
    fn default() -> AtccnteHaL {
        <crate::RegValueT<AtccnteHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod atccnte_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Atce_SPEC;
    pub type Atce = crate::EnumBitfieldStruct<u8, Atce_SPEC>;
    impl Atce {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AtccnteByLl_SPEC;
impl crate::sealed::RegSpec for AtccnteByLl_SPEC {
    type DataType = u8;
}
#[doc = "Asynchronous Timing Contorol Counter enable Register"]
pub type AtccnteByLl = crate::RegValueT<AtccnteByLl_SPEC>;

impl AtccnteByLl {
    #[doc = "Asynchronous Timing Counter Enable for MREF, MC2, SC1, SC2."]
    #[inline(always)]
    pub fn atce(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        atccnte_by_ll::Atce,
        AtccnteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            atccnte_by_ll::Atce,
            AtccnteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, AtccnteByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, AtccnteByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AtccnteByLl {
    #[inline(always)]
    fn default() -> AtccnteByLl {
        <crate::RegValueT<AtccnteByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod atccnte_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Atce_SPEC;
    pub type Atce = crate::EnumBitfieldStruct<u8, Atce_SPEC>;
    impl Atce {
        #[doc = "Disable"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cndctl_SPEC;
impl crate::sealed::RegSpec for Cndctl_SPEC {
    type DataType = u32;
}
#[doc = "Condition Control Register"]
pub type Cndctl = crate::RegValueT<Cndctl_SPEC>;

impl Cndctl {
    #[doc = "START (S) Condition Issuance"]
    #[inline(always)]
    pub fn stcnd(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, cndctl::Stcnd, Cndctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,cndctl::Stcnd, Cndctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Repeated START (Sr) Condition Issuance"]
    #[inline(always)]
    pub fn srcnd(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, cndctl::Srcnd, Cndctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,cndctl::Srcnd, Cndctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "STOP (P) Condition Issuance"]
    #[inline(always)]
    pub fn spcnd(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, cndctl::Spcnd, Cndctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,cndctl::Spcnd, Cndctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000000000000000000. The write value should be 00000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fffffff, 1, 0, u32, Cndctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fffffff,1,0,u32, Cndctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cndctl {
    #[inline(always)]
    fn default() -> Cndctl {
        <crate::RegValueT<Cndctl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cndctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnd_SPEC;
    pub type Stcnd = crate::EnumBitfieldStruct<u8, Stcnd_SPEC>;
    impl Stcnd {
        #[doc = "Does not request to issue a START condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a START condition."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Srcnd_SPEC;
    pub type Srcnd = crate::EnumBitfieldStruct<u8, Srcnd_SPEC>;
    impl Srcnd {
        #[doc = "Does not request to issue a Repeated START condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a Repeated START condition."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnd_SPEC;
    pub type Spcnd = crate::EnumBitfieldStruct<u8, Spcnd_SPEC>;
    impl Spcnd {
        #[doc = "Does not request to issue a STOP condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a STOP condition."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CndctlHaL_SPEC;
impl crate::sealed::RegSpec for CndctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Condition Control Register"]
pub type CndctlHaL = crate::RegValueT<CndctlHaL_SPEC>;

impl CndctlHaL {
    #[doc = "START (S) Condition Issuance"]
    #[inline(always)]
    pub fn stcnd(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        cndctl_ha_l::Stcnd,
        CndctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cndctl_ha_l::Stcnd,
            CndctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Repeated START (Sr) Condition Issuance"]
    #[inline(always)]
    pub fn srcnd(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        cndctl_ha_l::Srcnd,
        CndctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            cndctl_ha_l::Srcnd,
            CndctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "STOP (P) Condition Issuance"]
    #[inline(always)]
    pub fn spcnd(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        cndctl_ha_l::Spcnd,
        CndctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            cndctl_ha_l::Spcnd,
            CndctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, CndctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1fff,1,0,u16, CndctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CndctlHaL {
    #[inline(always)]
    fn default() -> CndctlHaL {
        <crate::RegValueT<CndctlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cndctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnd_SPEC;
    pub type Stcnd = crate::EnumBitfieldStruct<u8, Stcnd_SPEC>;
    impl Stcnd {
        #[doc = "Does not request to issue a START condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a START condition."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Srcnd_SPEC;
    pub type Srcnd = crate::EnumBitfieldStruct<u8, Srcnd_SPEC>;
    impl Srcnd {
        #[doc = "Does not request to issue a Repeated START condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a Repeated START condition."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnd_SPEC;
    pub type Spcnd = crate::EnumBitfieldStruct<u8, Spcnd_SPEC>;
    impl Spcnd {
        #[doc = "Does not request to issue a STOP condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a STOP condition."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CndctlByLl_SPEC;
impl crate::sealed::RegSpec for CndctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Condition Control Register"]
pub type CndctlByLl = crate::RegValueT<CndctlByLl_SPEC>;

impl CndctlByLl {
    #[doc = "START (S) Condition Issuance"]
    #[inline(always)]
    pub fn stcnd(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        cndctl_by_ll::Stcnd,
        CndctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cndctl_by_ll::Stcnd,
            CndctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Repeated START (Sr) Condition Issuance"]
    #[inline(always)]
    pub fn srcnd(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        cndctl_by_ll::Srcnd,
        CndctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            cndctl_by_ll::Srcnd,
            CndctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "STOP (P) Condition Issuance"]
    #[inline(always)]
    pub fn spcnd(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        cndctl_by_ll::Spcnd,
        CndctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            cndctl_by_ll::Spcnd,
            CndctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, CndctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, CndctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CndctlByLl {
    #[inline(always)]
    fn default() -> CndctlByLl {
        <crate::RegValueT<CndctlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cndctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnd_SPEC;
    pub type Stcnd = crate::EnumBitfieldStruct<u8, Stcnd_SPEC>;
    impl Stcnd {
        #[doc = "Does not request to issue a START condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a START condition."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Srcnd_SPEC;
    pub type Srcnd = crate::EnumBitfieldStruct<u8, Srcnd_SPEC>;
    impl Srcnd {
        #[doc = "Does not request to issue a Repeated START condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a Repeated START condition."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnd_SPEC;
    pub type Spcnd = crate::EnumBitfieldStruct<u8, Spcnd_SPEC>;
    impl Spcnd {
        #[doc = "Does not request to issue a STOP condition."]
        pub const _0: Self = Self::new(0);
        #[doc = "Requests to issue a STOP condition."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ncmdqp_SPEC;
impl crate::sealed::RegSpec for Ncmdqp_SPEC {
    type DataType = u32;
}
#[doc = "Normal Command Queue Port Register"]
pub type Ncmdqp = crate::RegValueT<Ncmdqp_SPEC>;

impl Ncmdqp {
    #[doc = "Normal Command Queue Port"]
    #[inline(always)]
    pub fn ncmdqp(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Ncmdqp_SPEC, crate::common::W> {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Ncmdqp_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Ncmdqp {
    #[inline(always)]
    fn default() -> Ncmdqp {
        <crate::RegValueT<Ncmdqp_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Nrspqp_SPEC;
impl crate::sealed::RegSpec for Nrspqp_SPEC {
    type DataType = u32;
}
#[doc = "Normal Response Queue Port Register"]
pub type Nrspqp = crate::RegValueT<Nrspqp_SPEC>;

impl Nrspqp {
    #[doc = "Normal Response Queue Port"]
    #[inline(always)]
    pub fn nrspqp(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Nrspqp_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Nrspqp_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Nrspqp {
    #[inline(always)]
    fn default() -> Nrspqp {
        <crate::RegValueT<Nrspqp_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntdtbp0_SPEC;
impl crate::sealed::RegSpec for Ntdtbp0_SPEC {
    type DataType = u32;
}
#[doc = "Normal Transfer Data Buffer Port Register 0"]
pub type Ntdtbp0 = crate::RegValueT<Ntdtbp0_SPEC>;

impl Ntdtbp0 {
    #[doc = "Normal Transfer Data Buffer Port"]
    #[inline(always)]
    pub fn ntdtbp0(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Ntdtbp0_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Ntdtbp0_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntdtbp0 {
    #[inline(always)]
    fn default() -> Ntdtbp0 {
        <crate::RegValueT<Ntdtbp0_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntdtbp0ByLl_SPEC;
impl crate::sealed::RegSpec for Ntdtbp0ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Data Buffer Port Register 0"]
pub type Ntdtbp0ByLl = crate::RegValueT<Ntdtbp0ByLl_SPEC>;

impl Ntdtbp0ByLl {
    #[doc = "Normal Transfer Data Buffer Port"]
    #[inline(always)]
    pub fn ntdtbp0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ntdtbp0ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Ntdtbp0ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntdtbp0ByLl {
    #[inline(always)]
    fn default() -> Ntdtbp0ByLl {
        <crate::RegValueT<Ntdtbp0ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Nibiqp_SPEC;
impl crate::sealed::RegSpec for Nibiqp_SPEC {
    type DataType = u32;
}
#[doc = "Normal IBI Queue Port Register"]
pub type Nibiqp = crate::RegValueT<Nibiqp_SPEC>;

impl Nibiqp {
    #[doc = "Normal IBI Queue Port"]
    #[inline(always)]
    pub fn nibiqp(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Nibiqp_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Nibiqp_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Nibiqp {
    #[inline(always)]
    fn default() -> Nibiqp {
        <crate::RegValueT<Nibiqp_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Nrsqp_SPEC;
impl crate::sealed::RegSpec for Nrsqp_SPEC {
    type DataType = u32;
}
#[doc = "Normal Receive Status Queue Port Register"]
pub type Nrsqp = crate::RegValueT<Nrsqp_SPEC>;

impl Nrsqp {
    #[doc = "Normal Receive Status Queue Port"]
    #[inline(always)]
    pub fn nrsqp(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Nrsqp_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Nrsqp_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Nrsqp {
    #[inline(always)]
    fn default() -> Nrsqp {
        <crate::RegValueT<Nrsqp_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Hcmdqp_SPEC;
impl crate::sealed::RegSpec for Hcmdqp_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Command Queue Port Register"]
pub type Hcmdqp = crate::RegValueT<Hcmdqp_SPEC>;

impl Hcmdqp {
    #[doc = "High Priority Command Queue Port"]
    #[inline(always)]
    pub fn hcmdqp(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Hcmdqp_SPEC, crate::common::W> {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Hcmdqp_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Hcmdqp {
    #[inline(always)]
    fn default() -> Hcmdqp {
        <crate::RegValueT<Hcmdqp_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Hrspqp_SPEC;
impl crate::sealed::RegSpec for Hrspqp_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Response Queue Port Register"]
pub type Hrspqp = crate::RegValueT<Hrspqp_SPEC>;

impl Hrspqp {
    #[doc = "High Priority Response Queue Port"]
    #[inline(always)]
    pub fn hrspqp(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Hrspqp_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Hrspqp_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Hrspqp {
    #[inline(always)]
    fn default() -> Hrspqp {
        <crate::RegValueT<Hrspqp_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Htdtbp_SPEC;
impl crate::sealed::RegSpec for Htdtbp_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Transfer Data Buffer Port Register"]
pub type Htdtbp = crate::RegValueT<Htdtbp_SPEC>;

impl Htdtbp {
    #[doc = "High Priority Transfer Data Buffer Port"]
    #[inline(always)]
    pub fn htdtbp(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Htdtbp_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Htdtbp_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Htdtbp {
    #[inline(always)]
    fn default() -> Htdtbp {
        <crate::RegValueT<Htdtbp_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Nqthctl_SPEC;
impl crate::sealed::RegSpec for Nqthctl_SPEC {
    type DataType = u32;
}
#[doc = "Normal Queue Threshold Control Register"]
pub type Nqthctl = crate::RegValueT<Nqthctl_SPEC>;

impl Nqthctl {
    #[doc = "Normal Command Queue Threshold"]
    #[inline(always)]
    pub fn cmdqth(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, nqthctl::Cmdqth, Nqthctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            nqthctl::Cmdqth,
            Nqthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Threshold"]
    #[inline(always)]
    pub fn rspqth(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, nqthctl::Rspqth, Nqthctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            nqthctl::Rspqth,
            Nqthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Data Segment Size"]
    #[inline(always)]
    pub fn ibidssz(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Nqthctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Nqthctl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal IBI Queue Threshold"]
    #[inline(always)]
    pub fn ibiqth(
        self,
    ) -> crate::common::RegisterField<
        24,
        0xff,
        1,
        0,
        nqthctl::Ibiqth,
        Nqthctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0xff,
            1,
            0,
            nqthctl::Ibiqth,
            Nqthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Nqthctl {
    #[inline(always)]
    fn default() -> Nqthctl {
        <crate::RegValueT<Nqthctl_SPEC> as RegisterValue<_>>::new(16843009)
    }
}
pub mod nqthctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqth_SPEC;
    pub type Cmdqth = crate::EnumBitfieldStruct<u8, Cmdqth_SPEC>;
    impl Cmdqth {
        #[doc = "Interrupt is issued when Command Queue is completely empty"]
        pub const _0: Self = Self::new(0);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqth_SPEC;
    pub type Rspqth = crate::EnumBitfieldStruct<u8, Rspqth_SPEC>;
    impl Rspqth {
        #[doc = "Interrupt is issued when response Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqth_SPEC;
    pub type Ibiqth = crate::EnumBitfieldStruct<u8, Ibiqth_SPEC>;
    impl Ibiqth {
        #[doc = "Interrupt is generated when the Outstanding IBI Status count is >= 1"]
        pub const _0: Self = Self::new(0);
        #[doc = "Interrupt is issued when IBI Data Buffer is completely empty"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqthctlHaL_SPEC;
impl crate::sealed::RegSpec for NqthctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Queue Threshold Control Register"]
pub type NqthctlHaL = crate::RegValueT<NqthctlHaL_SPEC>;

impl NqthctlHaL {
    #[doc = "Normal Command Queue Threshold"]
    #[inline(always)]
    pub fn cmdqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        nqthctl_ha_l::Cmdqth,
        NqthctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            nqthctl_ha_l::Cmdqth,
            NqthctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Threshold"]
    #[inline(always)]
    pub fn rspqth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        nqthctl_ha_l::Rspqth,
        NqthctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            nqthctl_ha_l::Rspqth,
            NqthctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for NqthctlHaL {
    #[inline(always)]
    fn default() -> NqthctlHaL {
        <crate::RegValueT<NqthctlHaL_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod nqthctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqth_SPEC;
    pub type Cmdqth = crate::EnumBitfieldStruct<u8, Cmdqth_SPEC>;
    impl Cmdqth {
        #[doc = "Interrupt is issued when Command Queue is completely empty"]
        pub const _0: Self = Self::new(0);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqth_SPEC;
    pub type Rspqth = crate::EnumBitfieldStruct<u8, Rspqth_SPEC>;
    impl Rspqth {
        #[doc = "Interrupt is issued when response Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqthctlByLl_SPEC;
impl crate::sealed::RegSpec for NqthctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Queue Threshold Control Register"]
pub type NqthctlByLl = crate::RegValueT<NqthctlByLl_SPEC>;

impl NqthctlByLl {
    #[doc = "Normal Command Queue Threshold"]
    #[inline(always)]
    pub fn cmdqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        nqthctl_by_ll::Cmdqth,
        NqthctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            nqthctl_by_ll::Cmdqth,
            NqthctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for NqthctlByLl {
    #[inline(always)]
    fn default() -> NqthctlByLl {
        <crate::RegValueT<NqthctlByLl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod nqthctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqth_SPEC;
    pub type Cmdqth = crate::EnumBitfieldStruct<u8, Cmdqth_SPEC>;
    impl Cmdqth {
        #[doc = "Interrupt is issued when Command Queue is completely empty"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqthctlByLh_SPEC;
impl crate::sealed::RegSpec for NqthctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Queue Threshold Control Register"]
pub type NqthctlByLh = crate::RegValueT<NqthctlByLh_SPEC>;

impl NqthctlByLh {
    #[doc = "Normal Response Queue Threshold"]
    #[inline(always)]
    pub fn rspqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        nqthctl_by_lh::Rspqth,
        NqthctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            nqthctl_by_lh::Rspqth,
            NqthctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for NqthctlByLh {
    #[inline(always)]
    fn default() -> NqthctlByLh {
        <crate::RegValueT<NqthctlByLh_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod nqthctl_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqth_SPEC;
    pub type Rspqth = crate::EnumBitfieldStruct<u8, Rspqth_SPEC>;
    impl Rspqth {
        #[doc = "Interrupt is issued when response Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqthctlHaH_SPEC;
impl crate::sealed::RegSpec for NqthctlHaH_SPEC {
    type DataType = u16;
}
#[doc = "Normal Queue Threshold Control Register"]
pub type NqthctlHaH = crate::RegValueT<NqthctlHaH_SPEC>;

impl NqthctlHaH {
    #[doc = "Normal IBI Data Segment Size"]
    #[inline(always)]
    pub fn ibidssz(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NqthctlHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NqthctlHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal IBI Queue Threshold"]
    #[inline(always)]
    pub fn ibiqth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        nqthctl_ha_h::Ibiqth,
        NqthctlHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            nqthctl_ha_h::Ibiqth,
            NqthctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for NqthctlHaH {
    #[inline(always)]
    fn default() -> NqthctlHaH {
        <crate::RegValueT<NqthctlHaH_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod nqthctl_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqth_SPEC;
    pub type Ibiqth = crate::EnumBitfieldStruct<u8, Ibiqth_SPEC>;
    impl Ibiqth {
        #[doc = "Interrupt is generated when the Outstanding IBI Status count is >= 1"]
        pub const _0: Self = Self::new(0);
        #[doc = "Interrupt is issued when IBI Data Buffer is completely empty"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqthctlByHl_SPEC;
impl crate::sealed::RegSpec for NqthctlByHl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Queue Threshold Control Register"]
pub type NqthctlByHl = crate::RegValueT<NqthctlByHl_SPEC>;

impl NqthctlByHl {
    #[doc = "Normal IBI Data Segment Size"]
    #[inline(always)]
    pub fn ibidssz(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NqthctlByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NqthctlByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NqthctlByHl {
    #[inline(always)]
    fn default() -> NqthctlByHl {
        <crate::RegValueT<NqthctlByHl_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqthctlByHh_SPEC;
impl crate::sealed::RegSpec for NqthctlByHh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Queue Threshold Control Register"]
pub type NqthctlByHh = crate::RegValueT<NqthctlByHh_SPEC>;

impl NqthctlByHh {
    #[doc = "Normal IBI Queue Threshold"]
    #[inline(always)]
    pub fn ibiqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        nqthctl_by_hh::Ibiqth,
        NqthctlByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            nqthctl_by_hh::Ibiqth,
            NqthctlByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for NqthctlByHh {
    #[inline(always)]
    fn default() -> NqthctlByHh {
        <crate::RegValueT<NqthctlByHh_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod nqthctl_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqth_SPEC;
    pub type Ibiqth = crate::EnumBitfieldStruct<u8, Ibiqth_SPEC>;
    impl Ibiqth {
        #[doc = "Interrupt is generated when the Outstanding IBI Status count is >= 1"]
        pub const _0: Self = Self::new(0);
        #[doc = "Interrupt is issued when IBI Data Buffer is completely empty"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntbthctl0_SPEC;
impl crate::sealed::RegSpec for Ntbthctl0_SPEC {
    type DataType = u32;
}
#[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
pub type Ntbthctl0 = crate::RegValueT<Ntbthctl0_SPEC>;

impl Ntbthctl0 {
    #[doc = "Normal Tx Data Buffer Threshold"]
    #[inline(always)]
    pub fn txdbth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        ntbthctl0::Txdbth,
        Ntbthctl0_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            ntbthctl0::Txdbth,
            Ntbthctl0_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Threshold"]
    #[inline(always)]
    pub fn rxdbth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x7,
        1,
        0,
        ntbthctl0::Rxdbth,
        Ntbthctl0_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x7,
            1,
            0,
            ntbthctl0::Rxdbth,
            Ntbthctl0_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Tx Start Threshold"]
    #[inline(always)]
    pub fn txstth(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x7,
        1,
        0,
        ntbthctl0::Txstth,
        Ntbthctl0_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x7,
            1,
            0,
            ntbthctl0::Txstth,
            Ntbthctl0_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Start Threshold"]
    #[inline(always)]
    pub fn rxstth(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x7,
        1,
        0,
        ntbthctl0::Rxstth,
        Ntbthctl0_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x7,
            1,
            0,
            ntbthctl0::Rxstth,
            Ntbthctl0_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<27, 0x1f, 1, 0, u8, Ntbthctl0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<27,0x1f,1,0,u8, Ntbthctl0_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntbthctl0 {
    #[inline(always)]
    fn default() -> Ntbthctl0 {
        <crate::RegValueT<Ntbthctl0_SPEC> as RegisterValue<_>>::new(16843009)
    }
}
pub mod ntbthctl0 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txdbth_SPEC;
    pub type Txdbth = crate::EnumBitfieldStruct<u8, Txdbth_SPEC>;
    impl Txdbth {
        #[doc = "Interrupt triggers at 2 Tx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 Tx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 Tx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 Tx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 Tx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 Tx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 Tx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 Tx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxdbth_SPEC;
    pub type Rxdbth = crate::EnumBitfieldStruct<u8, Rxdbth_SPEC>;
    impl Rxdbth {
        #[doc = "Interrupt triggers at 2 Rx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 Rx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 Rx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 Rx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 Rx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 Rx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 Rx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 Rx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txstth_SPEC;
    pub type Txstth = crate::EnumBitfieldStruct<u8, Txstth_SPEC>;
    impl Txstth {
        #[doc = "Wait for 2 entry DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 entry DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 entry DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 entry DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 entry DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 entry DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 entry DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 entry DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxstth_SPEC;
    pub type Rxstth = crate::EnumBitfieldStruct<u8, Rxstth_SPEC>;
    impl Rxstth {
        #[doc = "Wait for 2 empty DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 empty DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 empty DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 empty DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 empty DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 empty DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 empty DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 empty DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntbthctl0HaL_SPEC;
impl crate::sealed::RegSpec for Ntbthctl0HaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
pub type Ntbthctl0HaL = crate::RegValueT<Ntbthctl0HaL_SPEC>;

impl Ntbthctl0HaL {
    #[doc = "Normal Tx Data Buffer Threshold"]
    #[inline(always)]
    pub fn txdbth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        ntbthctl0_ha_l::Txdbth,
        Ntbthctl0HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            ntbthctl0_ha_l::Txdbth,
            Ntbthctl0HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Threshold"]
    #[inline(always)]
    pub fn rxdbth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x7,
        1,
        0,
        ntbthctl0_ha_l::Rxdbth,
        Ntbthctl0HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x7,
            1,
            0,
            ntbthctl0_ha_l::Rxdbth,
            Ntbthctl0HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, Ntbthctl0HaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<11,0x1f,1,0,u8, Ntbthctl0HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntbthctl0HaL {
    #[inline(always)]
    fn default() -> Ntbthctl0HaL {
        <crate::RegValueT<Ntbthctl0HaL_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod ntbthctl0_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txdbth_SPEC;
    pub type Txdbth = crate::EnumBitfieldStruct<u8, Txdbth_SPEC>;
    impl Txdbth {
        #[doc = "Interrupt triggers at 2 Tx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 Tx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 Tx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 Tx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 Tx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 Tx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 Tx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 Tx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxdbth_SPEC;
    pub type Rxdbth = crate::EnumBitfieldStruct<u8, Rxdbth_SPEC>;
    impl Rxdbth {
        #[doc = "Interrupt triggers at 2 Rx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 Rx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 Rx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 Rx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 Rx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 Rx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 Rx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 Rx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntbthctl0ByLl_SPEC;
impl crate::sealed::RegSpec for Ntbthctl0ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
pub type Ntbthctl0ByLl = crate::RegValueT<Ntbthctl0ByLl_SPEC>;

impl Ntbthctl0ByLl {
    #[doc = "Normal Tx Data Buffer Threshold"]
    #[inline(always)]
    pub fn txdbth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        ntbthctl0_by_ll::Txdbth,
        Ntbthctl0ByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            ntbthctl0_by_ll::Txdbth,
            Ntbthctl0ByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, Ntbthctl0ByLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8, Ntbthctl0ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntbthctl0ByLl {
    #[inline(always)]
    fn default() -> Ntbthctl0ByLl {
        <crate::RegValueT<Ntbthctl0ByLl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod ntbthctl0_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txdbth_SPEC;
    pub type Txdbth = crate::EnumBitfieldStruct<u8, Txdbth_SPEC>;
    impl Txdbth {
        #[doc = "Interrupt triggers at 2 Tx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 Tx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 Tx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 Tx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 Tx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 Tx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 Tx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 Tx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntbthctl0ByLh_SPEC;
impl crate::sealed::RegSpec for Ntbthctl0ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
pub type Ntbthctl0ByLh = crate::RegValueT<Ntbthctl0ByLh_SPEC>;

impl Ntbthctl0ByLh {
    #[doc = "Normal Rx Data Buffer Threshold"]
    #[inline(always)]
    pub fn rxdbth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        ntbthctl0_by_lh::Rxdbth,
        Ntbthctl0ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            ntbthctl0_by_lh::Rxdbth,
            Ntbthctl0ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, Ntbthctl0ByLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8, Ntbthctl0ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntbthctl0ByLh {
    #[inline(always)]
    fn default() -> Ntbthctl0ByLh {
        <crate::RegValueT<Ntbthctl0ByLh_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod ntbthctl0_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxdbth_SPEC;
    pub type Rxdbth = crate::EnumBitfieldStruct<u8, Rxdbth_SPEC>;
    impl Rxdbth {
        #[doc = "Interrupt triggers at 2 Rx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 Rx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 Rx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 Rx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 Rx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 Rx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 Rx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 Rx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntbthctl0HaH_SPEC;
impl crate::sealed::RegSpec for Ntbthctl0HaH_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
pub type Ntbthctl0HaH = crate::RegValueT<Ntbthctl0HaH_SPEC>;

impl Ntbthctl0HaH {
    #[doc = "Normal Tx Start Threshold"]
    #[inline(always)]
    pub fn txstth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        ntbthctl0_ha_h::Txstth,
        Ntbthctl0HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            ntbthctl0_ha_h::Txstth,
            Ntbthctl0HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Start Threshold"]
    #[inline(always)]
    pub fn rxstth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x7,
        1,
        0,
        ntbthctl0_ha_h::Rxstth,
        Ntbthctl0HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x7,
            1,
            0,
            ntbthctl0_ha_h::Rxstth,
            Ntbthctl0HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, Ntbthctl0HaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<11,0x1f,1,0,u8, Ntbthctl0HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntbthctl0HaH {
    #[inline(always)]
    fn default() -> Ntbthctl0HaH {
        <crate::RegValueT<Ntbthctl0HaH_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod ntbthctl0_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txstth_SPEC;
    pub type Txstth = crate::EnumBitfieldStruct<u8, Txstth_SPEC>;
    impl Txstth {
        #[doc = "Wait for 2 entry DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 entry DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 entry DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 entry DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 entry DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 entry DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 entry DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 entry DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxstth_SPEC;
    pub type Rxstth = crate::EnumBitfieldStruct<u8, Rxstth_SPEC>;
    impl Rxstth {
        #[doc = "Wait for 2 empty DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 empty DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 empty DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 empty DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 empty DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 empty DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 empty DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 empty DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntbthctl0ByHl_SPEC;
impl crate::sealed::RegSpec for Ntbthctl0ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
pub type Ntbthctl0ByHl = crate::RegValueT<Ntbthctl0ByHl_SPEC>;

impl Ntbthctl0ByHl {
    #[doc = "Normal Tx Start Threshold"]
    #[inline(always)]
    pub fn txstth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        ntbthctl0_by_hl::Txstth,
        Ntbthctl0ByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            ntbthctl0_by_hl::Txstth,
            Ntbthctl0ByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, Ntbthctl0ByHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8, Ntbthctl0ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntbthctl0ByHl {
    #[inline(always)]
    fn default() -> Ntbthctl0ByHl {
        <crate::RegValueT<Ntbthctl0ByHl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod ntbthctl0_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txstth_SPEC;
    pub type Txstth = crate::EnumBitfieldStruct<u8, Txstth_SPEC>;
    impl Txstth {
        #[doc = "Wait for 2 entry DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 entry DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 entry DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 entry DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 entry DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 entry DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 entry DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 entry DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntbthctl0ByHh_SPEC;
impl crate::sealed::RegSpec for Ntbthctl0ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Data Buffer Threshold Control Register 0"]
pub type Ntbthctl0ByHh = crate::RegValueT<Ntbthctl0ByHh_SPEC>;

impl Ntbthctl0ByHh {
    #[doc = "Normal Rx Start Threshold"]
    #[inline(always)]
    pub fn rxstth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        ntbthctl0_by_hh::Rxstth,
        Ntbthctl0ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            ntbthctl0_by_hh::Rxstth,
            Ntbthctl0ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, Ntbthctl0ByHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8, Ntbthctl0ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntbthctl0ByHh {
    #[inline(always)]
    fn default() -> Ntbthctl0ByHh {
        <crate::RegValueT<Ntbthctl0ByHh_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod ntbthctl0_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxstth_SPEC;
    pub type Rxstth = crate::EnumBitfieldStruct<u8, Rxstth_SPEC>;
    impl Rxstth {
        #[doc = "Wait for 2 empty DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 empty DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 empty DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 empty DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 empty DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 empty DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 empty DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 empty DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Nrqthctl_SPEC;
impl crate::sealed::RegSpec for Nrqthctl_SPEC {
    type DataType = u32;
}
#[doc = "Normal Receive Status Queue Threshold Control Register"]
pub type Nrqthctl = crate::RegValueT<Nrqthctl_SPEC>;

impl Nrqthctl {
    #[doc = "Normal Receive Status Queue Threshold"]
    #[inline(always)]
    pub fn rsqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        nrqthctl::Rsqth,
        Nrqthctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            nrqthctl::Rsqth,
            Nrqthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000000000000000. The write value should be 000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xffffff, 1, 0, u32, Nrqthctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xffffff,1,0,u32, Nrqthctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Nrqthctl {
    #[inline(always)]
    fn default() -> Nrqthctl {
        <crate::RegValueT<Nrqthctl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod nrqthctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqth_SPEC;
    pub type Rsqth = crate::EnumBitfieldStruct<u8, Rsqth_SPEC>;
    impl Rsqth {
        #[doc = "Interrupt is issued when Receive Status Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NrqthctlHaL_SPEC;
impl crate::sealed::RegSpec for NrqthctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Receive Status Queue Threshold Control Register"]
pub type NrqthctlHaL = crate::RegValueT<NrqthctlHaL_SPEC>;

impl NrqthctlHaL {
    #[doc = "Normal Receive Status Queue Threshold"]
    #[inline(always)]
    pub fn rsqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        nrqthctl_ha_l::Rsqth,
        NrqthctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            nrqthctl_ha_l::Rsqth,
            NrqthctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, NrqthctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, NrqthctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NrqthctlHaL {
    #[inline(always)]
    fn default() -> NrqthctlHaL {
        <crate::RegValueT<NrqthctlHaL_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod nrqthctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqth_SPEC;
    pub type Rsqth = crate::EnumBitfieldStruct<u8, Rsqth_SPEC>;
    impl Rsqth {
        #[doc = "Interrupt is issued when Receive Status Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NrqthctlByLl_SPEC;
impl crate::sealed::RegSpec for NrqthctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Receive Status Queue Threshold Control Register"]
pub type NrqthctlByLl = crate::RegValueT<NrqthctlByLl_SPEC>;

impl NrqthctlByLl {
    #[doc = "Normal Receive Status Queue Threshold"]
    #[inline(always)]
    pub fn rsqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        nrqthctl_by_ll::Rsqth,
        NrqthctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            nrqthctl_by_ll::Rsqth,
            NrqthctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for NrqthctlByLl {
    #[inline(always)]
    fn default() -> NrqthctlByLl {
        <crate::RegValueT<NrqthctlByLl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod nrqthctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqth_SPEC;
    pub type Rsqth = crate::EnumBitfieldStruct<u8, Rsqth_SPEC>;
    impl Rsqth {
        #[doc = "Interrupt is issued when Receive Status Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Hqthctl_SPEC;
impl crate::sealed::RegSpec for Hqthctl_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Queue Threshold Control Register"]
pub type Hqthctl = crate::RegValueT<Hqthctl_SPEC>;

impl Hqthctl {
    #[doc = "High Priority Command Queue Threshold"]
    #[inline(always)]
    pub fn cmdqth(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, hqthctl::Cmdqth, Hqthctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            hqthctl::Cmdqth,
            Hqthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Threshold"]
    #[inline(always)]
    pub fn rspqth(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, hqthctl::Rspqth, Hqthctl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            hqthctl::Rspqth,
            Hqthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Hqthctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Hqthctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Hqthctl {
    #[inline(always)]
    fn default() -> Hqthctl {
        <crate::RegValueT<Hqthctl_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod hqthctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqth_SPEC;
    pub type Cmdqth = crate::EnumBitfieldStruct<u8, Cmdqth_SPEC>;
    impl Cmdqth {
        #[doc = "Interrupt is issued when High Priority Command Queue is completely empty"]
        pub const _0: Self = Self::new(0);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqth_SPEC;
    pub type Rspqth = crate::EnumBitfieldStruct<u8, Rspqth_SPEC>;
    impl Rspqth {
        #[doc = "Interrupt is issued when High Priority Response Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HqthctlHaL_SPEC;
impl crate::sealed::RegSpec for HqthctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Queue Threshold Control Register"]
pub type HqthctlHaL = crate::RegValueT<HqthctlHaL_SPEC>;

impl HqthctlHaL {
    #[doc = "High Priority Command Queue Threshold"]
    #[inline(always)]
    pub fn cmdqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        hqthctl_ha_l::Cmdqth,
        HqthctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            hqthctl_ha_l::Cmdqth,
            HqthctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Threshold"]
    #[inline(always)]
    pub fn rspqth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        hqthctl_ha_l::Rspqth,
        HqthctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            hqthctl_ha_l::Rspqth,
            HqthctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for HqthctlHaL {
    #[inline(always)]
    fn default() -> HqthctlHaL {
        <crate::RegValueT<HqthctlHaL_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod hqthctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqth_SPEC;
    pub type Cmdqth = crate::EnumBitfieldStruct<u8, Cmdqth_SPEC>;
    impl Cmdqth {
        #[doc = "Interrupt is issued when High Priority Command Queue is completely empty"]
        pub const _0: Self = Self::new(0);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqth_SPEC;
    pub type Rspqth = crate::EnumBitfieldStruct<u8, Rspqth_SPEC>;
    impl Rspqth {
        #[doc = "Interrupt is issued when High Priority Response Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HqthctlByLl_SPEC;
impl crate::sealed::RegSpec for HqthctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Queue Threshold Control Register"]
pub type HqthctlByLl = crate::RegValueT<HqthctlByLl_SPEC>;

impl HqthctlByLl {
    #[doc = "High Priority Command Queue Threshold"]
    #[inline(always)]
    pub fn cmdqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        hqthctl_by_ll::Cmdqth,
        HqthctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            hqthctl_by_ll::Cmdqth,
            HqthctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for HqthctlByLl {
    #[inline(always)]
    fn default() -> HqthctlByLl {
        <crate::RegValueT<HqthctlByLl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod hqthctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqth_SPEC;
    pub type Cmdqth = crate::EnumBitfieldStruct<u8, Cmdqth_SPEC>;
    impl Cmdqth {
        #[doc = "Interrupt is issued when High Priority Command Queue is completely empty"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HqthctlByLh_SPEC;
impl crate::sealed::RegSpec for HqthctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Queue Threshold Control Register"]
pub type HqthctlByLh = crate::RegValueT<HqthctlByLh_SPEC>;

impl HqthctlByLh {
    #[doc = "High Priority Response Queue Threshold"]
    #[inline(always)]
    pub fn rspqth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        hqthctl_by_lh::Rspqth,
        HqthctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            hqthctl_by_lh::Rspqth,
            HqthctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for HqthctlByLh {
    #[inline(always)]
    fn default() -> HqthctlByLh {
        <crate::RegValueT<HqthctlByLh_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod hqthctl_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqth_SPEC;
    pub type Rspqth = crate::EnumBitfieldStruct<u8, Rspqth_SPEC>;
    impl Rspqth {
        #[doc = "Interrupt is issued when High Priority Response Queue contains 1 entry (DWORD)"]
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Htbthctl_SPEC;
impl crate::sealed::RegSpec for Htbthctl_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
pub type Htbthctl = crate::RegValueT<Htbthctl_SPEC>;

impl Htbthctl {
    #[doc = "High Priority Tx Data Buffer Threshold"]
    #[inline(always)]
    pub fn txdbth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        htbthctl::Txdbth,
        Htbthctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            htbthctl::Txdbth,
            Htbthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Threshold"]
    #[inline(always)]
    pub fn rxdbth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x7,
        1,
        0,
        htbthctl::Rxdbth,
        Htbthctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x7,
            1,
            0,
            htbthctl::Rxdbth,
            Htbthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Tx Start Threshold"]
    #[inline(always)]
    pub fn txstth(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x7,
        1,
        0,
        htbthctl::Txstth,
        Htbthctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x7,
            1,
            0,
            htbthctl::Txstth,
            Htbthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Start Threshold"]
    #[inline(always)]
    pub fn rxstth(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x7,
        1,
        0,
        htbthctl::Rxstth,
        Htbthctl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x7,
            1,
            0,
            htbthctl::Rxstth,
            Htbthctl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<27, 0x1f, 1, 0, u8, Htbthctl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<27,0x1f,1,0,u8, Htbthctl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Htbthctl {
    #[inline(always)]
    fn default() -> Htbthctl {
        <crate::RegValueT<Htbthctl_SPEC> as RegisterValue<_>>::new(16843009)
    }
}
pub mod htbthctl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txdbth_SPEC;
    pub type Txdbth = crate::EnumBitfieldStruct<u8, Txdbth_SPEC>;
    impl Txdbth {
        #[doc = "Interrupt triggers at 2 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxdbth_SPEC;
    pub type Rxdbth = crate::EnumBitfieldStruct<u8, Rxdbth_SPEC>;
    impl Rxdbth {
        #[doc = "Interrupt triggers at 2 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txstth_SPEC;
    pub type Txstth = crate::EnumBitfieldStruct<u8, Txstth_SPEC>;
    impl Txstth {
        #[doc = "Wait for 2 entry DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 entry DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 entry DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 entry DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 entry DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 entry DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 entry DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 entry DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxstth_SPEC;
    pub type Rxstth = crate::EnumBitfieldStruct<u8, Rxstth_SPEC>;
    impl Rxstth {
        #[doc = "Wait for 2 empty DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 empty DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 empty DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 empty DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 empty DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 empty DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 empty DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 empty DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtbthctlHaL_SPEC;
impl crate::sealed::RegSpec for HtbthctlHaL_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
pub type HtbthctlHaL = crate::RegValueT<HtbthctlHaL_SPEC>;

impl HtbthctlHaL {
    #[doc = "High Priority Tx Data Buffer Threshold"]
    #[inline(always)]
    pub fn txdbth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        htbthctl_ha_l::Txdbth,
        HtbthctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            htbthctl_ha_l::Txdbth,
            HtbthctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Threshold"]
    #[inline(always)]
    pub fn rxdbth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x7,
        1,
        0,
        htbthctl_ha_l::Rxdbth,
        HtbthctlHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x7,
            1,
            0,
            htbthctl_ha_l::Rxdbth,
            HtbthctlHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, HtbthctlHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<11,0x1f,1,0,u8, HtbthctlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtbthctlHaL {
    #[inline(always)]
    fn default() -> HtbthctlHaL {
        <crate::RegValueT<HtbthctlHaL_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod htbthctl_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txdbth_SPEC;
    pub type Txdbth = crate::EnumBitfieldStruct<u8, Txdbth_SPEC>;
    impl Txdbth {
        #[doc = "Interrupt triggers at 2 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxdbth_SPEC;
    pub type Rxdbth = crate::EnumBitfieldStruct<u8, Rxdbth_SPEC>;
    impl Rxdbth {
        #[doc = "Interrupt triggers at 2 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtbthctlByLl_SPEC;
impl crate::sealed::RegSpec for HtbthctlByLl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
pub type HtbthctlByLl = crate::RegValueT<HtbthctlByLl_SPEC>;

impl HtbthctlByLl {
    #[doc = "High Priority Tx Data Buffer Threshold"]
    #[inline(always)]
    pub fn txdbth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        htbthctl_by_ll::Txdbth,
        HtbthctlByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            htbthctl_by_ll::Txdbth,
            HtbthctlByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, HtbthctlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, HtbthctlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtbthctlByLl {
    #[inline(always)]
    fn default() -> HtbthctlByLl {
        <crate::RegValueT<HtbthctlByLl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod htbthctl_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txdbth_SPEC;
    pub type Txdbth = crate::EnumBitfieldStruct<u8, Txdbth_SPEC>;
    impl Txdbth {
        #[doc = "Interrupt triggers at 2 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 High Priority Tx Buffer empties, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtbthctlByLh_SPEC;
impl crate::sealed::RegSpec for HtbthctlByLh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
pub type HtbthctlByLh = crate::RegValueT<HtbthctlByLh_SPEC>;

impl HtbthctlByLh {
    #[doc = "High Priority Rx Data Buffer Threshold"]
    #[inline(always)]
    pub fn rxdbth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        htbthctl_by_lh::Rxdbth,
        HtbthctlByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            htbthctl_by_lh::Rxdbth,
            HtbthctlByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, HtbthctlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, HtbthctlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtbthctlByLh {
    #[inline(always)]
    fn default() -> HtbthctlByLh {
        <crate::RegValueT<HtbthctlByLh_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod htbthctl_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxdbth_SPEC;
    pub type Rxdbth = crate::EnumBitfieldStruct<u8, Rxdbth_SPEC>;
    impl Rxdbth {
        #[doc = "Interrupt triggers at 2 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Interrupt triggers at 4 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Interrupt triggers at 8 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Interrupt triggers at 16 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Interrupt triggers at 32 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Interrupt triggers at 64 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Interrupt triggers at 128 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Interrupt triggers at 256 High Priority Rx Buffer entries, DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtbthctlHaH_SPEC;
impl crate::sealed::RegSpec for HtbthctlHaH_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
pub type HtbthctlHaH = crate::RegValueT<HtbthctlHaH_SPEC>;

impl HtbthctlHaH {
    #[doc = "High Priority Tx Start Threshold"]
    #[inline(always)]
    pub fn txstth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        htbthctl_ha_h::Txstth,
        HtbthctlHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            htbthctl_ha_h::Txstth,
            HtbthctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Start Threshold"]
    #[inline(always)]
    pub fn rxstth(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x7,
        1,
        0,
        htbthctl_ha_h::Rxstth,
        HtbthctlHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x7,
            1,
            0,
            htbthctl_ha_h::Rxstth,
            HtbthctlHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, HtbthctlHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<11,0x1f,1,0,u8, HtbthctlHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtbthctlHaH {
    #[inline(always)]
    fn default() -> HtbthctlHaH {
        <crate::RegValueT<HtbthctlHaH_SPEC> as RegisterValue<_>>::new(257)
    }
}
pub mod htbthctl_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txstth_SPEC;
    pub type Txstth = crate::EnumBitfieldStruct<u8, Txstth_SPEC>;
    impl Txstth {
        #[doc = "Wait for 2 entry DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 entry DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 entry DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 entry DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 entry DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 entry DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 entry DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 entry DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxstth_SPEC;
    pub type Rxstth = crate::EnumBitfieldStruct<u8, Rxstth_SPEC>;
    impl Rxstth {
        #[doc = "Wait for 2 empty DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 empty DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 empty DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 empty DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 empty DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 empty DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 empty DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 empty DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtbthctlByHl_SPEC;
impl crate::sealed::RegSpec for HtbthctlByHl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
pub type HtbthctlByHl = crate::RegValueT<HtbthctlByHl_SPEC>;

impl HtbthctlByHl {
    #[doc = "High Priority Tx Start Threshold"]
    #[inline(always)]
    pub fn txstth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        htbthctl_by_hl::Txstth,
        HtbthctlByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            htbthctl_by_hl::Txstth,
            HtbthctlByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, HtbthctlByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, HtbthctlByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtbthctlByHl {
    #[inline(always)]
    fn default() -> HtbthctlByHl {
        <crate::RegValueT<HtbthctlByHl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod htbthctl_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txstth_SPEC;
    pub type Txstth = crate::EnumBitfieldStruct<u8, Txstth_SPEC>;
    impl Txstth {
        #[doc = "Wait for 2 entry DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 entry DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 entry DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 entry DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 entry DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 entry DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 entry DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 entry DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtbthctlByHh_SPEC;
impl crate::sealed::RegSpec for HtbthctlByHh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Data Buffer Threshold Control Register"]
pub type HtbthctlByHh = crate::RegValueT<HtbthctlByHh_SPEC>;

impl HtbthctlByHh {
    #[doc = "High Priority Rx Start Threshold"]
    #[inline(always)]
    pub fn rxstth(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        htbthctl_by_hh::Rxstth,
        HtbthctlByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            htbthctl_by_hh::Rxstth,
            HtbthctlByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, HtbthctlByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, HtbthctlByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtbthctlByHh {
    #[inline(always)]
    fn default() -> HtbthctlByHh {
        <crate::RegValueT<HtbthctlByHh_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod htbthctl_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxstth_SPEC;
    pub type Rxstth = crate::EnumBitfieldStruct<u8, Rxstth_SPEC>;
    impl Rxstth {
        #[doc = "Wait for 2 empty DWORDs"]
        pub const _0_X_0: Self = Self::new(0);
        #[doc = "Wait for 4 empty DWORDs"]
        pub const _0_X_1: Self = Self::new(1);
        #[doc = "Wait for 8 empty DWORDs"]
        pub const _0_X_2: Self = Self::new(2);
        #[doc = "Wait for 16 empty DWORDs"]
        pub const _0_X_3: Self = Self::new(3);
        #[doc = "Wait for 32 empty DWORDs"]
        pub const _0_X_4: Self = Self::new(4);
        #[doc = "Wait for 64 empty DWORDs"]
        pub const _0_X_5: Self = Self::new(5);
        #[doc = "Wait for 128 empty DWORDs"]
        pub const _0_X_6: Self = Self::new(6);
        #[doc = "Wait for 256 empty DWORDs"]
        pub const _0_X_7: Self = Self::new(7);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bst_SPEC;
impl crate::sealed::RegSpec for Bst_SPEC {
    type DataType = u32;
}
#[doc = "Bus Status Register"]
pub type Bst = crate::RegValueT<Bst_SPEC>;

impl Bst {
    #[doc = "START Condition Detection Flag"]
    #[inline(always)]
    pub fn stcnddf(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bst::Stcnddf, Bst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1,1,0,bst::Stcnddf, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "STOP Condition Detection Flag"]
    #[inline(always)]
    pub fn spcnddf(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, bst::Spcnddf, Bst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x1,1,0,bst::Spcnddf, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "HDR Exit Pattern Detection Flag"]
    #[inline(always)]
    pub fn hdrexdf(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, bst::Hdrexdf, Bst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x1,1,0,bst::Hdrexdf, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "NACK Detection Flag"]
    #[inline(always)]
    pub fn nackdf(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bst::Nackdf, Bst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0x1,1,0,bst::Nackdf, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Transmit End Flag"]
    #[inline(always)]
    pub fn tendf(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bst::Tendf, Bst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1,1,0,bst::Tendf, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Arbitration Lost Flag"]
    #[inline(always)]
    pub fn alf(
        self,
    ) -> crate::common::RegisterField<16, 0x1, 1, 0, bst::Alf, Bst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x1,1,0,bst::Alf, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Detection Flag"]
    #[inline(always)]
    pub fn todf(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, bst::Todf, Bst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0x1,1,0,bst::Todf, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-Up Condition Detection Flag"]
    #[inline(always)]
    pub fn wucnddf(
        self,
    ) -> crate::common::RegisterField<24, 0x1, 1, 0, bst::Wucnddf, Bst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<24,0x1,1,0,bst::Wucnddf, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<25, 0x7f, 1, 0, u8, Bst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<25,0x7f,1,0,u8, Bst_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Bst {
    #[inline(always)]
    fn default() -> Bst {
        <crate::RegValueT<Bst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddf_SPEC;
    pub type Stcnddf = crate::EnumBitfieldStruct<u8, Stcnddf_SPEC>;
    impl Stcnddf {
        #[doc = "START condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "START condition is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddf_SPEC;
    pub type Spcnddf = crate::EnumBitfieldStruct<u8, Spcnddf_SPEC>;
    impl Spcnddf {
        #[doc = "STOP condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "STOP condition is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdf_SPEC;
    pub type Hdrexdf = crate::EnumBitfieldStruct<u8, Hdrexdf_SPEC>;
    impl Hdrexdf {
        #[doc = "HDR Exit Pattern is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR Exit Pattern is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdf_SPEC;
    pub type Nackdf = crate::EnumBitfieldStruct<u8, Nackdf_SPEC>;
    impl Nackdf {
        #[doc = "NACK is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendf_SPEC;
    pub type Tendf = crate::EnumBitfieldStruct<u8, Tendf_SPEC>;
    impl Tendf {
        #[doc = "Data is being transmitted"]
        pub const _0: Self = Self::new(0);
        #[doc = "Data has been transmitted"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alf_SPEC;
    pub type Alf = crate::EnumBitfieldStruct<u8, Alf_SPEC>;
    impl Alf {
        #[doc = "Arbitration is not lost"]
        pub const _0: Self = Self::new(0);
        #[doc = "Arbitration is lost"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todf_SPEC;
    pub type Todf = crate::EnumBitfieldStruct<u8, Todf_SPEC>;
    impl Todf {
        #[doc = "Timeout is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Timeout is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddf_SPEC;
    pub type Wucnddf = crate::EnumBitfieldStruct<u8, Wucnddf_SPEC>;
    impl Wucnddf {
        #[doc = "Wake-Up Condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Wake-Up Condition is detected"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstHaL_SPEC;
impl crate::sealed::RegSpec for BstHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Status Register"]
pub type BstHaL = crate::RegValueT<BstHaL_SPEC>;

impl BstHaL {
    #[doc = "START Condition Detection Flag"]
    #[inline(always)]
    pub fn stcnddf(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bst_ha_l::Stcnddf, BstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bst_ha_l::Stcnddf,
            BstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "STOP Condition Detection Flag"]
    #[inline(always)]
    pub fn spcnddf(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, bst_ha_l::Spcnddf, BstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bst_ha_l::Spcnddf,
            BstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR Exit Pattern Detection Flag"]
    #[inline(always)]
    pub fn hdrexdf(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, bst_ha_l::Hdrexdf, BstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bst_ha_l::Hdrexdf,
            BstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "NACK Detection Flag"]
    #[inline(always)]
    pub fn nackdf(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bst_ha_l::Nackdf, BstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,bst_ha_l::Nackdf, BstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Transmit End Flag"]
    #[inline(always)]
    pub fn tendf(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bst_ha_l::Tendf, BstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0x1,1,0,bst_ha_l::Tendf, BstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BstHaL {
    #[inline(always)]
    fn default() -> BstHaL {
        <crate::RegValueT<BstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddf_SPEC;
    pub type Stcnddf = crate::EnumBitfieldStruct<u8, Stcnddf_SPEC>;
    impl Stcnddf {
        #[doc = "START condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "START condition is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddf_SPEC;
    pub type Spcnddf = crate::EnumBitfieldStruct<u8, Spcnddf_SPEC>;
    impl Spcnddf {
        #[doc = "STOP condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "STOP condition is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdf_SPEC;
    pub type Hdrexdf = crate::EnumBitfieldStruct<u8, Hdrexdf_SPEC>;
    impl Hdrexdf {
        #[doc = "HDR Exit Pattern is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR Exit Pattern is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdf_SPEC;
    pub type Nackdf = crate::EnumBitfieldStruct<u8, Nackdf_SPEC>;
    impl Nackdf {
        #[doc = "NACK is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendf_SPEC;
    pub type Tendf = crate::EnumBitfieldStruct<u8, Tendf_SPEC>;
    impl Tendf {
        #[doc = "Data is being transmitted"]
        pub const _0: Self = Self::new(0);
        #[doc = "Data has been transmitted"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstByLl_SPEC;
impl crate::sealed::RegSpec for BstByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Register"]
pub type BstByLl = crate::RegValueT<BstByLl_SPEC>;

impl BstByLl {
    #[doc = "START Condition Detection Flag"]
    #[inline(always)]
    pub fn stcnddf(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bst_by_ll::Stcnddf,
        BstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bst_by_ll::Stcnddf,
            BstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "STOP Condition Detection Flag"]
    #[inline(always)]
    pub fn spcnddf(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bst_by_ll::Spcnddf,
        BstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bst_by_ll::Spcnddf,
            BstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR Exit Pattern Detection Flag"]
    #[inline(always)]
    pub fn hdrexdf(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bst_by_ll::Hdrexdf,
        BstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bst_by_ll::Hdrexdf,
            BstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "NACK Detection Flag"]
    #[inline(always)]
    pub fn nackdf(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bst_by_ll::Nackdf,
        BstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bst_by_ll::Nackdf,
            BstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BstByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BstByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BstByLl {
    #[inline(always)]
    fn default() -> BstByLl {
        <crate::RegValueT<BstByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bst_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddf_SPEC;
    pub type Stcnddf = crate::EnumBitfieldStruct<u8, Stcnddf_SPEC>;
    impl Stcnddf {
        #[doc = "START condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "START condition is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddf_SPEC;
    pub type Spcnddf = crate::EnumBitfieldStruct<u8, Spcnddf_SPEC>;
    impl Spcnddf {
        #[doc = "STOP condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "STOP condition is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdf_SPEC;
    pub type Hdrexdf = crate::EnumBitfieldStruct<u8, Hdrexdf_SPEC>;
    impl Hdrexdf {
        #[doc = "HDR Exit Pattern is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR Exit Pattern is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdf_SPEC;
    pub type Nackdf = crate::EnumBitfieldStruct<u8, Nackdf_SPEC>;
    impl Nackdf {
        #[doc = "NACK is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "NACK is detected"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstByLh_SPEC;
impl crate::sealed::RegSpec for BstByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Register"]
pub type BstByLh = crate::RegValueT<BstByLh_SPEC>;

impl BstByLh {
    #[doc = "Transmit End Flag"]
    #[inline(always)]
    pub fn tendf(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bst_by_lh::Tendf, BstByLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bst_by_lh::Tendf,
            BstByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BstByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BstByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BstByLh {
    #[inline(always)]
    fn default() -> BstByLh {
        <crate::RegValueT<BstByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bst_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendf_SPEC;
    pub type Tendf = crate::EnumBitfieldStruct<u8, Tendf_SPEC>;
    impl Tendf {
        #[doc = "Data is being transmitted"]
        pub const _0: Self = Self::new(0);
        #[doc = "Data has been transmitted"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstHaH_SPEC;
impl crate::sealed::RegSpec for BstHaH_SPEC {
    type DataType = u16;
}
#[doc = "Bus Status Register"]
pub type BstHaH = crate::RegValueT<BstHaH_SPEC>;

impl BstHaH {
    #[doc = "Arbitration Lost Flag"]
    #[inline(always)]
    pub fn alf(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bst_ha_h::Alf, BstHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,bst_ha_h::Alf, BstHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Detection Flag"]
    #[inline(always)]
    pub fn todf(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bst_ha_h::Todf, BstHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,bst_ha_h::Todf, BstHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-Up Condition Detection Flag"]
    #[inline(always)]
    pub fn wucnddf(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bst_ha_h::Wucnddf, BstHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            bst_ha_h::Wucnddf,
            BstHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BstHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BstHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BstHaH {
    #[inline(always)]
    fn default() -> BstHaH {
        <crate::RegValueT<BstHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bst_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alf_SPEC;
    pub type Alf = crate::EnumBitfieldStruct<u8, Alf_SPEC>;
    impl Alf {
        #[doc = "Arbitration is not lost"]
        pub const _0: Self = Self::new(0);
        #[doc = "Arbitration is lost"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todf_SPEC;
    pub type Todf = crate::EnumBitfieldStruct<u8, Todf_SPEC>;
    impl Todf {
        #[doc = "Timeout is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Timeout is detected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddf_SPEC;
    pub type Wucnddf = crate::EnumBitfieldStruct<u8, Wucnddf_SPEC>;
    impl Wucnddf {
        #[doc = "Wake-Up Condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Wake-Up Condition is detected"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstByHl_SPEC;
impl crate::sealed::RegSpec for BstByHl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Register"]
pub type BstByHl = crate::RegValueT<BstByHl_SPEC>;

impl BstByHl {
    #[doc = "Arbitration Lost Flag"]
    #[inline(always)]
    pub fn alf(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bst_by_hl::Alf, BstByHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,bst_by_hl::Alf, BstByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Detection Flag"]
    #[inline(always)]
    pub fn todf(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bst_by_hl::Todf, BstByHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,bst_by_hl::Todf, BstByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BstByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BstByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BstByHl {
    #[inline(always)]
    fn default() -> BstByHl {
        <crate::RegValueT<BstByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bst_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alf_SPEC;
    pub type Alf = crate::EnumBitfieldStruct<u8, Alf_SPEC>;
    impl Alf {
        #[doc = "Arbitration is not lost"]
        pub const _0: Self = Self::new(0);
        #[doc = "Arbitration is lost"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todf_SPEC;
    pub type Todf = crate::EnumBitfieldStruct<u8, Todf_SPEC>;
    impl Todf {
        #[doc = "Timeout is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Timeout is detected"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstByHh_SPEC;
impl crate::sealed::RegSpec for BstByHh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Register"]
pub type BstByHh = crate::RegValueT<BstByHh_SPEC>;

impl BstByHh {
    #[doc = "Wake-Up Condition Detection Flag"]
    #[inline(always)]
    pub fn wucnddf(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bst_by_hh::Wucnddf,
        BstByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bst_by_hh::Wucnddf,
            BstByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BstByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BstByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BstByHh {
    #[inline(always)]
    fn default() -> BstByHh {
        <crate::RegValueT<BstByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bst_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddf_SPEC;
    pub type Wucnddf = crate::EnumBitfieldStruct<u8, Wucnddf_SPEC>;
    impl Wucnddf {
        #[doc = "Wake-Up Condition is not detected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Wake-Up Condition is detected"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bste_SPEC;
impl crate::sealed::RegSpec for Bste_SPEC {
    type DataType = u32;
}
#[doc = "Bus Status Enable Register"]
pub type Bste = crate::RegValueT<Bste_SPEC>;

impl Bste {
    #[doc = "START Condition Detection Enable"]
    #[inline(always)]
    pub fn stcndde(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bste::Stcndde, Bste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,bste::Stcndde, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "STOP Condition Detection Enable"]
    #[inline(always)]
    pub fn spcndde(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, bste::Spcndde, Bste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,bste::Spcndde, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "HDR Exit Pattern  Detection Enable"]
    #[inline(always)]
    pub fn hdrexde(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, bste::Hdrexde, Bste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,bste::Hdrexde, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "NACK Detection Enable"]
    #[inline(always)]
    pub fn nackde(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bste::Nackde, Bste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,bste::Nackde, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Transmit End Enable"]
    #[inline(always)]
    pub fn tende(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bste::Tende, Bste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1,1,0,bste::Tende, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Arbitration Lost Enable"]
    #[inline(always)]
    pub fn ale(
        self,
    ) -> crate::common::RegisterField<16, 0x1, 1, 0, bste::Ale, Bste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x1,1,0,bste::Ale, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Detection Enable"]
    #[inline(always)]
    pub fn tode(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, bste::Tode, Bste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0x1,1,0,bste::Tode, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-up Condition Detection Enable"]
    #[inline(always)]
    pub fn wucndde(
        self,
    ) -> crate::common::RegisterField<24, 0x1, 1, 0, bste::Wucndde, Bste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<24,0x1,1,0,bste::Wucndde, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<25, 0x7f, 1, 0, u8, Bste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<25,0x7f,1,0,u8, Bste_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Bste {
    #[inline(always)]
    fn default() -> Bste {
        <crate::RegValueT<Bste_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bste {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcndde_SPEC;
    pub type Stcndde = crate::EnumBitfieldStruct<u8, Stcndde_SPEC>;
    impl Stcndde {
        #[doc = "Disables START Condition Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables START Condition Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcndde_SPEC;
    pub type Spcndde = crate::EnumBitfieldStruct<u8, Spcndde_SPEC>;
    impl Spcndde {
        #[doc = "Disables STOP Condition Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables STOP Condition Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexde_SPEC;
    pub type Hdrexde = crate::EnumBitfieldStruct<u8, Hdrexde_SPEC>;
    impl Hdrexde {
        #[doc = "Disables HDR Exit Pattern Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables HDR Exit Pattern Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackde_SPEC;
    pub type Nackde = crate::EnumBitfieldStruct<u8, Nackde_SPEC>;
    impl Nackde {
        #[doc = "Disables NACK Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables NACK Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tende_SPEC;
    pub type Tende = crate::EnumBitfieldStruct<u8, Tende_SPEC>;
    impl Tende {
        #[doc = "Disables Transmit End Interrupt Status logging"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transmit End Interrupt Status logging"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ale_SPEC;
    pub type Ale = crate::EnumBitfieldStruct<u8, Ale_SPEC>;
    impl Ale {
        #[doc = "Disables Arbitration Lost Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Arbitration Lost Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tode_SPEC;
    pub type Tode = crate::EnumBitfieldStruct<u8, Tode_SPEC>;
    impl Tode {
        #[doc = "Disables Timeout Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Timeout Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucndde_SPEC;
    pub type Wucndde = crate::EnumBitfieldStruct<u8, Wucndde_SPEC>;
    impl Wucndde {
        #[doc = "Disables Wake-up Condition Detection Status logging"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Wake-up Condition Detection Status logging"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BsteHaL_SPEC;
impl crate::sealed::RegSpec for BsteHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Status Enable Register"]
pub type BsteHaL = crate::RegValueT<BsteHaL_SPEC>;

impl BsteHaL {
    #[doc = "START Condition Detection Enable"]
    #[inline(always)]
    pub fn stcndde(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bste_ha_l::Stcndde,
        BsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bste_ha_l::Stcndde,
            BsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "STOP Condition Detection Enable"]
    #[inline(always)]
    pub fn spcndde(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bste_ha_l::Spcndde,
        BsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bste_ha_l::Spcndde,
            BsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR Exit Pattern  Detection Enable"]
    #[inline(always)]
    pub fn hdrexde(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bste_ha_l::Hdrexde,
        BsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bste_ha_l::Hdrexde,
            BsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "NACK Detection Enable"]
    #[inline(always)]
    pub fn nackde(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bste_ha_l::Nackde,
        BsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bste_ha_l::Nackde,
            BsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Transmit End Enable"]
    #[inline(always)]
    pub fn tende(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bste_ha_l::Tende, BsteHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            bste_ha_l::Tende,
            BsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BsteHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BsteHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BsteHaL {
    #[inline(always)]
    fn default() -> BsteHaL {
        <crate::RegValueT<BsteHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bste_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcndde_SPEC;
    pub type Stcndde = crate::EnumBitfieldStruct<u8, Stcndde_SPEC>;
    impl Stcndde {
        #[doc = "Disables START Condition Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables START Condition Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcndde_SPEC;
    pub type Spcndde = crate::EnumBitfieldStruct<u8, Spcndde_SPEC>;
    impl Spcndde {
        #[doc = "Disables STOP Condition Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables STOP Condition Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexde_SPEC;
    pub type Hdrexde = crate::EnumBitfieldStruct<u8, Hdrexde_SPEC>;
    impl Hdrexde {
        #[doc = "Disables HDR Exit Pattern Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables HDR Exit Pattern Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackde_SPEC;
    pub type Nackde = crate::EnumBitfieldStruct<u8, Nackde_SPEC>;
    impl Nackde {
        #[doc = "Disables NACK Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables NACK Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tende_SPEC;
    pub type Tende = crate::EnumBitfieldStruct<u8, Tende_SPEC>;
    impl Tende {
        #[doc = "Disables Transmit End Interrupt Status logging"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transmit End Interrupt Status logging"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BsteByLl_SPEC;
impl crate::sealed::RegSpec for BsteByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Enable Register"]
pub type BsteByLl = crate::RegValueT<BsteByLl_SPEC>;

impl BsteByLl {
    #[doc = "START Condition Detection Enable"]
    #[inline(always)]
    pub fn stcndde(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bste_by_ll::Stcndde,
        BsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bste_by_ll::Stcndde,
            BsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "STOP Condition Detection Enable"]
    #[inline(always)]
    pub fn spcndde(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bste_by_ll::Spcndde,
        BsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bste_by_ll::Spcndde,
            BsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR Exit Pattern  Detection Enable"]
    #[inline(always)]
    pub fn hdrexde(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bste_by_ll::Hdrexde,
        BsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bste_by_ll::Hdrexde,
            BsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "NACK Detection Enable"]
    #[inline(always)]
    pub fn nackde(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bste_by_ll::Nackde,
        BsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bste_by_ll::Nackde,
            BsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BsteByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BsteByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BsteByLl {
    #[inline(always)]
    fn default() -> BsteByLl {
        <crate::RegValueT<BsteByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bste_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcndde_SPEC;
    pub type Stcndde = crate::EnumBitfieldStruct<u8, Stcndde_SPEC>;
    impl Stcndde {
        #[doc = "Disables START Condition Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables START Condition Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcndde_SPEC;
    pub type Spcndde = crate::EnumBitfieldStruct<u8, Spcndde_SPEC>;
    impl Spcndde {
        #[doc = "Disables STOP Condition Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables STOP Condition Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexde_SPEC;
    pub type Hdrexde = crate::EnumBitfieldStruct<u8, Hdrexde_SPEC>;
    impl Hdrexde {
        #[doc = "Disables HDR Exit Pattern Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables HDR Exit Pattern Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackde_SPEC;
    pub type Nackde = crate::EnumBitfieldStruct<u8, Nackde_SPEC>;
    impl Nackde {
        #[doc = "Disables NACK Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables NACK Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BsteByLh_SPEC;
impl crate::sealed::RegSpec for BsteByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Enable Register"]
pub type BsteByLh = crate::RegValueT<BsteByLh_SPEC>;

impl BsteByLh {
    #[doc = "Transmit End Enable"]
    #[inline(always)]
    pub fn tende(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bste_by_lh::Tende,
        BsteByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bste_by_lh::Tende,
            BsteByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BsteByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BsteByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BsteByLh {
    #[inline(always)]
    fn default() -> BsteByLh {
        <crate::RegValueT<BsteByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bste_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tende_SPEC;
    pub type Tende = crate::EnumBitfieldStruct<u8, Tende_SPEC>;
    impl Tende {
        #[doc = "Disables Transmit End Interrupt Status logging"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transmit End Interrupt Status logging"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BsteHaH_SPEC;
impl crate::sealed::RegSpec for BsteHaH_SPEC {
    type DataType = u16;
}
#[doc = "Bus Status Enable Register"]
pub type BsteHaH = crate::RegValueT<BsteHaH_SPEC>;

impl BsteHaH {
    #[doc = "Arbitration Lost Enable"]
    #[inline(always)]
    pub fn ale(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bste_ha_h::Ale, BsteHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,bste_ha_h::Ale, BsteHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Detection Enable"]
    #[inline(always)]
    pub fn tode(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bste_ha_h::Tode, BsteHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,bste_ha_h::Tode, BsteHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-up Condition Detection Enable"]
    #[inline(always)]
    pub fn wucndde(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        bste_ha_h::Wucndde,
        BsteHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            bste_ha_h::Wucndde,
            BsteHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BsteHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BsteHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BsteHaH {
    #[inline(always)]
    fn default() -> BsteHaH {
        <crate::RegValueT<BsteHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bste_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ale_SPEC;
    pub type Ale = crate::EnumBitfieldStruct<u8, Ale_SPEC>;
    impl Ale {
        #[doc = "Disables Arbitration Lost Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Arbitration Lost Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tode_SPEC;
    pub type Tode = crate::EnumBitfieldStruct<u8, Tode_SPEC>;
    impl Tode {
        #[doc = "Disables Timeout Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Timeout Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucndde_SPEC;
    pub type Wucndde = crate::EnumBitfieldStruct<u8, Wucndde_SPEC>;
    impl Wucndde {
        #[doc = "Disables Wake-up Condition Detection Status logging"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Wake-up Condition Detection Status logging"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BsteByHl_SPEC;
impl crate::sealed::RegSpec for BsteByHl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Enable Register"]
pub type BsteByHl = crate::RegValueT<BsteByHl_SPEC>;

impl BsteByHl {
    #[doc = "Arbitration Lost Enable"]
    #[inline(always)]
    pub fn ale(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bste_by_hl::Ale, BsteByHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bste_by_hl::Ale,
            BsteByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Timeout Detection Enable"]
    #[inline(always)]
    pub fn tode(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bste_by_hl::Tode,
        BsteByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bste_by_hl::Tode,
            BsteByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BsteByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BsteByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BsteByHl {
    #[inline(always)]
    fn default() -> BsteByHl {
        <crate::RegValueT<BsteByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bste_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ale_SPEC;
    pub type Ale = crate::EnumBitfieldStruct<u8, Ale_SPEC>;
    impl Ale {
        #[doc = "Disables Arbitration Lost Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Arbitration Lost Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tode_SPEC;
    pub type Tode = crate::EnumBitfieldStruct<u8, Tode_SPEC>;
    impl Tode {
        #[doc = "Disables Timeout Detection Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Timeout Detection Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BsteByHh_SPEC;
impl crate::sealed::RegSpec for BsteByHh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Enable Register"]
pub type BsteByHh = crate::RegValueT<BsteByHh_SPEC>;

impl BsteByHh {
    #[doc = "Wake-up Condition Detection Enable"]
    #[inline(always)]
    pub fn wucndde(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bste_by_hh::Wucndde,
        BsteByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bste_by_hh::Wucndde,
            BsteByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BsteByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BsteByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BsteByHh {
    #[inline(always)]
    fn default() -> BsteByHh {
        <crate::RegValueT<BsteByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bste_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucndde_SPEC;
    pub type Wucndde = crate::EnumBitfieldStruct<u8, Wucndde_SPEC>;
    impl Wucndde {
        #[doc = "Disables Wake-up Condition Detection Status logging"]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Wake-up Condition Detection Status logging"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bie_SPEC;
impl crate::sealed::RegSpec for Bie_SPEC {
    type DataType = u32;
}
#[doc = "Bus Interrupt Enable Register"]
pub type Bie = crate::RegValueT<Bie_SPEC>;

impl Bie {
    #[doc = "START Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn stcnddie(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bie::Stcnddie, Bie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,bie::Stcnddie, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "STOP Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn spcnddie(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, bie::Spcnddie, Bie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,bie::Spcnddie, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "HDR Exit Pattern Detection Interrupt Enable"]
    #[inline(always)]
    pub fn hdrexdie(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, bie::Hdrexdie, Bie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,bie::Hdrexdie, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "NACK Detection Interrupt Enable"]
    #[inline(always)]
    pub fn nackdie(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bie::Nackdie, Bie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0x1,1,0,bie::Nackdie, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Transmit End Interrupt Enable"]
    #[inline(always)]
    pub fn tendie(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bie::Tendie, Bie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1,1,0,bie::Tendie, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Arbitration Lost Interrupt Enable"]
    #[inline(always)]
    pub fn alie(
        self,
    ) -> crate::common::RegisterField<16, 0x1, 1, 0, bie::Alie, Bie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x1,1,0,bie::Alie, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Detection Interrupt Enable"]
    #[inline(always)]
    pub fn todie(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, bie::Todie, Bie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<20,0x1,1,0,bie::Todie, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-Up Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn wucnddie(
        self,
    ) -> crate::common::RegisterField<24, 0x1, 1, 0, bie::Wucnddie, Bie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<24,0x1,1,0,bie::Wucnddie, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<25, 0x7f, 1, 0, u8, Bie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<25,0x7f,1,0,u8, Bie_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Bie {
    #[inline(always)]
    fn default() -> Bie {
        <crate::RegValueT<Bie_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bie {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddie_SPEC;
    pub type Stcnddie = crate::EnumBitfieldStruct<u8, Stcnddie_SPEC>;
    impl Stcnddie {
        #[doc = "Disables START Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables START Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddie_SPEC;
    pub type Spcnddie = crate::EnumBitfieldStruct<u8, Spcnddie_SPEC>;
    impl Spcnddie {
        #[doc = "Disables STOP Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables STOP Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdie_SPEC;
    pub type Hdrexdie = crate::EnumBitfieldStruct<u8, Hdrexdie_SPEC>;
    impl Hdrexdie {
        #[doc = "Disables HDR Exit Pattern Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables HDR Exit Pattern Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdie_SPEC;
    pub type Nackdie = crate::EnumBitfieldStruct<u8, Nackdie_SPEC>;
    impl Nackdie {
        #[doc = "Disables NACK Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables NACK Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendie_SPEC;
    pub type Tendie = crate::EnumBitfieldStruct<u8, Tendie_SPEC>;
    impl Tendie {
        #[doc = "Disables Transmit End Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transmit End Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alie_SPEC;
    pub type Alie = crate::EnumBitfieldStruct<u8, Alie_SPEC>;
    impl Alie {
        #[doc = "Disables Arbitration Lost Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Arbitration Lost Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todie_SPEC;
    pub type Todie = crate::EnumBitfieldStruct<u8, Todie_SPEC>;
    impl Todie {
        #[doc = "Disables Timeout Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Timeout Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddie_SPEC;
    pub type Wucnddie = crate::EnumBitfieldStruct<u8, Wucnddie_SPEC>;
    impl Wucnddie {
        #[doc = "Disables Wake-Up Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Wake-Up Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BieHaL_SPEC;
impl crate::sealed::RegSpec for BieHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Interrupt Enable Register"]
pub type BieHaL = crate::RegValueT<BieHaL_SPEC>;

impl BieHaL {
    #[doc = "START Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn stcnddie(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bie_ha_l::Stcnddie,
        BieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bie_ha_l::Stcnddie,
            BieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "STOP Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn spcnddie(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bie_ha_l::Spcnddie,
        BieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bie_ha_l::Spcnddie,
            BieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR Exit Pattern Detection Interrupt Enable"]
    #[inline(always)]
    pub fn hdrexdie(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bie_ha_l::Hdrexdie,
        BieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bie_ha_l::Hdrexdie,
            BieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "NACK Detection Interrupt Enable"]
    #[inline(always)]
    pub fn nackdie(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bie_ha_l::Nackdie, BieHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bie_ha_l::Nackdie,
            BieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Transmit End Interrupt Enable"]
    #[inline(always)]
    pub fn tendie(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bie_ha_l::Tendie, BieHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0x1,1,0,bie_ha_l::Tendie, BieHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BieHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BieHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BieHaL {
    #[inline(always)]
    fn default() -> BieHaL {
        <crate::RegValueT<BieHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bie_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddie_SPEC;
    pub type Stcnddie = crate::EnumBitfieldStruct<u8, Stcnddie_SPEC>;
    impl Stcnddie {
        #[doc = "Disables START Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables START Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddie_SPEC;
    pub type Spcnddie = crate::EnumBitfieldStruct<u8, Spcnddie_SPEC>;
    impl Spcnddie {
        #[doc = "Disables STOP Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables STOP Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdie_SPEC;
    pub type Hdrexdie = crate::EnumBitfieldStruct<u8, Hdrexdie_SPEC>;
    impl Hdrexdie {
        #[doc = "Disables HDR Exit Pattern Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables HDR Exit Pattern Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdie_SPEC;
    pub type Nackdie = crate::EnumBitfieldStruct<u8, Nackdie_SPEC>;
    impl Nackdie {
        #[doc = "Disables NACK Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables NACK Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendie_SPEC;
    pub type Tendie = crate::EnumBitfieldStruct<u8, Tendie_SPEC>;
    impl Tendie {
        #[doc = "Disables Transmit End Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transmit End Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BieByLl_SPEC;
impl crate::sealed::RegSpec for BieByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Interrupt Enable Register"]
pub type BieByLl = crate::RegValueT<BieByLl_SPEC>;

impl BieByLl {
    #[doc = "START Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn stcnddie(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bie_by_ll::Stcnddie,
        BieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bie_by_ll::Stcnddie,
            BieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "STOP Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn spcnddie(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bie_by_ll::Spcnddie,
        BieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bie_by_ll::Spcnddie,
            BieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR Exit Pattern Detection Interrupt Enable"]
    #[inline(always)]
    pub fn hdrexdie(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bie_by_ll::Hdrexdie,
        BieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bie_by_ll::Hdrexdie,
            BieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "NACK Detection Interrupt Enable"]
    #[inline(always)]
    pub fn nackdie(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bie_by_ll::Nackdie,
        BieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bie_by_ll::Nackdie,
            BieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BieByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BieByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BieByLl {
    #[inline(always)]
    fn default() -> BieByLl {
        <crate::RegValueT<BieByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bie_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddie_SPEC;
    pub type Stcnddie = crate::EnumBitfieldStruct<u8, Stcnddie_SPEC>;
    impl Stcnddie {
        #[doc = "Disables START Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables START Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddie_SPEC;
    pub type Spcnddie = crate::EnumBitfieldStruct<u8, Spcnddie_SPEC>;
    impl Spcnddie {
        #[doc = "Disables STOP Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables STOP Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdie_SPEC;
    pub type Hdrexdie = crate::EnumBitfieldStruct<u8, Hdrexdie_SPEC>;
    impl Hdrexdie {
        #[doc = "Disables HDR Exit Pattern Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables HDR Exit Pattern Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdie_SPEC;
    pub type Nackdie = crate::EnumBitfieldStruct<u8, Nackdie_SPEC>;
    impl Nackdie {
        #[doc = "Disables NACK Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables NACK Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BieByLh_SPEC;
impl crate::sealed::RegSpec for BieByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Interrupt Enable Register"]
pub type BieByLh = crate::RegValueT<BieByLh_SPEC>;

impl BieByLh {
    #[doc = "Transmit End Interrupt Enable"]
    #[inline(always)]
    pub fn tendie(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bie_by_lh::Tendie,
        BieByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bie_by_lh::Tendie,
            BieByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BieByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BieByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BieByLh {
    #[inline(always)]
    fn default() -> BieByLh {
        <crate::RegValueT<BieByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bie_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendie_SPEC;
    pub type Tendie = crate::EnumBitfieldStruct<u8, Tendie_SPEC>;
    impl Tendie {
        #[doc = "Disables Transmit End Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transmit End Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BieHaH_SPEC;
impl crate::sealed::RegSpec for BieHaH_SPEC {
    type DataType = u16;
}
#[doc = "Bus Interrupt Enable Register"]
pub type BieHaH = crate::RegValueT<BieHaH_SPEC>;

impl BieHaH {
    #[doc = "Arbitration Lost Interrupt Enable"]
    #[inline(always)]
    pub fn alie(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bie_ha_h::Alie, BieHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,bie_ha_h::Alie, BieHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Detection Interrupt Enable"]
    #[inline(always)]
    pub fn todie(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bie_ha_h::Todie, BieHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,bie_ha_h::Todie, BieHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Wake-Up Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn wucnddie(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        bie_ha_h::Wucnddie,
        BieHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            bie_ha_h::Wucnddie,
            BieHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BieHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BieHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BieHaH {
    #[inline(always)]
    fn default() -> BieHaH {
        <crate::RegValueT<BieHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bie_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alie_SPEC;
    pub type Alie = crate::EnumBitfieldStruct<u8, Alie_SPEC>;
    impl Alie {
        #[doc = "Disables Arbitration Lost Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Arbitration Lost Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todie_SPEC;
    pub type Todie = crate::EnumBitfieldStruct<u8, Todie_SPEC>;
    impl Todie {
        #[doc = "Disables Timeout Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Timeout Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddie_SPEC;
    pub type Wucnddie = crate::EnumBitfieldStruct<u8, Wucnddie_SPEC>;
    impl Wucnddie {
        #[doc = "Disables Wake-Up Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Wake-Up Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BieByHl_SPEC;
impl crate::sealed::RegSpec for BieByHl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Interrupt Enable Register"]
pub type BieByHl = crate::RegValueT<BieByHl_SPEC>;

impl BieByHl {
    #[doc = "Arbitration Lost Interrupt Enable"]
    #[inline(always)]
    pub fn alie(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bie_by_hl::Alie, BieByHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,bie_by_hl::Alie, BieByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Timeout Detection Interrupt Enable"]
    #[inline(always)]
    pub fn todie(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bie_by_hl::Todie, BieByHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bie_by_hl::Todie,
            BieByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BieByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BieByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BieByHl {
    #[inline(always)]
    fn default() -> BieByHl {
        <crate::RegValueT<BieByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bie_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alie_SPEC;
    pub type Alie = crate::EnumBitfieldStruct<u8, Alie_SPEC>;
    impl Alie {
        #[doc = "Disables Arbitration Lost Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Arbitration Lost Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todie_SPEC;
    pub type Todie = crate::EnumBitfieldStruct<u8, Todie_SPEC>;
    impl Todie {
        #[doc = "Disables Timeout Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Timeout Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BieByHh_SPEC;
impl crate::sealed::RegSpec for BieByHh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Interrupt Enable Register"]
pub type BieByHh = crate::RegValueT<BieByHh_SPEC>;

impl BieByHh {
    #[doc = "Wake-Up Condition Detection Interrupt Enable"]
    #[inline(always)]
    pub fn wucnddie(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bie_by_hh::Wucnddie,
        BieByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bie_by_hh::Wucnddie,
            BieByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BieByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BieByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for BieByHh {
    #[inline(always)]
    fn default() -> BieByHh {
        <crate::RegValueT<BieByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bie_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddie_SPEC;
    pub type Wucnddie = crate::EnumBitfieldStruct<u8, Wucnddie_SPEC>;
    impl Wucnddie {
        #[doc = "Disables Wake-Up Condition Detection Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Wake-Up Condition Detection Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bstfc_SPEC;
impl crate::sealed::RegSpec for Bstfc_SPEC {
    type DataType = u32;
}
#[doc = "Bus Status Force Register"]
pub type Bstfc = crate::RegValueT<Bstfc_SPEC>;

impl Bstfc {
    #[doc = "START Condition Detection Force"]
    #[inline(always)]
    pub fn stcnddfc(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bstfc::Stcnddfc, Bstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<0,0x1,1,0,bstfc::Stcnddfc, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "STOP Condition Detection Force"]
    #[inline(always)]
    pub fn spcnddfc(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, bstfc::Spcnddfc, Bstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<1,0x1,1,0,bstfc::Spcnddfc, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "HDR Exit Pattern Detection Force"]
    #[inline(always)]
    pub fn hdrexdfc(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, bstfc::Hdrexdfc, Bstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<2,0x1,1,0,bstfc::Hdrexdfc, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "NACK Detection Force"]
    #[inline(always)]
    pub fn nackdfc(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, bstfc::Nackdfc, Bstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<4,0x1,1,0,bstfc::Nackdfc, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Transmit End Force"]
    #[inline(always)]
    pub fn tendfc(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, bstfc::Tendfc, Bstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<8,0x1,1,0,bstfc::Tendfc, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Arbitration Lost Force"]
    #[inline(always)]
    pub fn alfc(
        self,
    ) -> crate::common::RegisterField<16, 0x1, 1, 0, bstfc::Alfc, Bstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<16,0x1,1,0,bstfc::Alfc, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Timeout Detection Force"]
    #[inline(always)]
    pub fn todfc(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, bstfc::Todfc, Bstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<20,0x1,1,0,bstfc::Todfc, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Wake-Up Condition Detection Force"]
    #[inline(always)]
    pub fn wucnddfc(
        self,
    ) -> crate::common::RegisterField<24, 0x1, 1, 0, bstfc::Wucnddfc, Bstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<24,0x1,1,0,bstfc::Wucnddfc, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<25, 0x7f, 1, 0, u8, Bstfc_SPEC, crate::common::W> {
        crate::common::RegisterField::<25,0x7f,1,0,u8, Bstfc_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Bstfc {
    #[inline(always)]
    fn default() -> Bstfc {
        <crate::RegValueT<Bstfc_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bstfc {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddfc_SPEC;
    pub type Stcnddfc = crate::EnumBitfieldStruct<u8, Stcnddfc_SPEC>;
    impl Stcnddfc {
        #[doc = "not Force START Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force START Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddfc_SPEC;
    pub type Spcnddfc = crate::EnumBitfieldStruct<u8, Spcnddfc_SPEC>;
    impl Spcnddfc {
        #[doc = "not Force STOP Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force STOP Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdfc_SPEC;
    pub type Hdrexdfc = crate::EnumBitfieldStruct<u8, Hdrexdfc_SPEC>;
    impl Hdrexdfc {
        #[doc = "not Force HDR Exit Pattern Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force HDR Exit Pattern Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdfc_SPEC;
    pub type Nackdfc = crate::EnumBitfieldStruct<u8, Nackdfc_SPEC>;
    impl Nackdfc {
        #[doc = "not Force NACK Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force NACK Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendfc_SPEC;
    pub type Tendfc = crate::EnumBitfieldStruct<u8, Tendfc_SPEC>;
    impl Tendfc {
        #[doc = "not Force Transmit End Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transmit End Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alfc_SPEC;
    pub type Alfc = crate::EnumBitfieldStruct<u8, Alfc_SPEC>;
    impl Alfc {
        #[doc = "not Force Arbitration Lost Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Arbitration Lost Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todfc_SPEC;
    pub type Todfc = crate::EnumBitfieldStruct<u8, Todfc_SPEC>;
    impl Todfc {
        #[doc = "not Force Timeout Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Timeout Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddfc_SPEC;
    pub type Wucnddfc = crate::EnumBitfieldStruct<u8, Wucnddfc_SPEC>;
    impl Wucnddfc {
        #[doc = "not Force Wake-Up Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Wake-Up Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstfcHaL_SPEC;
impl crate::sealed::RegSpec for BstfcHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Status Force Register"]
pub type BstfcHaL = crate::RegValueT<BstfcHaL_SPEC>;

impl BstfcHaL {
    #[doc = "START Condition Detection Force"]
    #[inline(always)]
    pub fn stcnddfc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bstfc_ha_l::Stcnddfc,
        BstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bstfc_ha_l::Stcnddfc,
            BstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "STOP Condition Detection Force"]
    #[inline(always)]
    pub fn spcnddfc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bstfc_ha_l::Spcnddfc,
        BstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bstfc_ha_l::Spcnddfc,
            BstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "HDR Exit Pattern Detection Force"]
    #[inline(always)]
    pub fn hdrexdfc(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bstfc_ha_l::Hdrexdfc,
        BstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bstfc_ha_l::Hdrexdfc,
            BstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "NACK Detection Force"]
    #[inline(always)]
    pub fn nackdfc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bstfc_ha_l::Nackdfc,
        BstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bstfc_ha_l::Nackdfc,
            BstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Transmit End Force"]
    #[inline(always)]
    pub fn tendfc(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        bstfc_ha_l::Tendfc,
        BstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            bstfc_ha_l::Tendfc,
            BstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BstfcHaL_SPEC, crate::common::W> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BstfcHaL_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for BstfcHaL {
    #[inline(always)]
    fn default() -> BstfcHaL {
        <crate::RegValueT<BstfcHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bstfc_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddfc_SPEC;
    pub type Stcnddfc = crate::EnumBitfieldStruct<u8, Stcnddfc_SPEC>;
    impl Stcnddfc {
        #[doc = "not Force START Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force START Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddfc_SPEC;
    pub type Spcnddfc = crate::EnumBitfieldStruct<u8, Spcnddfc_SPEC>;
    impl Spcnddfc {
        #[doc = "not Force STOP Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force STOP Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdfc_SPEC;
    pub type Hdrexdfc = crate::EnumBitfieldStruct<u8, Hdrexdfc_SPEC>;
    impl Hdrexdfc {
        #[doc = "not Force HDR Exit Pattern Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force HDR Exit Pattern Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdfc_SPEC;
    pub type Nackdfc = crate::EnumBitfieldStruct<u8, Nackdfc_SPEC>;
    impl Nackdfc {
        #[doc = "not Force NACK Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force NACK Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendfc_SPEC;
    pub type Tendfc = crate::EnumBitfieldStruct<u8, Tendfc_SPEC>;
    impl Tendfc {
        #[doc = "not Force Transmit End Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transmit End Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstfcByLl_SPEC;
impl crate::sealed::RegSpec for BstfcByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Force Register"]
pub type BstfcByLl = crate::RegValueT<BstfcByLl_SPEC>;

impl BstfcByLl {
    #[doc = "START Condition Detection Force"]
    #[inline(always)]
    pub fn stcnddfc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bstfc_by_ll::Stcnddfc,
        BstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bstfc_by_ll::Stcnddfc,
            BstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "STOP Condition Detection Force"]
    #[inline(always)]
    pub fn spcnddfc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bstfc_by_ll::Spcnddfc,
        BstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bstfc_by_ll::Spcnddfc,
            BstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "HDR Exit Pattern Detection Force"]
    #[inline(always)]
    pub fn hdrexdfc(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bstfc_by_ll::Hdrexdfc,
        BstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bstfc_by_ll::Hdrexdfc,
            BstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "NACK Detection Force"]
    #[inline(always)]
    pub fn nackdfc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bstfc_by_ll::Nackdfc,
        BstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bstfc_by_ll::Nackdfc,
            BstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BstfcByLl_SPEC, crate::common::W> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BstfcByLl_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for BstfcByLl {
    #[inline(always)]
    fn default() -> BstfcByLl {
        <crate::RegValueT<BstfcByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bstfc_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stcnddfc_SPEC;
    pub type Stcnddfc = crate::EnumBitfieldStruct<u8, Stcnddfc_SPEC>;
    impl Stcnddfc {
        #[doc = "not Force START Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force START Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spcnddfc_SPEC;
    pub type Spcnddfc = crate::EnumBitfieldStruct<u8, Spcnddfc_SPEC>;
    impl Spcnddfc {
        #[doc = "not Force STOP Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force STOP Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hdrexdfc_SPEC;
    pub type Hdrexdfc = crate::EnumBitfieldStruct<u8, Hdrexdfc_SPEC>;
    impl Hdrexdfc {
        #[doc = "not Force HDR Exit Pattern Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force HDR Exit Pattern Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nackdfc_SPEC;
    pub type Nackdfc = crate::EnumBitfieldStruct<u8, Nackdfc_SPEC>;
    impl Nackdfc {
        #[doc = "not Force NACK Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force NACK Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstfcByLh_SPEC;
impl crate::sealed::RegSpec for BstfcByLh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Force Register"]
pub type BstfcByLh = crate::RegValueT<BstfcByLh_SPEC>;

impl BstfcByLh {
    #[doc = "Transmit End Force"]
    #[inline(always)]
    pub fn tendfc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bstfc_by_lh::Tendfc,
        BstfcByLh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bstfc_by_lh::Tendfc,
            BstfcByLh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BstfcByLh_SPEC, crate::common::W> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BstfcByLh_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for BstfcByLh {
    #[inline(always)]
    fn default() -> BstfcByLh {
        <crate::RegValueT<BstfcByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bstfc_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tendfc_SPEC;
    pub type Tendfc = crate::EnumBitfieldStruct<u8, Tendfc_SPEC>;
    impl Tendfc {
        #[doc = "not Force Transmit End Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transmit End Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstfcHaH_SPEC;
impl crate::sealed::RegSpec for BstfcHaH_SPEC {
    type DataType = u16;
}
#[doc = "Bus Status Force Register"]
pub type BstfcHaH = crate::RegValueT<BstfcHaH_SPEC>;

impl BstfcHaH {
    #[doc = "Arbitration Lost Force"]
    #[inline(always)]
    pub fn alfc(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bstfc_ha_h::Alfc, BstfcHaH_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bstfc_ha_h::Alfc,
            BstfcHaH_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Timeout Detection Force"]
    #[inline(always)]
    pub fn todfc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bstfc_ha_h::Todfc,
        BstfcHaH_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bstfc_ha_h::Todfc,
            BstfcHaH_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Wake-Up Condition Detection Force"]
    #[inline(always)]
    pub fn wucnddfc(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        bstfc_ha_h::Wucnddfc,
        BstfcHaH_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            bstfc_ha_h::Wucnddfc,
            BstfcHaH_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, BstfcHaH_SPEC, crate::common::W> {
        crate::common::RegisterField::<9,0x7f,1,0,u8, BstfcHaH_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for BstfcHaH {
    #[inline(always)]
    fn default() -> BstfcHaH {
        <crate::RegValueT<BstfcHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bstfc_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alfc_SPEC;
    pub type Alfc = crate::EnumBitfieldStruct<u8, Alfc_SPEC>;
    impl Alfc {
        #[doc = "not Force Arbitration Lost Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Arbitration Lost Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todfc_SPEC;
    pub type Todfc = crate::EnumBitfieldStruct<u8, Todfc_SPEC>;
    impl Todfc {
        #[doc = "not Force Timeout Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Timeout Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddfc_SPEC;
    pub type Wucnddfc = crate::EnumBitfieldStruct<u8, Wucnddfc_SPEC>;
    impl Wucnddfc {
        #[doc = "not Force Wake-Up Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Wake-Up Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstfcByHl_SPEC;
impl crate::sealed::RegSpec for BstfcByHl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Force Register"]
pub type BstfcByHl = crate::RegValueT<BstfcByHl_SPEC>;

impl BstfcByHl {
    #[doc = "Arbitration Lost Force"]
    #[inline(always)]
    pub fn alfc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bstfc_by_hl::Alfc,
        BstfcByHl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bstfc_by_hl::Alfc,
            BstfcByHl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Timeout Detection Force"]
    #[inline(always)]
    pub fn todfc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        bstfc_by_hl::Todfc,
        BstfcByHl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            bstfc_by_hl::Todfc,
            BstfcByHl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BstfcByHl_SPEC, crate::common::W> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BstfcByHl_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for BstfcByHl {
    #[inline(always)]
    fn default() -> BstfcByHl {
        <crate::RegValueT<BstfcByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bstfc_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Alfc_SPEC;
    pub type Alfc = crate::EnumBitfieldStruct<u8, Alfc_SPEC>;
    impl Alfc {
        #[doc = "not Force Arbitration Lost Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Arbitration Lost Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Todfc_SPEC;
    pub type Todfc = crate::EnumBitfieldStruct<u8, Todfc_SPEC>;
    impl Todfc {
        #[doc = "not Force Timeout Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Timeout Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BstfcByHh_SPEC;
impl crate::sealed::RegSpec for BstfcByHh_SPEC {
    type DataType = u8;
}
#[doc = "Bus Status Force Register"]
pub type BstfcByHh = crate::RegValueT<BstfcByHh_SPEC>;

impl BstfcByHh {
    #[doc = "Wake-Up Condition Detection Force"]
    #[inline(always)]
    pub fn wucnddfc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bstfc_by_hh::Wucnddfc,
        BstfcByHh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bstfc_by_hh::Wucnddfc,
            BstfcByHh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, BstfcByHh_SPEC, crate::common::W> {
        crate::common::RegisterField::<1,0x7f,1,0,u8, BstfcByHh_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for BstfcByHh {
    #[inline(always)]
    fn default() -> BstfcByHh {
        <crate::RegValueT<BstfcByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bstfc_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wucnddfc_SPEC;
    pub type Wucnddfc = crate::EnumBitfieldStruct<u8, Wucnddfc_SPEC>;
    impl Wucnddfc {
        #[doc = "not Force Wake-Up Condition Detection Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Wake-Up Condition Detection Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntst_SPEC;
impl crate::sealed::RegSpec for Ntst_SPEC {
    type DataType = u32;
}
#[doc = "Normal Transfer Status Register"]
pub type Ntst = crate::RegValueT<Ntst_SPEC>;

impl Ntst {
    #[doc = "Normal Tx Data Buffer Empty Flag 0"]
    #[inline(always)]
    pub fn tdbef0(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, ntst::Tdbef0, Ntst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,ntst::Tdbef0, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Rx Data Buffer Full Flag 0"]
    #[inline(always)]
    pub fn rdbff0(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, ntst::Rdbff0, Ntst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,ntst::Rdbff0, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal IBI Queue Empty/Full Flag"]
    #[inline(always)]
    pub fn ibiqeff(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, ntst::Ibiqeff, Ntst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,ntst::Ibiqeff, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Command Queue Empty Flag"]
    #[inline(always)]
    pub fn cmdqef(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, ntst::Cmdqef, Ntst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1,1,0,ntst::Cmdqef, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Response Queue Full Flag"]
    #[inline(always)]
    pub fn rspqff(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, ntst::Rspqff, Ntst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,ntst::Rspqff, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Transfer Abort Flag"]
    #[inline(always)]
    pub fn tabtf(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, ntst::Tabtf, Ntst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x1,1,0,ntst::Tabtf, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Transfer Error Flag"]
    #[inline(always)]
    pub fn tef(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, ntst::Tef, Ntst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x1,1,0,ntst::Tef, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Receive Status Queue Full Flag"]
    #[inline(always)]
    pub fn rsqff(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, ntst::Rsqff, Ntst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<20,0x1,1,0,ntst::Rsqff, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000. The write value should be 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<21, 0x7ff, 1, 0, u16, Ntst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<21,0x7ff,1,0,u16, Ntst_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntst {
    #[inline(always)]
    fn default() -> Ntst {
        <crate::RegValueT<Ntst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbef0_SPEC;
    pub type Tdbef0 = crate::EnumBitfieldStruct<u8, Tdbef0_SPEC>;
    impl Tdbef0 {
        #[doc = "Normal Tx Data Buffer 0 contains transmit data"]
        pub const _0: Self = Self::new(0);
        #[doc = "Normal Tx Data Buffer 0 contains no transmit data."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of empties in the Normal Tx Data Buffer 0 is < the NTBTHCTL0.TXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of empties in the Normal Tx Data Buffer 0 is >= the NTBTHCTL0.TXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbff0_SPEC;
    pub type Rdbff0 = crate::EnumBitfieldStruct<u8, Rdbff0_SPEC>;
    impl Rdbff0 {
        #[doc = "Normal Rx Data Buffer0 contains no receive data."]
        pub const _0: Self = Self::new(0);
        #[doc = "Normal Rx Data Buffer0 contains receive data."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of entries in the Normal Rx Data Buffer 0 is < the NTBTHCTL0.RXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of entries in the Normal Rx Data Buffer 0 is >= the NTBTHCTL0.RXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqeff_SPEC;
    pub type Ibiqeff = crate::EnumBitfieldStruct<u8, Ibiqeff_SPEC>;
    impl Ibiqeff {
        #[doc = "The number of IBI Status Queue entries is <= the NQTHCTL.IBIQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Status Queue entries is > the NQTHCTL.IBIQTH threshold"]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of IBI Data Buffer empties is < the IBI Data Buffer size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Data Buffer empties is the IBI Data Buffer size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of IBI Data Buffer empties is < the NQTHCTL.IBIQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Data Buffer empties is >= the NQTHCTL.IBIQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqef_SPEC;
    pub type Cmdqef = crate::EnumBitfieldStruct<u8, Cmdqef_SPEC>;
    impl Cmdqef {
        #[doc = "The number of Command Queue empties is < the Command Queue size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is the Command Queue size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of Command Queue empties is < the NQTHCTL.CMDQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is >= the NQTHCTL.CMDQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqff_SPEC;
    pub type Rspqff = crate::EnumBitfieldStruct<u8, Rspqff_SPEC>;
    impl Rspqff {
        #[doc = "The number of Response Queue entries is <= the NQTHCTL.RSPQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Response Queue entries is > the NQTHCTL.RSPQTH threshold"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtf_SPEC;
    pub type Tabtf = crate::EnumBitfieldStruct<u8, Tabtf_SPEC>;
    impl Tabtf {
        #[doc = "Transfer Abort does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "Transfer Abort occur."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tef_SPEC;
    pub type Tef = crate::EnumBitfieldStruct<u8, Tef_SPEC>;
    impl Tef {
        #[doc = "Transfer Error does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "Transfer Error occurs."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqff_SPEC;
    pub type Rsqff = crate::EnumBitfieldStruct<u8, Rsqff_SPEC>;
    impl Rsqff {
        #[doc = "The number of Receive Status Queue entries is <= the NRQTHCTL.RSQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Receive Status Queue entries is > the NRQTHCTL.RSQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstHaL_SPEC;
impl crate::sealed::RegSpec for NtstHaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Status Register"]
pub type NtstHaL = crate::RegValueT<NtstHaL_SPEC>;

impl NtstHaL {
    #[doc = "Normal Tx Data Buffer Empty Flag 0"]
    #[inline(always)]
    pub fn tdbef0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ntst_ha_l::Tdbef0,
        NtstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ntst_ha_l::Tdbef0,
            NtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Full Flag 0"]
    #[inline(always)]
    pub fn rdbff0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntst_ha_l::Rdbff0,
        NtstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntst_ha_l::Rdbff0,
            NtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Queue Empty/Full Flag"]
    #[inline(always)]
    pub fn ibiqeff(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ntst_ha_l::Ibiqeff,
        NtstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ntst_ha_l::Ibiqeff,
            NtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Command Queue Empty Flag"]
    #[inline(always)]
    pub fn cmdqef(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ntst_ha_l::Cmdqef,
        NtstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ntst_ha_l::Cmdqef,
            NtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Full Flag"]
    #[inline(always)]
    pub fn rspqff(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntst_ha_l::Rspqff,
        NtstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntst_ha_l::Rspqff,
            NtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Abort Flag"]
    #[inline(always)]
    pub fn tabtf(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, ntst_ha_l::Tabtf, NtstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ntst_ha_l::Tabtf,
            NtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Error Flag"]
    #[inline(always)]
    pub fn tef(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, ntst_ha_l::Tef, NtstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<9,0x1,1,0,ntst_ha_l::Tef, NtstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, NtstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3f,1,0,u8, NtstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstHaL {
    #[inline(always)]
    fn default() -> NtstHaL {
        <crate::RegValueT<NtstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbef0_SPEC;
    pub type Tdbef0 = crate::EnumBitfieldStruct<u8, Tdbef0_SPEC>;
    impl Tdbef0 {
        #[doc = "Normal Tx Data Buffer 0 contains transmit data"]
        pub const _0: Self = Self::new(0);
        #[doc = "Normal Tx Data Buffer 0 contains no transmit data."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of empties in the Normal Tx Data Buffer 0 is < the NTBTHCTL0.TXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of empties in the Normal Tx Data Buffer 0 is >= the NTBTHCTL0.TXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbff0_SPEC;
    pub type Rdbff0 = crate::EnumBitfieldStruct<u8, Rdbff0_SPEC>;
    impl Rdbff0 {
        #[doc = "Normal Rx Data Buffer0 contains no receive data."]
        pub const _0: Self = Self::new(0);
        #[doc = "Normal Rx Data Buffer0 contains receive data."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of entries in the Normal Rx Data Buffer 0 is < the NTBTHCTL0.RXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of entries in the Normal Rx Data Buffer 0 is >= the NTBTHCTL0.RXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqeff_SPEC;
    pub type Ibiqeff = crate::EnumBitfieldStruct<u8, Ibiqeff_SPEC>;
    impl Ibiqeff {
        #[doc = "The number of IBI Status Queue entries is <= the NQTHCTL.IBIQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Status Queue entries is > the NQTHCTL.IBIQTH threshold"]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of IBI Data Buffer empties is < the IBI Data Buffer size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Data Buffer empties is the IBI Data Buffer size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of IBI Data Buffer empties is < the NQTHCTL.IBIQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Data Buffer empties is >= the NQTHCTL.IBIQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqef_SPEC;
    pub type Cmdqef = crate::EnumBitfieldStruct<u8, Cmdqef_SPEC>;
    impl Cmdqef {
        #[doc = "The number of Command Queue empties is < the Command Queue size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is the Command Queue size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of Command Queue empties is < the NQTHCTL.CMDQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is >= the NQTHCTL.CMDQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqff_SPEC;
    pub type Rspqff = crate::EnumBitfieldStruct<u8, Rspqff_SPEC>;
    impl Rspqff {
        #[doc = "The number of Response Queue entries is <= the NQTHCTL.RSPQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Response Queue entries is > the NQTHCTL.RSPQTH threshold"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtf_SPEC;
    pub type Tabtf = crate::EnumBitfieldStruct<u8, Tabtf_SPEC>;
    impl Tabtf {
        #[doc = "Transfer Abort does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "Transfer Abort occur."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tef_SPEC;
    pub type Tef = crate::EnumBitfieldStruct<u8, Tef_SPEC>;
    impl Tef {
        #[doc = "Transfer Error does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "Transfer Error occurs."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstByLl_SPEC;
impl crate::sealed::RegSpec for NtstByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Register"]
pub type NtstByLl = crate::RegValueT<NtstByLl_SPEC>;

impl NtstByLl {
    #[doc = "Normal Tx Data Buffer Empty Flag 0"]
    #[inline(always)]
    pub fn tdbef0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ntst_by_ll::Tdbef0,
        NtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ntst_by_ll::Tdbef0,
            NtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Full Flag 0"]
    #[inline(always)]
    pub fn rdbff0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntst_by_ll::Rdbff0,
        NtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntst_by_ll::Rdbff0,
            NtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Queue Empty/Full Flag"]
    #[inline(always)]
    pub fn ibiqeff(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ntst_by_ll::Ibiqeff,
        NtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ntst_by_ll::Ibiqeff,
            NtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Command Queue Empty Flag"]
    #[inline(always)]
    pub fn cmdqef(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ntst_by_ll::Cmdqef,
        NtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ntst_by_ll::Cmdqef,
            NtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Full Flag"]
    #[inline(always)]
    pub fn rspqff(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntst_by_ll::Rspqff,
        NtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntst_by_ll::Rspqff,
            NtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Abort Flag"]
    #[inline(always)]
    pub fn tabtf(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        ntst_by_ll::Tabtf,
        NtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ntst_by_ll::Tabtf,
            NtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, NtstByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, NtstByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstByLl {
    #[inline(always)]
    fn default() -> NtstByLl {
        <crate::RegValueT<NtstByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntst_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbef0_SPEC;
    pub type Tdbef0 = crate::EnumBitfieldStruct<u8, Tdbef0_SPEC>;
    impl Tdbef0 {
        #[doc = "Normal Tx Data Buffer 0 contains transmit data"]
        pub const _0: Self = Self::new(0);
        #[doc = "Normal Tx Data Buffer 0 contains no transmit data."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of empties in the Normal Tx Data Buffer 0 is < the NTBTHCTL0.TXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of empties in the Normal Tx Data Buffer 0 is >= the NTBTHCTL0.TXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbff0_SPEC;
    pub type Rdbff0 = crate::EnumBitfieldStruct<u8, Rdbff0_SPEC>;
    impl Rdbff0 {
        #[doc = "Normal Rx Data Buffer0 contains no receive data."]
        pub const _0: Self = Self::new(0);
        #[doc = "Normal Rx Data Buffer0 contains receive data."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of entries in the Normal Rx Data Buffer 0 is < the NTBTHCTL0.RXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of entries in the Normal Rx Data Buffer 0 is >= the NTBTHCTL0.RXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqeff_SPEC;
    pub type Ibiqeff = crate::EnumBitfieldStruct<u8, Ibiqeff_SPEC>;
    impl Ibiqeff {
        #[doc = "The number of IBI Status Queue entries is <= the NQTHCTL.IBIQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Status Queue entries is > the NQTHCTL.IBIQTH threshold"]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of IBI Data Buffer empties is < the IBI Data Buffer size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Data Buffer empties is the IBI Data Buffer size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of IBI Data Buffer empties is < the NQTHCTL.IBIQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of IBI Data Buffer empties is >= the NQTHCTL.IBIQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqef_SPEC;
    pub type Cmdqef = crate::EnumBitfieldStruct<u8, Cmdqef_SPEC>;
    impl Cmdqef {
        #[doc = "The number of Command Queue empties is < the Command Queue size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is the Command Queue size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of Command Queue empties is < the NQTHCTL.CMDQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is >= the NQTHCTL.CMDQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqff_SPEC;
    pub type Rspqff = crate::EnumBitfieldStruct<u8, Rspqff_SPEC>;
    impl Rspqff {
        #[doc = "The number of Response Queue entries is <= the NQTHCTL.RSPQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Response Queue entries is > the NQTHCTL.RSPQTH threshold"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtf_SPEC;
    pub type Tabtf = crate::EnumBitfieldStruct<u8, Tabtf_SPEC>;
    impl Tabtf {
        #[doc = "Transfer Abort does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "Transfer Abort occur."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstByLh_SPEC;
impl crate::sealed::RegSpec for NtstByLh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Register"]
pub type NtstByLh = crate::RegValueT<NtstByLh_SPEC>;

impl NtstByLh {
    #[doc = "Normal Transfer Error Flag"]
    #[inline(always)]
    pub fn tef(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, ntst_by_lh::Tef, NtstByLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntst_by_lh::Tef,
            NtstByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, NtstByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, NtstByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstByLh {
    #[inline(always)]
    fn default() -> NtstByLh {
        <crate::RegValueT<NtstByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntst_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tef_SPEC;
    pub type Tef = crate::EnumBitfieldStruct<u8, Tef_SPEC>;
    impl Tef {
        #[doc = "Transfer Error does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "Transfer Error occurs."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstHaH_SPEC;
impl crate::sealed::RegSpec for NtstHaH_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Status Register"]
pub type NtstHaH = crate::RegValueT<NtstHaH_SPEC>;

impl NtstHaH {
    #[doc = "Normal Receive Status Queue Full Flag"]
    #[inline(always)]
    pub fn rsqff(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, ntst_ha_h::Rsqff, NtstHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntst_ha_h::Rsqff,
            NtstHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000000. The write value should be 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ff, 1, 0, u16, NtstHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7ff,1,0,u16, NtstHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstHaH {
    #[inline(always)]
    fn default() -> NtstHaH {
        <crate::RegValueT<NtstHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntst_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqff_SPEC;
    pub type Rsqff = crate::EnumBitfieldStruct<u8, Rsqff_SPEC>;
    impl Rsqff {
        #[doc = "The number of Receive Status Queue entries is <= the NRQTHCTL.RSQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Receive Status Queue entries is > the NRQTHCTL.RSQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstByHl_SPEC;
impl crate::sealed::RegSpec for NtstByHl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Register"]
pub type NtstByHl = crate::RegValueT<NtstByHl_SPEC>;

impl NtstByHl {
    #[doc = "Normal Receive Status Queue Full Flag"]
    #[inline(always)]
    pub fn rsqff(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntst_by_hl::Rsqff,
        NtstByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntst_by_hl::Rsqff,
            NtstByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, NtstByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, NtstByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstByHl {
    #[inline(always)]
    fn default() -> NtstByHl {
        <crate::RegValueT<NtstByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntst_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqff_SPEC;
    pub type Rsqff = crate::EnumBitfieldStruct<u8, Rsqff_SPEC>;
    impl Rsqff {
        #[doc = "The number of Receive Status Queue entries is <= the NRQTHCTL.RSQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Receive Status Queue entries is > the NRQTHCTL.RSQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntste_SPEC;
impl crate::sealed::RegSpec for Ntste_SPEC {
    type DataType = u32;
}
#[doc = "Normal Transfer Status Enable Register"]
pub type Ntste = crate::RegValueT<Ntste_SPEC>;

impl Ntste {
    #[doc = "Normal Tx Data Buffer Empty Enable 0"]
    #[inline(always)]
    pub fn tdbee0(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, ntste::Tdbee0, Ntste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,ntste::Tdbee0, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Rx Data Buffer Full Enable 0"]
    #[inline(always)]
    pub fn rdbfe0(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, ntste::Rdbfe0, Ntste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,ntste::Rdbfe0, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal IBI Queue Empty/Full Enable"]
    #[inline(always)]
    pub fn ibiqefe(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, ntste::Ibiqefe, Ntste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,ntste::Ibiqefe, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Command Queue Empty Enable"]
    #[inline(always)]
    pub fn cmdqee(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, ntste::Cmdqee, Ntste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1,1,0,ntste::Cmdqee, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Response Queue Full Enable"]
    #[inline(always)]
    pub fn rspqfe(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, ntste::Rspqfe, Ntste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,ntste::Rspqfe, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Transfer Abort Enable"]
    #[inline(always)]
    pub fn tabte(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, ntste::Tabte, Ntste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x1,1,0,ntste::Tabte, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Transfer Error Enable"]
    #[inline(always)]
    pub fn tee(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, ntste::Tee, Ntste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x1,1,0,ntste::Tee, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Receive Status Queue Full Enable"]
    #[inline(always)]
    pub fn rsqfe(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, ntste::Rsqfe, Ntste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<20,0x1,1,0,ntste::Rsqfe, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000. The write value should be 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<21, 0x7ff, 1, 0, u16, Ntste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<21,0x7ff,1,0,u16, Ntste_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntste {
    #[inline(always)]
    fn default() -> Ntste {
        <crate::RegValueT<Ntste_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntste {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbee0_SPEC;
    pub type Tdbee0 = crate::EnumBitfieldStruct<u8, Tdbee0_SPEC>;
    impl Tdbee0 {
        #[doc = "Disables Tx0 Data Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Tx0 Data Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfe0_SPEC;
    pub type Rdbfe0 = crate::EnumBitfieldStruct<u8, Rdbfe0_SPEC>;
    impl Rdbfe0 {
        #[doc = "Disables Rx0 Data Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Rx0 Data Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqefe_SPEC;
    pub type Ibiqefe = crate::EnumBitfieldStruct<u8, Ibiqefe_SPEC>;
    impl Ibiqefe {
        #[doc = "Disables IBI Status Buffer Empty/Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables IBI Status Buffer Empty/Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqee_SPEC;
    pub type Cmdqee = crate::EnumBitfieldStruct<u8, Cmdqee_SPEC>;
    impl Cmdqee {
        #[doc = "Disables Command Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Command Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfe_SPEC;
    pub type Rspqfe = crate::EnumBitfieldStruct<u8, Rspqfe_SPEC>;
    impl Rspqfe {
        #[doc = "Disables Response Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Response Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabte_SPEC;
    pub type Tabte = crate::EnumBitfieldStruct<u8, Tabte_SPEC>;
    impl Tabte {
        #[doc = "Disables Transfer Abort Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Abort Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tee_SPEC;
    pub type Tee = crate::EnumBitfieldStruct<u8, Tee_SPEC>;
    impl Tee {
        #[doc = "Disables Transfer Error Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Error Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqfe_SPEC;
    pub type Rsqfe = crate::EnumBitfieldStruct<u8, Rsqfe_SPEC>;
    impl Rsqfe {
        #[doc = "Disables Receive Status Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Receive Status Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtsteHaL_SPEC;
impl crate::sealed::RegSpec for NtsteHaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Status Enable Register"]
pub type NtsteHaL = crate::RegValueT<NtsteHaL_SPEC>;

impl NtsteHaL {
    #[doc = "Normal Tx Data Buffer Empty Enable 0"]
    #[inline(always)]
    pub fn tdbee0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ntste_ha_l::Tdbee0,
        NtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ntste_ha_l::Tdbee0,
            NtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Full Enable 0"]
    #[inline(always)]
    pub fn rdbfe0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntste_ha_l::Rdbfe0,
        NtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntste_ha_l::Rdbfe0,
            NtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Queue Empty/Full Enable"]
    #[inline(always)]
    pub fn ibiqefe(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ntste_ha_l::Ibiqefe,
        NtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ntste_ha_l::Ibiqefe,
            NtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Command Queue Empty Enable"]
    #[inline(always)]
    pub fn cmdqee(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ntste_ha_l::Cmdqee,
        NtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ntste_ha_l::Cmdqee,
            NtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Full Enable"]
    #[inline(always)]
    pub fn rspqfe(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntste_ha_l::Rspqfe,
        NtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntste_ha_l::Rspqfe,
            NtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Abort Enable"]
    #[inline(always)]
    pub fn tabte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        ntste_ha_l::Tabte,
        NtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ntste_ha_l::Tabte,
            NtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Error Enable"]
    #[inline(always)]
    pub fn tee(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, ntste_ha_l::Tee, NtsteHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            ntste_ha_l::Tee,
            NtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, NtsteHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3f,1,0,u8, NtsteHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtsteHaL {
    #[inline(always)]
    fn default() -> NtsteHaL {
        <crate::RegValueT<NtsteHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntste_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbee0_SPEC;
    pub type Tdbee0 = crate::EnumBitfieldStruct<u8, Tdbee0_SPEC>;
    impl Tdbee0 {
        #[doc = "Disables Tx0 Data Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Tx0 Data Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfe0_SPEC;
    pub type Rdbfe0 = crate::EnumBitfieldStruct<u8, Rdbfe0_SPEC>;
    impl Rdbfe0 {
        #[doc = "Disables Rx0 Data Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Rx0 Data Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqefe_SPEC;
    pub type Ibiqefe = crate::EnumBitfieldStruct<u8, Ibiqefe_SPEC>;
    impl Ibiqefe {
        #[doc = "Disables IBI Status Buffer Empty/Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables IBI Status Buffer Empty/Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqee_SPEC;
    pub type Cmdqee = crate::EnumBitfieldStruct<u8, Cmdqee_SPEC>;
    impl Cmdqee {
        #[doc = "Disables Command Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Command Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfe_SPEC;
    pub type Rspqfe = crate::EnumBitfieldStruct<u8, Rspqfe_SPEC>;
    impl Rspqfe {
        #[doc = "Disables Response Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Response Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabte_SPEC;
    pub type Tabte = crate::EnumBitfieldStruct<u8, Tabte_SPEC>;
    impl Tabte {
        #[doc = "Disables Transfer Abort Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Abort Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tee_SPEC;
    pub type Tee = crate::EnumBitfieldStruct<u8, Tee_SPEC>;
    impl Tee {
        #[doc = "Disables Transfer Error Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Error Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtsteByLl_SPEC;
impl crate::sealed::RegSpec for NtsteByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Enable Register"]
pub type NtsteByLl = crate::RegValueT<NtsteByLl_SPEC>;

impl NtsteByLl {
    #[doc = "Normal Tx Data Buffer Empty Enable 0"]
    #[inline(always)]
    pub fn tdbee0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ntste_by_ll::Tdbee0,
        NtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ntste_by_ll::Tdbee0,
            NtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Full Enable 0"]
    #[inline(always)]
    pub fn rdbfe0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntste_by_ll::Rdbfe0,
        NtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntste_by_ll::Rdbfe0,
            NtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Queue Empty/Full Enable"]
    #[inline(always)]
    pub fn ibiqefe(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ntste_by_ll::Ibiqefe,
        NtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ntste_by_ll::Ibiqefe,
            NtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Command Queue Empty Enable"]
    #[inline(always)]
    pub fn cmdqee(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ntste_by_ll::Cmdqee,
        NtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ntste_by_ll::Cmdqee,
            NtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Full Enable"]
    #[inline(always)]
    pub fn rspqfe(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntste_by_ll::Rspqfe,
        NtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntste_by_ll::Rspqfe,
            NtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Abort Enable"]
    #[inline(always)]
    pub fn tabte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        ntste_by_ll::Tabte,
        NtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ntste_by_ll::Tabte,
            NtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, NtsteByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, NtsteByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtsteByLl {
    #[inline(always)]
    fn default() -> NtsteByLl {
        <crate::RegValueT<NtsteByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntste_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbee0_SPEC;
    pub type Tdbee0 = crate::EnumBitfieldStruct<u8, Tdbee0_SPEC>;
    impl Tdbee0 {
        #[doc = "Disables Tx0 Data Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Tx0 Data Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfe0_SPEC;
    pub type Rdbfe0 = crate::EnumBitfieldStruct<u8, Rdbfe0_SPEC>;
    impl Rdbfe0 {
        #[doc = "Disables Rx0 Data Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Rx0 Data Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqefe_SPEC;
    pub type Ibiqefe = crate::EnumBitfieldStruct<u8, Ibiqefe_SPEC>;
    impl Ibiqefe {
        #[doc = "Disables IBI Status Buffer Empty/Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables IBI Status Buffer Empty/Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqee_SPEC;
    pub type Cmdqee = crate::EnumBitfieldStruct<u8, Cmdqee_SPEC>;
    impl Cmdqee {
        #[doc = "Disables Command Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Command Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfe_SPEC;
    pub type Rspqfe = crate::EnumBitfieldStruct<u8, Rspqfe_SPEC>;
    impl Rspqfe {
        #[doc = "Disables Response Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Response Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabte_SPEC;
    pub type Tabte = crate::EnumBitfieldStruct<u8, Tabte_SPEC>;
    impl Tabte {
        #[doc = "Disables Transfer Abort Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Abort Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtsteByLh_SPEC;
impl crate::sealed::RegSpec for NtsteByLh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Enable Register"]
pub type NtsteByLh = crate::RegValueT<NtsteByLh_SPEC>;

impl NtsteByLh {
    #[doc = "Normal Transfer Error Enable"]
    #[inline(always)]
    pub fn tee(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntste_by_lh::Tee,
        NtsteByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntste_by_lh::Tee,
            NtsteByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, NtsteByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, NtsteByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtsteByLh {
    #[inline(always)]
    fn default() -> NtsteByLh {
        <crate::RegValueT<NtsteByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntste_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tee_SPEC;
    pub type Tee = crate::EnumBitfieldStruct<u8, Tee_SPEC>;
    impl Tee {
        #[doc = "Disables Transfer Error Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Error Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtsteHaH_SPEC;
impl crate::sealed::RegSpec for NtsteHaH_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Status Enable Register"]
pub type NtsteHaH = crate::RegValueT<NtsteHaH_SPEC>;

impl NtsteHaH {
    #[doc = "Normal Receive Status Queue Full Enable"]
    #[inline(always)]
    pub fn rsqfe(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntste_ha_h::Rsqfe,
        NtsteHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntste_ha_h::Rsqfe,
            NtsteHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000000. The write value should be 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ff, 1, 0, u16, NtsteHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7ff,1,0,u16, NtsteHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtsteHaH {
    #[inline(always)]
    fn default() -> NtsteHaH {
        <crate::RegValueT<NtsteHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntste_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqfe_SPEC;
    pub type Rsqfe = crate::EnumBitfieldStruct<u8, Rsqfe_SPEC>;
    impl Rsqfe {
        #[doc = "Disables Receive Status Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Receive Status Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtsteByHl_SPEC;
impl crate::sealed::RegSpec for NtsteByHl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Enable Register"]
pub type NtsteByHl = crate::RegValueT<NtsteByHl_SPEC>;

impl NtsteByHl {
    #[doc = "Normal Receive Status Queue Full Enable"]
    #[inline(always)]
    pub fn rsqfe(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntste_by_hl::Rsqfe,
        NtsteByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntste_by_hl::Rsqfe,
            NtsteByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, NtsteByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, NtsteByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtsteByHl {
    #[inline(always)]
    fn default() -> NtsteByHl {
        <crate::RegValueT<NtsteByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntste_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqfe_SPEC;
    pub type Rsqfe = crate::EnumBitfieldStruct<u8, Rsqfe_SPEC>;
    impl Rsqfe {
        #[doc = "Disables Receive Status Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Receive Status Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntie_SPEC;
impl crate::sealed::RegSpec for Ntie_SPEC {
    type DataType = u32;
}
#[doc = "Normal Transfer Interrupt Enable Register"]
pub type Ntie = crate::RegValueT<Ntie_SPEC>;

impl Ntie {
    #[doc = "Normal Tx Data Buffer Empty Interrupt Enable 0"]
    #[inline(always)]
    pub fn tdbeie0(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, ntie::Tdbeie0, Ntie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,ntie::Tdbeie0, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Rx Data Buffer Full Interrupt Enable 0"]
    #[inline(always)]
    pub fn rdbfie0(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, ntie::Rdbfie0, Ntie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,ntie::Rdbfie0, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal IBI Queue Empty/Full Interrupt Enable"]
    #[inline(always)]
    pub fn ibiqefie(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, ntie::Ibiqefie, Ntie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,ntie::Ibiqefie, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Command Queue Empty Interrupt Enable"]
    #[inline(always)]
    pub fn cmdqeie(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, ntie::Cmdqeie, Ntie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1,1,0,ntie::Cmdqeie, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Response Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rspqfie(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, ntie::Rspqfie, Ntie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,ntie::Rspqfie, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Transfer Abort Interrupt Enable"]
    #[inline(always)]
    pub fn tabtie(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, ntie::Tabtie, Ntie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x1,1,0,ntie::Tabtie, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Transfer Error Interrupt Enable"]
    #[inline(always)]
    pub fn teie(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, ntie::Teie, Ntie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x1,1,0,ntie::Teie, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Normal Receive Status Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rsqfie(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, ntie::Rsqfie, Ntie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<20,0x1,1,0,ntie::Rsqfie, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000. The write value should be 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<21, 0x7ff, 1, 0, u16, Ntie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<21,0x7ff,1,0,u16, Ntie_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntie {
    #[inline(always)]
    fn default() -> Ntie {
        <crate::RegValueT<Ntie_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntie {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbeie0_SPEC;
    pub type Tdbeie0 = crate::EnumBitfieldStruct<u8, Tdbeie0_SPEC>;
    impl Tdbeie0 {
        #[doc = "Disables Tx0 Data Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Tx0 Data Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfie0_SPEC;
    pub type Rdbfie0 = crate::EnumBitfieldStruct<u8, Rdbfie0_SPEC>;
    impl Rdbfie0 {
        #[doc = "Disables Rx0 Data Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Rx0 Data Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqefie_SPEC;
    pub type Ibiqefie = crate::EnumBitfieldStruct<u8, Ibiqefie_SPEC>;
    impl Ibiqefie {
        #[doc = "Disables IBI Status Buffer Empty/Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables IBI Status Buffer Empty/Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqeie_SPEC;
    pub type Cmdqeie = crate::EnumBitfieldStruct<u8, Cmdqeie_SPEC>;
    impl Cmdqeie {
        #[doc = "Disables Command Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Command Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfie_SPEC;
    pub type Rspqfie = crate::EnumBitfieldStruct<u8, Rspqfie_SPEC>;
    impl Rspqfie {
        #[doc = "Disables Response Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Response Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtie_SPEC;
    pub type Tabtie = crate::EnumBitfieldStruct<u8, Tabtie_SPEC>;
    impl Tabtie {
        #[doc = "Disables Transfer Abort Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Abort Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Teie_SPEC;
    pub type Teie = crate::EnumBitfieldStruct<u8, Teie_SPEC>;
    impl Teie {
        #[doc = "Disables Transfer Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqfie_SPEC;
    pub type Rsqfie = crate::EnumBitfieldStruct<u8, Rsqfie_SPEC>;
    impl Rsqfie {
        #[doc = "Disables Receive Status Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Receive Status Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtieHaL_SPEC;
impl crate::sealed::RegSpec for NtieHaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Interrupt Enable Register"]
pub type NtieHaL = crate::RegValueT<NtieHaL_SPEC>;

impl NtieHaL {
    #[doc = "Normal Tx Data Buffer Empty Interrupt Enable 0"]
    #[inline(always)]
    pub fn tdbeie0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ntie_ha_l::Tdbeie0,
        NtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ntie_ha_l::Tdbeie0,
            NtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Full Interrupt Enable 0"]
    #[inline(always)]
    pub fn rdbfie0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntie_ha_l::Rdbfie0,
        NtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntie_ha_l::Rdbfie0,
            NtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Queue Empty/Full Interrupt Enable"]
    #[inline(always)]
    pub fn ibiqefie(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ntie_ha_l::Ibiqefie,
        NtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ntie_ha_l::Ibiqefie,
            NtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Command Queue Empty Interrupt Enable"]
    #[inline(always)]
    pub fn cmdqeie(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ntie_ha_l::Cmdqeie,
        NtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ntie_ha_l::Cmdqeie,
            NtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rspqfie(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntie_ha_l::Rspqfie,
        NtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntie_ha_l::Rspqfie,
            NtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Abort Interrupt Enable"]
    #[inline(always)]
    pub fn tabtie(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        ntie_ha_l::Tabtie,
        NtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ntie_ha_l::Tabtie,
            NtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Error Interrupt Enable"]
    #[inline(always)]
    pub fn teie(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, ntie_ha_l::Teie, NtieHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<9,0x1,1,0,ntie_ha_l::Teie, NtieHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, NtieHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3f,1,0,u8, NtieHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtieHaL {
    #[inline(always)]
    fn default() -> NtieHaL {
        <crate::RegValueT<NtieHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntie_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbeie0_SPEC;
    pub type Tdbeie0 = crate::EnumBitfieldStruct<u8, Tdbeie0_SPEC>;
    impl Tdbeie0 {
        #[doc = "Disables Tx0 Data Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Tx0 Data Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfie0_SPEC;
    pub type Rdbfie0 = crate::EnumBitfieldStruct<u8, Rdbfie0_SPEC>;
    impl Rdbfie0 {
        #[doc = "Disables Rx0 Data Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Rx0 Data Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqefie_SPEC;
    pub type Ibiqefie = crate::EnumBitfieldStruct<u8, Ibiqefie_SPEC>;
    impl Ibiqefie {
        #[doc = "Disables IBI Status Buffer Empty/Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables IBI Status Buffer Empty/Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqeie_SPEC;
    pub type Cmdqeie = crate::EnumBitfieldStruct<u8, Cmdqeie_SPEC>;
    impl Cmdqeie {
        #[doc = "Disables Command Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Command Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfie_SPEC;
    pub type Rspqfie = crate::EnumBitfieldStruct<u8, Rspqfie_SPEC>;
    impl Rspqfie {
        #[doc = "Disables Response Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Response Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtie_SPEC;
    pub type Tabtie = crate::EnumBitfieldStruct<u8, Tabtie_SPEC>;
    impl Tabtie {
        #[doc = "Disables Transfer Abort Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Abort Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Teie_SPEC;
    pub type Teie = crate::EnumBitfieldStruct<u8, Teie_SPEC>;
    impl Teie {
        #[doc = "Disables Transfer Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtieByLl_SPEC;
impl crate::sealed::RegSpec for NtieByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Interrupt Enable Register"]
pub type NtieByLl = crate::RegValueT<NtieByLl_SPEC>;

impl NtieByLl {
    #[doc = "Normal Tx Data Buffer Empty Interrupt Enable 0"]
    #[inline(always)]
    pub fn tdbeie0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ntie_by_ll::Tdbeie0,
        NtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ntie_by_ll::Tdbeie0,
            NtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Full Interrupt Enable 0"]
    #[inline(always)]
    pub fn rdbfie0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntie_by_ll::Rdbfie0,
        NtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntie_by_ll::Rdbfie0,
            NtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Queue Empty/Full Interrupt Enable"]
    #[inline(always)]
    pub fn ibiqefie(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ntie_by_ll::Ibiqefie,
        NtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ntie_by_ll::Ibiqefie,
            NtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Command Queue Empty Interrupt Enable"]
    #[inline(always)]
    pub fn cmdqeie(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ntie_by_ll::Cmdqeie,
        NtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ntie_by_ll::Cmdqeie,
            NtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rspqfie(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntie_by_ll::Rspqfie,
        NtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntie_by_ll::Rspqfie,
            NtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Abort Interrupt Enable"]
    #[inline(always)]
    pub fn tabtie(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        ntie_by_ll::Tabtie,
        NtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ntie_by_ll::Tabtie,
            NtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, NtieByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, NtieByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtieByLl {
    #[inline(always)]
    fn default() -> NtieByLl {
        <crate::RegValueT<NtieByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntie_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbeie0_SPEC;
    pub type Tdbeie0 = crate::EnumBitfieldStruct<u8, Tdbeie0_SPEC>;
    impl Tdbeie0 {
        #[doc = "Disables Tx0 Data Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Tx0 Data Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfie0_SPEC;
    pub type Rdbfie0 = crate::EnumBitfieldStruct<u8, Rdbfie0_SPEC>;
    impl Rdbfie0 {
        #[doc = "Disables Rx0 Data Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Rx0 Data Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqefie_SPEC;
    pub type Ibiqefie = crate::EnumBitfieldStruct<u8, Ibiqefie_SPEC>;
    impl Ibiqefie {
        #[doc = "Disables IBI Status Buffer Empty/Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables IBI Status Buffer Empty/Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqeie_SPEC;
    pub type Cmdqeie = crate::EnumBitfieldStruct<u8, Cmdqeie_SPEC>;
    impl Cmdqeie {
        #[doc = "Disables Command Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Command Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfie_SPEC;
    pub type Rspqfie = crate::EnumBitfieldStruct<u8, Rspqfie_SPEC>;
    impl Rspqfie {
        #[doc = "Disables Response Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Response Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtie_SPEC;
    pub type Tabtie = crate::EnumBitfieldStruct<u8, Tabtie_SPEC>;
    impl Tabtie {
        #[doc = "Disables Transfer Abort Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Abort Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtieByLh_SPEC;
impl crate::sealed::RegSpec for NtieByLh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Interrupt Enable Register"]
pub type NtieByLh = crate::RegValueT<NtieByLh_SPEC>;

impl NtieByLh {
    #[doc = "Normal Transfer Error Interrupt Enable"]
    #[inline(always)]
    pub fn teie(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntie_by_lh::Teie,
        NtieByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntie_by_lh::Teie,
            NtieByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, NtieByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, NtieByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtieByLh {
    #[inline(always)]
    fn default() -> NtieByLh {
        <crate::RegValueT<NtieByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntie_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Teie_SPEC;
    pub type Teie = crate::EnumBitfieldStruct<u8, Teie_SPEC>;
    impl Teie {
        #[doc = "Disables Transfer Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Transfer Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtieHaH_SPEC;
impl crate::sealed::RegSpec for NtieHaH_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Interrupt Enable Register"]
pub type NtieHaH = crate::RegValueT<NtieHaH_SPEC>;

impl NtieHaH {
    #[doc = "Normal Receive Status Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rsqfie(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntie_ha_h::Rsqfie,
        NtieHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntie_ha_h::Rsqfie,
            NtieHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000000. The write value should be 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ff, 1, 0, u16, NtieHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7ff,1,0,u16, NtieHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtieHaH {
    #[inline(always)]
    fn default() -> NtieHaH {
        <crate::RegValueT<NtieHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntie_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqfie_SPEC;
    pub type Rsqfie = crate::EnumBitfieldStruct<u8, Rsqfie_SPEC>;
    impl Rsqfie {
        #[doc = "Disables Receive Status Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Receive Status Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtieByHl_SPEC;
impl crate::sealed::RegSpec for NtieByHl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Interrupt Enable Register"]
pub type NtieByHl = crate::RegValueT<NtieByHl_SPEC>;

impl NtieByHl {
    #[doc = "Normal Receive Status Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rsqfie(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntie_by_hl::Rsqfie,
        NtieByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntie_by_hl::Rsqfie,
            NtieByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, NtieByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, NtieByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for NtieByHl {
    #[inline(always)]
    fn default() -> NtieByHl {
        <crate::RegValueT<NtieByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntie_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqfie_SPEC;
    pub type Rsqfie = crate::EnumBitfieldStruct<u8, Rsqfie_SPEC>;
    impl Rsqfie {
        #[doc = "Disables Receive Status Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables Receive Status Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ntstfc_SPEC;
impl crate::sealed::RegSpec for Ntstfc_SPEC {
    type DataType = u32;
}
#[doc = "Normal Transfer Status Force Register"]
pub type Ntstfc = crate::RegValueT<Ntstfc_SPEC>;

impl Ntstfc {
    #[doc = "Normal Tx Data Buffer Empty Force 0"]
    #[inline(always)]
    pub fn tdbefc0(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, ntstfc::Tdbefc0, Ntstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<0,0x1,1,0,ntstfc::Tdbefc0, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Normal Rx Data Buffer Full Force 0"]
    #[inline(always)]
    pub fn rdbffc0(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, ntstfc::Rdbffc0, Ntstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<1,0x1,1,0,ntstfc::Rdbffc0, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Normal IBI Queue Empty/Full Force"]
    #[inline(always)]
    pub fn ibiqeffc(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, ntstfc::Ibiqeffc, Ntstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<2,0x1,1,0,ntstfc::Ibiqeffc, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Normal Command Queue Empty Force"]
    #[inline(always)]
    pub fn cmdqefc(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, ntstfc::Cmdqefc, Ntstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<3,0x1,1,0,ntstfc::Cmdqefc, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Normal Response Queue Full Force"]
    #[inline(always)]
    pub fn rspqffc(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, ntstfc::Rspqffc, Ntstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<4,0x1,1,0,ntstfc::Rspqffc, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Normal Transfer Abort Force"]
    #[inline(always)]
    pub fn tabtfc(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, ntstfc::Tabtfc, Ntstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<5,0x1,1,0,ntstfc::Tabtfc, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Normal Transfer Error Force"]
    #[inline(always)]
    pub fn tefc(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, ntstfc::Tefc, Ntstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<9,0x1,1,0,ntstfc::Tefc, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "Normal Receive Status Queue Full Force"]
    #[inline(always)]
    pub fn rsqffc(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, ntstfc::Rsqffc, Ntstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<20,0x1,1,0,ntstfc::Rsqffc, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "The write value should be 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<21, 0x7ff, 1, 0, u16, Ntstfc_SPEC, crate::common::W> {
        crate::common::RegisterField::<21,0x7ff,1,0,u16, Ntstfc_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Ntstfc {
    #[inline(always)]
    fn default() -> Ntstfc {
        <crate::RegValueT<Ntstfc_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntstfc {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbefc0_SPEC;
    pub type Tdbefc0 = crate::EnumBitfieldStruct<u8, Tdbefc0_SPEC>;
    impl Tdbefc0 {
        #[doc = "not Force Tx0 Data Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Tx0 Data Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbffc0_SPEC;
    pub type Rdbffc0 = crate::EnumBitfieldStruct<u8, Rdbffc0_SPEC>;
    impl Rdbffc0 {
        #[doc = "not Force Rx0 Data Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Rx0 Data Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqeffc_SPEC;
    pub type Ibiqeffc = crate::EnumBitfieldStruct<u8, Ibiqeffc_SPEC>;
    impl Ibiqeffc {
        #[doc = "not Force IBI Status Buffer Empty/Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force IBI Status Buffer Empty/Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqefc_SPEC;
    pub type Cmdqefc = crate::EnumBitfieldStruct<u8, Cmdqefc_SPEC>;
    impl Cmdqefc {
        #[doc = "not Force Command Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Command Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqffc_SPEC;
    pub type Rspqffc = crate::EnumBitfieldStruct<u8, Rspqffc_SPEC>;
    impl Rspqffc {
        #[doc = "not Force Response Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Response Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtfc_SPEC;
    pub type Tabtfc = crate::EnumBitfieldStruct<u8, Tabtfc_SPEC>;
    impl Tabtfc {
        #[doc = "not Force Transfer Abort Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transfer Abort Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tefc_SPEC;
    pub type Tefc = crate::EnumBitfieldStruct<u8, Tefc_SPEC>;
    impl Tefc {
        #[doc = "not Force Transfer Error Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transfer Error Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqffc_SPEC;
    pub type Rsqffc = crate::EnumBitfieldStruct<u8, Rsqffc_SPEC>;
    impl Rsqffc {
        #[doc = "not Force Receive Status Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Receive Status Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstfcHaL_SPEC;
impl crate::sealed::RegSpec for NtstfcHaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Status Force Register"]
pub type NtstfcHaL = crate::RegValueT<NtstfcHaL_SPEC>;

impl NtstfcHaL {
    #[doc = "Normal Tx Data Buffer Empty Force 0"]
    #[inline(always)]
    pub fn tdbefc0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ntstfc_ha_l::Tdbefc0,
        NtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ntstfc_ha_l::Tdbefc0,
            NtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Full Force 0"]
    #[inline(always)]
    pub fn rdbffc0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntstfc_ha_l::Rdbffc0,
        NtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntstfc_ha_l::Rdbffc0,
            NtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Queue Empty/Full Force"]
    #[inline(always)]
    pub fn ibiqeffc(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ntstfc_ha_l::Ibiqeffc,
        NtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ntstfc_ha_l::Ibiqeffc,
            NtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Command Queue Empty Force"]
    #[inline(always)]
    pub fn cmdqefc(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ntstfc_ha_l::Cmdqefc,
        NtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ntstfc_ha_l::Cmdqefc,
            NtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Full Force"]
    #[inline(always)]
    pub fn rspqffc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntstfc_ha_l::Rspqffc,
        NtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntstfc_ha_l::Rspqffc,
            NtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Abort Force"]
    #[inline(always)]
    pub fn tabtfc(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        ntstfc_ha_l::Tabtfc,
        NtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ntstfc_ha_l::Tabtfc,
            NtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Error Force"]
    #[inline(always)]
    pub fn tefc(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        ntstfc_ha_l::Tefc,
        NtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            ntstfc_ha_l::Tefc,
            NtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, NtstfcHaL_SPEC, crate::common::W> {
        crate::common::RegisterField::<10,0x3f,1,0,u8, NtstfcHaL_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstfcHaL {
    #[inline(always)]
    fn default() -> NtstfcHaL {
        <crate::RegValueT<NtstfcHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntstfc_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbefc0_SPEC;
    pub type Tdbefc0 = crate::EnumBitfieldStruct<u8, Tdbefc0_SPEC>;
    impl Tdbefc0 {
        #[doc = "not Force Tx0 Data Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Tx0 Data Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbffc0_SPEC;
    pub type Rdbffc0 = crate::EnumBitfieldStruct<u8, Rdbffc0_SPEC>;
    impl Rdbffc0 {
        #[doc = "not Force Rx0 Data Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Rx0 Data Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqeffc_SPEC;
    pub type Ibiqeffc = crate::EnumBitfieldStruct<u8, Ibiqeffc_SPEC>;
    impl Ibiqeffc {
        #[doc = "not Force IBI Status Buffer Empty/Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force IBI Status Buffer Empty/Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqefc_SPEC;
    pub type Cmdqefc = crate::EnumBitfieldStruct<u8, Cmdqefc_SPEC>;
    impl Cmdqefc {
        #[doc = "not Force Command Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Command Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqffc_SPEC;
    pub type Rspqffc = crate::EnumBitfieldStruct<u8, Rspqffc_SPEC>;
    impl Rspqffc {
        #[doc = "not Force Response Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Response Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtfc_SPEC;
    pub type Tabtfc = crate::EnumBitfieldStruct<u8, Tabtfc_SPEC>;
    impl Tabtfc {
        #[doc = "not Force Transfer Abort Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transfer Abort Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tefc_SPEC;
    pub type Tefc = crate::EnumBitfieldStruct<u8, Tefc_SPEC>;
    impl Tefc {
        #[doc = "not Force Transfer Error Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transfer Error Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstfcByLl_SPEC;
impl crate::sealed::RegSpec for NtstfcByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Force Register"]
pub type NtstfcByLl = crate::RegValueT<NtstfcByLl_SPEC>;

impl NtstfcByLl {
    #[doc = "Normal Tx Data Buffer Empty Force 0"]
    #[inline(always)]
    pub fn tdbefc0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ntstfc_by_ll::Tdbefc0,
        NtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ntstfc_by_ll::Tdbefc0,
            NtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Rx Data Buffer Full Force 0"]
    #[inline(always)]
    pub fn rdbffc0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntstfc_by_ll::Rdbffc0,
        NtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntstfc_by_ll::Rdbffc0,
            NtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal IBI Queue Empty/Full Force"]
    #[inline(always)]
    pub fn ibiqeffc(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ntstfc_by_ll::Ibiqeffc,
        NtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ntstfc_by_ll::Ibiqeffc,
            NtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Command Queue Empty Force"]
    #[inline(always)]
    pub fn cmdqefc(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ntstfc_by_ll::Cmdqefc,
        NtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ntstfc_by_ll::Cmdqefc,
            NtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Response Queue Full Force"]
    #[inline(always)]
    pub fn rspqffc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntstfc_by_ll::Rspqffc,
        NtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntstfc_by_ll::Rspqffc,
            NtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "Normal Transfer Abort Force"]
    #[inline(always)]
    pub fn tabtfc(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        ntstfc_by_ll::Tabtfc,
        NtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ntstfc_by_ll::Tabtfc,
            NtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, NtstfcByLl_SPEC, crate::common::W> {
        crate::common::RegisterField::<6,0x3,1,0,u8, NtstfcByLl_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstfcByLl {
    #[inline(always)]
    fn default() -> NtstfcByLl {
        <crate::RegValueT<NtstfcByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntstfc_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbefc0_SPEC;
    pub type Tdbefc0 = crate::EnumBitfieldStruct<u8, Tdbefc0_SPEC>;
    impl Tdbefc0 {
        #[doc = "not Force Tx0 Data Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Tx0 Data Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbffc0_SPEC;
    pub type Rdbffc0 = crate::EnumBitfieldStruct<u8, Rdbffc0_SPEC>;
    impl Rdbffc0 {
        #[doc = "not Force Rx0 Data Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Rx0 Data Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ibiqeffc_SPEC;
    pub type Ibiqeffc = crate::EnumBitfieldStruct<u8, Ibiqeffc_SPEC>;
    impl Ibiqeffc {
        #[doc = "not Force IBI Status Buffer Empty/Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force IBI Status Buffer Empty/Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqefc_SPEC;
    pub type Cmdqefc = crate::EnumBitfieldStruct<u8, Cmdqefc_SPEC>;
    impl Cmdqefc {
        #[doc = "not Force Command Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Command Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqffc_SPEC;
    pub type Rspqffc = crate::EnumBitfieldStruct<u8, Rspqffc_SPEC>;
    impl Rspqffc {
        #[doc = "not Force Response Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Response Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtfc_SPEC;
    pub type Tabtfc = crate::EnumBitfieldStruct<u8, Tabtfc_SPEC>;
    impl Tabtfc {
        #[doc = "not Force Transfer Abort Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transfer Abort Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstfcByLh_SPEC;
impl crate::sealed::RegSpec for NtstfcByLh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Force Register"]
pub type NtstfcByLh = crate::RegValueT<NtstfcByLh_SPEC>;

impl NtstfcByLh {
    #[doc = "Normal Transfer Error Force"]
    #[inline(always)]
    pub fn tefc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ntstfc_by_lh::Tefc,
        NtstfcByLh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ntstfc_by_lh::Tefc,
            NtstfcByLh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, NtstfcByLh_SPEC, crate::common::W> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, NtstfcByLh_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstfcByLh {
    #[inline(always)]
    fn default() -> NtstfcByLh {
        <crate::RegValueT<NtstfcByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntstfc_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tefc_SPEC;
    pub type Tefc = crate::EnumBitfieldStruct<u8, Tefc_SPEC>;
    impl Tefc {
        #[doc = "not Force Transfer Error Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Transfer Error Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstfcHaH_SPEC;
impl crate::sealed::RegSpec for NtstfcHaH_SPEC {
    type DataType = u16;
}
#[doc = "Normal Transfer Status Force Register"]
pub type NtstfcHaH = crate::RegValueT<NtstfcHaH_SPEC>;

impl NtstfcHaH {
    #[doc = "Normal Receive Status Queue Full Force"]
    #[inline(always)]
    pub fn rsqffc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntstfc_ha_h::Rsqffc,
        NtstfcHaH_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntstfc_ha_h::Rsqffc,
            NtstfcHaH_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ff, 1, 0, u16, NtstfcHaH_SPEC, crate::common::W> {
        crate::common::RegisterField::<5,0x7ff,1,0,u16, NtstfcHaH_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstfcHaH {
    #[inline(always)]
    fn default() -> NtstfcHaH {
        <crate::RegValueT<NtstfcHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntstfc_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqffc_SPEC;
    pub type Rsqffc = crate::EnumBitfieldStruct<u8, Rsqffc_SPEC>;
    impl Rsqffc {
        #[doc = "not Force Receive Status Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Receive Status Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NtstfcByHl_SPEC;
impl crate::sealed::RegSpec for NtstfcByHl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Transfer Status Force Register"]
pub type NtstfcByHl = crate::RegValueT<NtstfcByHl_SPEC>;

impl NtstfcByHl {
    #[doc = "Normal Receive Status Queue Full Force"]
    #[inline(always)]
    pub fn rsqffc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ntstfc_by_hl::Rsqffc,
        NtstfcByHl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ntstfc_by_hl::Rsqffc,
            NtstfcByHl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, NtstfcByHl_SPEC, crate::common::W> {
        crate::common::RegisterField::<5,0x7,1,0,u8, NtstfcByHl_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for NtstfcByHl {
    #[inline(always)]
    fn default() -> NtstfcByHl {
        <crate::RegValueT<NtstfcByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ntstfc_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsqffc_SPEC;
    pub type Rsqffc = crate::EnumBitfieldStruct<u8, Rsqffc_SPEC>;
    impl Rsqffc {
        #[doc = "not Force Receive Status Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force Receive Status Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Htst_SPEC;
impl crate::sealed::RegSpec for Htst_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Transfer Status Register"]
pub type Htst = crate::RegValueT<Htst_SPEC>;

impl Htst {
    #[doc = "High Priority Tx Data Buffer Empty Flag"]
    #[inline(always)]
    pub fn tdbef(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, htst::Tdbef, Htst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1,1,0,htst::Tdbef, Htst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Rx Data Buffer Full Flag"]
    #[inline(always)]
    pub fn rdbff(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, htst::Rdbff, Htst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x1,1,0,htst::Rdbff, Htst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Command Queue Empty Flag"]
    #[inline(always)]
    pub fn cmdqef(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, htst::Cmdqef, Htst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1,1,0,htst::Cmdqef, Htst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Response Queue Full Flag"]
    #[inline(always)]
    pub fn rspqff(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, htst::Rspqff, Htst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,htst::Rspqff, Htst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Transfer Abort Flag"]
    #[inline(always)]
    pub fn tabtf(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, htst::Tabtf, Htst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x1,1,0,htst::Tabtf, Htst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Transfer Error Flag"]
    #[inline(always)]
    pub fn tef(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, htst::Tef, Htst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x1,1,0,htst::Tef, Htst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000000000. The write value should be 0000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3fffff, 1, 0, u32, Htst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3fffff,1,0,u32, Htst_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Htst {
    #[inline(always)]
    fn default() -> Htst {
        <crate::RegValueT<Htst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbef_SPEC;
    pub type Tdbef = crate::EnumBitfieldStruct<u8, Tdbef_SPEC>;
    impl Tdbef {
        #[doc = "The number of empties in the High Priority Tx Data Buffer is < the HTBTHCTL.TXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of empties in the High Priority Tx Data Buffer is >= the HTBTHCTL.TXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbff_SPEC;
    pub type Rdbff = crate::EnumBitfieldStruct<u8, Rdbff_SPEC>;
    impl Rdbff {
        #[doc = "The number of entries in the High Priority Rx Data Buffer is < the HTBTHCTL.RXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of entries in the High Priority Rx Data Buffer is >= the HTBTHCTL.RXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqef_SPEC;
    pub type Cmdqef = crate::EnumBitfieldStruct<u8, Cmdqef_SPEC>;
    impl Cmdqef {
        #[doc = "The number of Command Queue empties is < the Command Queue size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is the Command Queue size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of High Priority Command Queue empties is < the HQTHCTL.CMDQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of High Priority Command Queue empties is >= the HQTHCTL.CMDQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqff_SPEC;
    pub type Rspqff = crate::EnumBitfieldStruct<u8, Rspqff_SPEC>;
    impl Rspqff {
        #[doc = "The number of High Priority Response Queue entries is <= the HQTHCTL .RSPQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of High Priority Response Queue entries is > the HQTHCTL .RSPQTH threshold"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtf_SPEC;
    pub type Tabtf = crate::EnumBitfieldStruct<u8, Tabtf_SPEC>;
    impl Tabtf {
        #[doc = "High Priority Transfer Abort does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "High Priority Transfer Abort occurs."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tef_SPEC;
    pub type Tef = crate::EnumBitfieldStruct<u8, Tef_SPEC>;
    impl Tef {
        #[doc = "High Priority Transfer Error does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "High Priority Transfer Error occurs."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtstHaL_SPEC;
impl crate::sealed::RegSpec for HtstHaL_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Transfer Status Register"]
pub type HtstHaL = crate::RegValueT<HtstHaL_SPEC>;

impl HtstHaL {
    #[doc = "High Priority Tx Data Buffer Empty Flag"]
    #[inline(always)]
    pub fn tdbef(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, htst_ha_l::Tdbef, HtstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            htst_ha_l::Tdbef,
            HtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Full Flag"]
    #[inline(always)]
    pub fn rdbff(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, htst_ha_l::Rdbff, HtstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htst_ha_l::Rdbff,
            HtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Empty Flag"]
    #[inline(always)]
    pub fn cmdqef(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        htst_ha_l::Cmdqef,
        HtstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            htst_ha_l::Cmdqef,
            HtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Full Flag"]
    #[inline(always)]
    pub fn rspqff(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        htst_ha_l::Rspqff,
        HtstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            htst_ha_l::Rspqff,
            HtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Abort Flag"]
    #[inline(always)]
    pub fn tabtf(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, htst_ha_l::Tabtf, HtstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            htst_ha_l::Tabtf,
            HtstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Error Flag"]
    #[inline(always)]
    pub fn tef(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, htst_ha_l::Tef, HtstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<9,0x1,1,0,htst_ha_l::Tef, HtstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, HtstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3f,1,0,u8, HtstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtstHaL {
    #[inline(always)]
    fn default() -> HtstHaL {
        <crate::RegValueT<HtstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbef_SPEC;
    pub type Tdbef = crate::EnumBitfieldStruct<u8, Tdbef_SPEC>;
    impl Tdbef {
        #[doc = "The number of empties in the High Priority Tx Data Buffer is < the HTBTHCTL.TXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of empties in the High Priority Tx Data Buffer is >= the HTBTHCTL.TXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbff_SPEC;
    pub type Rdbff = crate::EnumBitfieldStruct<u8, Rdbff_SPEC>;
    impl Rdbff {
        #[doc = "The number of entries in the High Priority Rx Data Buffer is < the HTBTHCTL.RXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of entries in the High Priority Rx Data Buffer is >= the HTBTHCTL.RXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqef_SPEC;
    pub type Cmdqef = crate::EnumBitfieldStruct<u8, Cmdqef_SPEC>;
    impl Cmdqef {
        #[doc = "The number of Command Queue empties is < the Command Queue size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is the Command Queue size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of High Priority Command Queue empties is < the HQTHCTL.CMDQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of High Priority Command Queue empties is >= the HQTHCTL.CMDQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqff_SPEC;
    pub type Rspqff = crate::EnumBitfieldStruct<u8, Rspqff_SPEC>;
    impl Rspqff {
        #[doc = "The number of High Priority Response Queue entries is <= the HQTHCTL .RSPQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of High Priority Response Queue entries is > the HQTHCTL .RSPQTH threshold"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtf_SPEC;
    pub type Tabtf = crate::EnumBitfieldStruct<u8, Tabtf_SPEC>;
    impl Tabtf {
        #[doc = "High Priority Transfer Abort does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "High Priority Transfer Abort occurs."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tef_SPEC;
    pub type Tef = crate::EnumBitfieldStruct<u8, Tef_SPEC>;
    impl Tef {
        #[doc = "High Priority Transfer Error does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "High Priority Transfer Error occurs."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtstByLl_SPEC;
impl crate::sealed::RegSpec for HtstByLl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Status Register"]
pub type HtstByLl = crate::RegValueT<HtstByLl_SPEC>;

impl HtstByLl {
    #[doc = "High Priority Tx Data Buffer Empty Flag"]
    #[inline(always)]
    pub fn tdbef(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        htst_by_ll::Tdbef,
        HtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            htst_by_ll::Tdbef,
            HtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Full Flag"]
    #[inline(always)]
    pub fn rdbff(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htst_by_ll::Rdbff,
        HtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htst_by_ll::Rdbff,
            HtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Empty Flag"]
    #[inline(always)]
    pub fn cmdqef(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        htst_by_ll::Cmdqef,
        HtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            htst_by_ll::Cmdqef,
            HtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Full Flag"]
    #[inline(always)]
    pub fn rspqff(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        htst_by_ll::Rspqff,
        HtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            htst_by_ll::Rspqff,
            HtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Abort Flag"]
    #[inline(always)]
    pub fn tabtf(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        htst_by_ll::Tabtf,
        HtstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            htst_by_ll::Tabtf,
            HtstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, HtstByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, HtstByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtstByLl {
    #[inline(always)]
    fn default() -> HtstByLl {
        <crate::RegValueT<HtstByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htst_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbef_SPEC;
    pub type Tdbef = crate::EnumBitfieldStruct<u8, Tdbef_SPEC>;
    impl Tdbef {
        #[doc = "The number of empties in the High Priority Tx Data Buffer is < the HTBTHCTL.TXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of empties in the High Priority Tx Data Buffer is >= the HTBTHCTL.TXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbff_SPEC;
    pub type Rdbff = crate::EnumBitfieldStruct<u8, Rdbff_SPEC>;
    impl Rdbff {
        #[doc = "The number of entries in the High Priority Rx Data Buffer is < the HTBTHCTL.RXDBTH\\[2:0\\] threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of entries in the High Priority Rx Data Buffer is >= the HTBTHCTL.RXDBTH\\[2:0\\] threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqef_SPEC;
    pub type Cmdqef = crate::EnumBitfieldStruct<u8, Cmdqef_SPEC>;
    impl Cmdqef {
        #[doc = "The number of Command Queue empties is < the Command Queue size."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of Command Queue empties is the Command Queue size."]
        pub const _1: Self = Self::new(1);
        #[doc = "The number of High Priority Command Queue empties is < the HQTHCTL.CMDQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of High Priority Command Queue empties is >= the HQTHCTL.CMDQTH threshold."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqff_SPEC;
    pub type Rspqff = crate::EnumBitfieldStruct<u8, Rspqff_SPEC>;
    impl Rspqff {
        #[doc = "The number of High Priority Response Queue entries is <= the HQTHCTL .RSPQTH threshold."]
        pub const _0: Self = Self::new(0);
        #[doc = "The number of High Priority Response Queue entries is > the HQTHCTL .RSPQTH threshold"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtf_SPEC;
    pub type Tabtf = crate::EnumBitfieldStruct<u8, Tabtf_SPEC>;
    impl Tabtf {
        #[doc = "High Priority Transfer Abort does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "High Priority Transfer Abort occurs."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtstByLh_SPEC;
impl crate::sealed::RegSpec for HtstByLh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Status Register"]
pub type HtstByLh = crate::RegValueT<HtstByLh_SPEC>;

impl HtstByLh {
    #[doc = "High Priority Transfer Error Flag"]
    #[inline(always)]
    pub fn tef(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, htst_by_lh::Tef, HtstByLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htst_by_lh::Tef,
            HtstByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, HtstByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, HtstByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtstByLh {
    #[inline(always)]
    fn default() -> HtstByLh {
        <crate::RegValueT<HtstByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htst_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tef_SPEC;
    pub type Tef = crate::EnumBitfieldStruct<u8, Tef_SPEC>;
    impl Tef {
        #[doc = "High Priority Transfer Error does not occur."]
        pub const _0: Self = Self::new(0);
        #[doc = "High Priority Transfer Error occurs."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Htste_SPEC;
impl crate::sealed::RegSpec for Htste_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Transfer Status Enable Register"]
pub type Htste = crate::RegValueT<Htste_SPEC>;

impl Htste {
    #[doc = "High Priority Tx Data Buffer Empty Enable"]
    #[inline(always)]
    pub fn tdbee(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, htste::Tdbee, Htste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,htste::Tdbee, Htste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Rx Data Buffer Full Enable"]
    #[inline(always)]
    pub fn rdbfe(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, htste::Rdbfe, Htste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,htste::Rdbfe, Htste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Command Queue Empty Enable."]
    #[inline(always)]
    pub fn cmdqee(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, htste::Cmdqee, Htste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1,1,0,htste::Cmdqee, Htste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Response Queue Full Enable"]
    #[inline(always)]
    pub fn rspqfe(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, htste::Rspqfe, Htste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,htste::Rspqfe, Htste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Transfer Abort Enable"]
    #[inline(always)]
    pub fn tabte(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, htste::Tabte, Htste_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x1,1,0,htste::Tabte, Htste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Transfer Error Enable"]
    #[inline(always)]
    pub fn tee(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, htste::Tee, Htste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x1,1,0,htste::Tee, Htste_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000000000. The write value should be 0000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3fffff, 1, 0, u32, Htste_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3fffff,1,0,u32, Htste_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Htste {
    #[inline(always)]
    fn default() -> Htste {
        <crate::RegValueT<Htste_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htste {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbee_SPEC;
    pub type Tdbee = crate::EnumBitfieldStruct<u8, Tdbee_SPEC>;
    impl Tdbee {
        #[doc = "Disables High Priority Tx Data Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Tx Data Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfe_SPEC;
    pub type Rdbfe = crate::EnumBitfieldStruct<u8, Rdbfe_SPEC>;
    impl Rdbfe {
        #[doc = "Disables High Priority Rx Data Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Rx Data Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqee_SPEC;
    pub type Cmdqee = crate::EnumBitfieldStruct<u8, Cmdqee_SPEC>;
    impl Cmdqee {
        #[doc = "Disables High Priority Command Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Command Buffer Empty Interrupt Status logging"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfe_SPEC;
    pub type Rspqfe = crate::EnumBitfieldStruct<u8, Rspqfe_SPEC>;
    impl Rspqfe {
        #[doc = "Disables High Priority Response Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Response Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabte_SPEC;
    pub type Tabte = crate::EnumBitfieldStruct<u8, Tabte_SPEC>;
    impl Tabte {
        #[doc = "Disables High PriorityTransfer Abort Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Abort Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tee_SPEC;
    pub type Tee = crate::EnumBitfieldStruct<u8, Tee_SPEC>;
    impl Tee {
        #[doc = "Disables High Priority Transfer Error interrupt Stats logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Error interrupt Stats logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtsteHaL_SPEC;
impl crate::sealed::RegSpec for HtsteHaL_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Transfer Status Enable Register"]
pub type HtsteHaL = crate::RegValueT<HtsteHaL_SPEC>;

impl HtsteHaL {
    #[doc = "High Priority Tx Data Buffer Empty Enable"]
    #[inline(always)]
    pub fn tdbee(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        htste_ha_l::Tdbee,
        HtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            htste_ha_l::Tdbee,
            HtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Full Enable"]
    #[inline(always)]
    pub fn rdbfe(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htste_ha_l::Rdbfe,
        HtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htste_ha_l::Rdbfe,
            HtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Empty Enable."]
    #[inline(always)]
    pub fn cmdqee(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        htste_ha_l::Cmdqee,
        HtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            htste_ha_l::Cmdqee,
            HtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Full Enable"]
    #[inline(always)]
    pub fn rspqfe(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        htste_ha_l::Rspqfe,
        HtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            htste_ha_l::Rspqfe,
            HtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Abort Enable"]
    #[inline(always)]
    pub fn tabte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        htste_ha_l::Tabte,
        HtsteHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            htste_ha_l::Tabte,
            HtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Error Enable"]
    #[inline(always)]
    pub fn tee(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, htste_ha_l::Tee, HtsteHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            htste_ha_l::Tee,
            HtsteHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, HtsteHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3f,1,0,u8, HtsteHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtsteHaL {
    #[inline(always)]
    fn default() -> HtsteHaL {
        <crate::RegValueT<HtsteHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htste_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbee_SPEC;
    pub type Tdbee = crate::EnumBitfieldStruct<u8, Tdbee_SPEC>;
    impl Tdbee {
        #[doc = "Disables High Priority Tx Data Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Tx Data Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfe_SPEC;
    pub type Rdbfe = crate::EnumBitfieldStruct<u8, Rdbfe_SPEC>;
    impl Rdbfe {
        #[doc = "Disables High Priority Rx Data Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Rx Data Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqee_SPEC;
    pub type Cmdqee = crate::EnumBitfieldStruct<u8, Cmdqee_SPEC>;
    impl Cmdqee {
        #[doc = "Disables High Priority Command Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Command Buffer Empty Interrupt Status logging"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfe_SPEC;
    pub type Rspqfe = crate::EnumBitfieldStruct<u8, Rspqfe_SPEC>;
    impl Rspqfe {
        #[doc = "Disables High Priority Response Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Response Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabte_SPEC;
    pub type Tabte = crate::EnumBitfieldStruct<u8, Tabte_SPEC>;
    impl Tabte {
        #[doc = "Disables High PriorityTransfer Abort Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Abort Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tee_SPEC;
    pub type Tee = crate::EnumBitfieldStruct<u8, Tee_SPEC>;
    impl Tee {
        #[doc = "Disables High Priority Transfer Error interrupt Stats logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Error interrupt Stats logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtsteByLl_SPEC;
impl crate::sealed::RegSpec for HtsteByLl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Status Enable Register"]
pub type HtsteByLl = crate::RegValueT<HtsteByLl_SPEC>;

impl HtsteByLl {
    #[doc = "High Priority Tx Data Buffer Empty Enable"]
    #[inline(always)]
    pub fn tdbee(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        htste_by_ll::Tdbee,
        HtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            htste_by_ll::Tdbee,
            HtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Full Enable"]
    #[inline(always)]
    pub fn rdbfe(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htste_by_ll::Rdbfe,
        HtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htste_by_ll::Rdbfe,
            HtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Empty Enable."]
    #[inline(always)]
    pub fn cmdqee(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        htste_by_ll::Cmdqee,
        HtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            htste_by_ll::Cmdqee,
            HtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Full Enable"]
    #[inline(always)]
    pub fn rspqfe(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        htste_by_ll::Rspqfe,
        HtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            htste_by_ll::Rspqfe,
            HtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Abort Enable"]
    #[inline(always)]
    pub fn tabte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        htste_by_ll::Tabte,
        HtsteByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            htste_by_ll::Tabte,
            HtsteByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, HtsteByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, HtsteByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtsteByLl {
    #[inline(always)]
    fn default() -> HtsteByLl {
        <crate::RegValueT<HtsteByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htste_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbee_SPEC;
    pub type Tdbee = crate::EnumBitfieldStruct<u8, Tdbee_SPEC>;
    impl Tdbee {
        #[doc = "Disables High Priority Tx Data Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Tx Data Buffer Empty Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfe_SPEC;
    pub type Rdbfe = crate::EnumBitfieldStruct<u8, Rdbfe_SPEC>;
    impl Rdbfe {
        #[doc = "Disables High Priority Rx Data Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Rx Data Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqee_SPEC;
    pub type Cmdqee = crate::EnumBitfieldStruct<u8, Cmdqee_SPEC>;
    impl Cmdqee {
        #[doc = "Disables High Priority Command Buffer Empty Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Command Buffer Empty Interrupt Status logging"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfe_SPEC;
    pub type Rspqfe = crate::EnumBitfieldStruct<u8, Rspqfe_SPEC>;
    impl Rspqfe {
        #[doc = "Disables High Priority Response Buffer Full Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Response Buffer Full Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabte_SPEC;
    pub type Tabte = crate::EnumBitfieldStruct<u8, Tabte_SPEC>;
    impl Tabte {
        #[doc = "Disables High PriorityTransfer Abort Interrupt Status logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Abort Interrupt Status logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtsteByLh_SPEC;
impl crate::sealed::RegSpec for HtsteByLh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Status Enable Register"]
pub type HtsteByLh = crate::RegValueT<HtsteByLh_SPEC>;

impl HtsteByLh {
    #[doc = "High Priority Transfer Error Enable"]
    #[inline(always)]
    pub fn tee(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htste_by_lh::Tee,
        HtsteByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htste_by_lh::Tee,
            HtsteByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, HtsteByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, HtsteByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtsteByLh {
    #[inline(always)]
    fn default() -> HtsteByLh {
        <crate::RegValueT<HtsteByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htste_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tee_SPEC;
    pub type Tee = crate::EnumBitfieldStruct<u8, Tee_SPEC>;
    impl Tee {
        #[doc = "Disables High Priority Transfer Error interrupt Stats logging."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Error interrupt Stats logging."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Htie_SPEC;
impl crate::sealed::RegSpec for Htie_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Transfer Interrupt Enable Register"]
pub type Htie = crate::RegValueT<Htie_SPEC>;

impl Htie {
    #[doc = "High Priority Tx Data Buffer Empty Interrupt Enable"]
    #[inline(always)]
    pub fn tdbeie(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, htie::Tdbeie, Htie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,htie::Tdbeie, Htie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Rx Data Buffer Full Interrupt Enable"]
    #[inline(always)]
    pub fn rdbfie(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, htie::Rdbfie, Htie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,htie::Rdbfie, Htie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Command Queue Empty Interrupt Enable"]
    #[inline(always)]
    pub fn cmdqeie(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, htie::Cmdqeie, Htie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1,1,0,htie::Cmdqeie, Htie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Response Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rspqfie(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, htie::Rspqfie, Htie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x1,1,0,htie::Rspqfie, Htie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Transfer Abort Interrupt Enable"]
    #[inline(always)]
    pub fn tabtie(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, htie::Tabtie, Htie_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x1,1,0,htie::Tabtie, Htie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "High Priority Transfer Error Interrupt Enable"]
    #[inline(always)]
    pub fn teie(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, htie::Teie, Htie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x1,1,0,htie::Teie, Htie_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000000000. The write value should be 0000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3fffff, 1, 0, u32, Htie_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3fffff,1,0,u32, Htie_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Htie {
    #[inline(always)]
    fn default() -> Htie {
        <crate::RegValueT<Htie_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htie {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbeie_SPEC;
    pub type Tdbeie = crate::EnumBitfieldStruct<u8, Tdbeie_SPEC>;
    impl Tdbeie {
        #[doc = "Disables High Priority Tx Data Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Tx Data Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfie_SPEC;
    pub type Rdbfie = crate::EnumBitfieldStruct<u8, Rdbfie_SPEC>;
    impl Rdbfie {
        #[doc = "Disables High Priority Rx Data Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Rx Data Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqeie_SPEC;
    pub type Cmdqeie = crate::EnumBitfieldStruct<u8, Cmdqeie_SPEC>;
    impl Cmdqeie {
        #[doc = "Disables High Priority Command Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Command Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfie_SPEC;
    pub type Rspqfie = crate::EnumBitfieldStruct<u8, Rspqfie_SPEC>;
    impl Rspqfie {
        #[doc = "Disables High Priority Response Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Response Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtie_SPEC;
    pub type Tabtie = crate::EnumBitfieldStruct<u8, Tabtie_SPEC>;
    impl Tabtie {
        #[doc = "Disables High Priority Transfer Abort interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Abort interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Teie_SPEC;
    pub type Teie = crate::EnumBitfieldStruct<u8, Teie_SPEC>;
    impl Teie {
        #[doc = "Disables High Priority Transfer Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtieHaL_SPEC;
impl crate::sealed::RegSpec for HtieHaL_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Transfer Interrupt Enable Register"]
pub type HtieHaL = crate::RegValueT<HtieHaL_SPEC>;

impl HtieHaL {
    #[doc = "High Priority Tx Data Buffer Empty Interrupt Enable"]
    #[inline(always)]
    pub fn tdbeie(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        htie_ha_l::Tdbeie,
        HtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            htie_ha_l::Tdbeie,
            HtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Full Interrupt Enable"]
    #[inline(always)]
    pub fn rdbfie(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htie_ha_l::Rdbfie,
        HtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htie_ha_l::Rdbfie,
            HtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Empty Interrupt Enable"]
    #[inline(always)]
    pub fn cmdqeie(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        htie_ha_l::Cmdqeie,
        HtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            htie_ha_l::Cmdqeie,
            HtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rspqfie(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        htie_ha_l::Rspqfie,
        HtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            htie_ha_l::Rspqfie,
            HtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Abort Interrupt Enable"]
    #[inline(always)]
    pub fn tabtie(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        htie_ha_l::Tabtie,
        HtieHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            htie_ha_l::Tabtie,
            HtieHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Error Interrupt Enable"]
    #[inline(always)]
    pub fn teie(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, htie_ha_l::Teie, HtieHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<9,0x1,1,0,htie_ha_l::Teie, HtieHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, HtieHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3f,1,0,u8, HtieHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtieHaL {
    #[inline(always)]
    fn default() -> HtieHaL {
        <crate::RegValueT<HtieHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htie_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbeie_SPEC;
    pub type Tdbeie = crate::EnumBitfieldStruct<u8, Tdbeie_SPEC>;
    impl Tdbeie {
        #[doc = "Disables High Priority Tx Data Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Tx Data Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfie_SPEC;
    pub type Rdbfie = crate::EnumBitfieldStruct<u8, Rdbfie_SPEC>;
    impl Rdbfie {
        #[doc = "Disables High Priority Rx Data Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Rx Data Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqeie_SPEC;
    pub type Cmdqeie = crate::EnumBitfieldStruct<u8, Cmdqeie_SPEC>;
    impl Cmdqeie {
        #[doc = "Disables High Priority Command Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Command Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfie_SPEC;
    pub type Rspqfie = crate::EnumBitfieldStruct<u8, Rspqfie_SPEC>;
    impl Rspqfie {
        #[doc = "Disables High Priority Response Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Response Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtie_SPEC;
    pub type Tabtie = crate::EnumBitfieldStruct<u8, Tabtie_SPEC>;
    impl Tabtie {
        #[doc = "Disables High Priority Transfer Abort interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Abort interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Teie_SPEC;
    pub type Teie = crate::EnumBitfieldStruct<u8, Teie_SPEC>;
    impl Teie {
        #[doc = "Disables High Priority Transfer Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtieByLl_SPEC;
impl crate::sealed::RegSpec for HtieByLl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Interrupt Enable Register"]
pub type HtieByLl = crate::RegValueT<HtieByLl_SPEC>;

impl HtieByLl {
    #[doc = "High Priority Tx Data Buffer Empty Interrupt Enable"]
    #[inline(always)]
    pub fn tdbeie(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        htie_by_ll::Tdbeie,
        HtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            htie_by_ll::Tdbeie,
            HtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Full Interrupt Enable"]
    #[inline(always)]
    pub fn rdbfie(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htie_by_ll::Rdbfie,
        HtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htie_by_ll::Rdbfie,
            HtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Empty Interrupt Enable"]
    #[inline(always)]
    pub fn cmdqeie(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        htie_by_ll::Cmdqeie,
        HtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            htie_by_ll::Cmdqeie,
            HtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Full Interrupt Enable"]
    #[inline(always)]
    pub fn rspqfie(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        htie_by_ll::Rspqfie,
        HtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            htie_by_ll::Rspqfie,
            HtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Abort Interrupt Enable"]
    #[inline(always)]
    pub fn tabtie(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        htie_by_ll::Tabtie,
        HtieByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            htie_by_ll::Tabtie,
            HtieByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, HtieByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, HtieByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtieByLl {
    #[inline(always)]
    fn default() -> HtieByLl {
        <crate::RegValueT<HtieByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htie_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbeie_SPEC;
    pub type Tdbeie = crate::EnumBitfieldStruct<u8, Tdbeie_SPEC>;
    impl Tdbeie {
        #[doc = "Disables High Priority Tx Data Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Tx Data Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbfie_SPEC;
    pub type Rdbfie = crate::EnumBitfieldStruct<u8, Rdbfie_SPEC>;
    impl Rdbfie {
        #[doc = "Disables High Priority Rx Data Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Rx Data Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqeie_SPEC;
    pub type Cmdqeie = crate::EnumBitfieldStruct<u8, Cmdqeie_SPEC>;
    impl Cmdqeie {
        #[doc = "Disables High Priority Command Buffer Empty Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Command Buffer Empty Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqfie_SPEC;
    pub type Rspqfie = crate::EnumBitfieldStruct<u8, Rspqfie_SPEC>;
    impl Rspqfie {
        #[doc = "Disables High Priority Response Buffer Full Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Response Buffer Full Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtie_SPEC;
    pub type Tabtie = crate::EnumBitfieldStruct<u8, Tabtie_SPEC>;
    impl Tabtie {
        #[doc = "Disables High Priority Transfer Abort interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Abort interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtieByLh_SPEC;
impl crate::sealed::RegSpec for HtieByLh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Interrupt Enable Register"]
pub type HtieByLh = crate::RegValueT<HtieByLh_SPEC>;

impl HtieByLh {
    #[doc = "High Priority Transfer Error Interrupt Enable"]
    #[inline(always)]
    pub fn teie(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htie_by_lh::Teie,
        HtieByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htie_by_lh::Teie,
            HtieByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000. The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, HtieByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, HtieByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HtieByLh {
    #[inline(always)]
    fn default() -> HtieByLh {
        <crate::RegValueT<HtieByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htie_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Teie_SPEC;
    pub type Teie = crate::EnumBitfieldStruct<u8, Teie_SPEC>;
    impl Teie {
        #[doc = "Disables High Priority Transfer Error Interrupt Signal."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables High Priority Transfer Error Interrupt Signal."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Htstfc_SPEC;
impl crate::sealed::RegSpec for Htstfc_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Transfer Status Force Register"]
pub type Htstfc = crate::RegValueT<Htstfc_SPEC>;

impl Htstfc {
    #[doc = "High Priority Tx Data Buffer Empty Force"]
    #[inline(always)]
    pub fn tdbefc(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, htstfc::Tdbefc, Htstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<0,0x1,1,0,htstfc::Tdbefc, Htstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Rx Data Buffer Full Force"]
    #[inline(always)]
    pub fn rdbffc(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, htstfc::Rdbffc, Htstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<1,0x1,1,0,htstfc::Rdbffc, Htstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Command Queue Empty Force"]
    #[inline(always)]
    pub fn cmdqefc(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, htstfc::Cmdqefc, Htstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<3,0x1,1,0,htstfc::Cmdqefc, Htstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Response Queue Full Force"]
    #[inline(always)]
    pub fn rspqffc(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, htstfc::Rspqffc, Htstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<4,0x1,1,0,htstfc::Rspqffc, Htstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Transfer Abort Force"]
    #[inline(always)]
    pub fn tabtfc(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, htstfc::Tabtfc, Htstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<5,0x1,1,0,htstfc::Tabtfc, Htstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "High Priority Transfer Error Force"]
    #[inline(always)]
    pub fn tefc(
        self,
    ) -> crate::common::RegisterField<9, 0x1, 1, 0, htstfc::Tefc, Htstfc_SPEC, crate::common::W>
    {
        crate::common::RegisterField::<9,0x1,1,0,htstfc::Tefc, Htstfc_SPEC,crate::common::W>::from_register(self,0)
    }
    #[doc = "The write value should be 0000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3fffff, 1, 0, u32, Htstfc_SPEC, crate::common::W> {
        crate::common::RegisterField::<10,0x3fffff,1,0,u32, Htstfc_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Htstfc {
    #[inline(always)]
    fn default() -> Htstfc {
        <crate::RegValueT<Htstfc_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htstfc {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbefc_SPEC;
    pub type Tdbefc = crate::EnumBitfieldStruct<u8, Tdbefc_SPEC>;
    impl Tdbefc {
        #[doc = "not Force High Priority Tx Data Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Tx Data Buffer Empty Interrupt for software"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbffc_SPEC;
    pub type Rdbffc = crate::EnumBitfieldStruct<u8, Rdbffc_SPEC>;
    impl Rdbffc {
        #[doc = "not Force High Priority Rx Data Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Rx Data Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqefc_SPEC;
    pub type Cmdqefc = crate::EnumBitfieldStruct<u8, Cmdqefc_SPEC>;
    impl Cmdqefc {
        #[doc = "not Force High Priority Command Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Command Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqffc_SPEC;
    pub type Rspqffc = crate::EnumBitfieldStruct<u8, Rspqffc_SPEC>;
    impl Rspqffc {
        #[doc = "not Force High Priority Response Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Response Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtfc_SPEC;
    pub type Tabtfc = crate::EnumBitfieldStruct<u8, Tabtfc_SPEC>;
    impl Tabtfc {
        #[doc = "not Force High Priority Transfer Abort Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Transfer Abort Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tefc_SPEC;
    pub type Tefc = crate::EnumBitfieldStruct<u8, Tefc_SPEC>;
    impl Tefc {
        #[doc = "not Force High Priority Transfer Error Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Transfer Error Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtstfcHaL_SPEC;
impl crate::sealed::RegSpec for HtstfcHaL_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Transfer Status Force Register"]
pub type HtstfcHaL = crate::RegValueT<HtstfcHaL_SPEC>;

impl HtstfcHaL {
    #[doc = "High Priority Tx Data Buffer Empty Force"]
    #[inline(always)]
    pub fn tdbefc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        htstfc_ha_l::Tdbefc,
        HtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            htstfc_ha_l::Tdbefc,
            HtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Full Force"]
    #[inline(always)]
    pub fn rdbffc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htstfc_ha_l::Rdbffc,
        HtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htstfc_ha_l::Rdbffc,
            HtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Empty Force"]
    #[inline(always)]
    pub fn cmdqefc(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        htstfc_ha_l::Cmdqefc,
        HtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            htstfc_ha_l::Cmdqefc,
            HtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Full Force"]
    #[inline(always)]
    pub fn rspqffc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        htstfc_ha_l::Rspqffc,
        HtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            htstfc_ha_l::Rspqffc,
            HtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Abort Force"]
    #[inline(always)]
    pub fn tabtfc(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        htstfc_ha_l::Tabtfc,
        HtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            htstfc_ha_l::Tabtfc,
            HtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Error Force"]
    #[inline(always)]
    pub fn tefc(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        htstfc_ha_l::Tefc,
        HtstfcHaL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            htstfc_ha_l::Tefc,
            HtstfcHaL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, HtstfcHaL_SPEC, crate::common::W> {
        crate::common::RegisterField::<10,0x3f,1,0,u8, HtstfcHaL_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for HtstfcHaL {
    #[inline(always)]
    fn default() -> HtstfcHaL {
        <crate::RegValueT<HtstfcHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htstfc_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbefc_SPEC;
    pub type Tdbefc = crate::EnumBitfieldStruct<u8, Tdbefc_SPEC>;
    impl Tdbefc {
        #[doc = "not Force High Priority Tx Data Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Tx Data Buffer Empty Interrupt for software"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbffc_SPEC;
    pub type Rdbffc = crate::EnumBitfieldStruct<u8, Rdbffc_SPEC>;
    impl Rdbffc {
        #[doc = "not Force High Priority Rx Data Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Rx Data Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqefc_SPEC;
    pub type Cmdqefc = crate::EnumBitfieldStruct<u8, Cmdqefc_SPEC>;
    impl Cmdqefc {
        #[doc = "not Force High Priority Command Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Command Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqffc_SPEC;
    pub type Rspqffc = crate::EnumBitfieldStruct<u8, Rspqffc_SPEC>;
    impl Rspqffc {
        #[doc = "not Force High Priority Response Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Response Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtfc_SPEC;
    pub type Tabtfc = crate::EnumBitfieldStruct<u8, Tabtfc_SPEC>;
    impl Tabtfc {
        #[doc = "not Force High Priority Transfer Abort Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Transfer Abort Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tefc_SPEC;
    pub type Tefc = crate::EnumBitfieldStruct<u8, Tefc_SPEC>;
    impl Tefc {
        #[doc = "not Force High Priority Transfer Error Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Transfer Error Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtstfcByLl_SPEC;
impl crate::sealed::RegSpec for HtstfcByLl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Status Force Register"]
pub type HtstfcByLl = crate::RegValueT<HtstfcByLl_SPEC>;

impl HtstfcByLl {
    #[doc = "High Priority Tx Data Buffer Empty Force"]
    #[inline(always)]
    pub fn tdbefc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        htstfc_by_ll::Tdbefc,
        HtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            htstfc_by_ll::Tdbefc,
            HtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Rx Data Buffer Full Force"]
    #[inline(always)]
    pub fn rdbffc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htstfc_by_ll::Rdbffc,
        HtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htstfc_by_ll::Rdbffc,
            HtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Command Queue Empty Force"]
    #[inline(always)]
    pub fn cmdqefc(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        htstfc_by_ll::Cmdqefc,
        HtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            htstfc_by_ll::Cmdqefc,
            HtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Response Queue Full Force"]
    #[inline(always)]
    pub fn rspqffc(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        htstfc_by_ll::Rspqffc,
        HtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            htstfc_by_ll::Rspqffc,
            HtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "High Priority Transfer Abort Force"]
    #[inline(always)]
    pub fn tabtfc(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        htstfc_by_ll::Tabtfc,
        HtstfcByLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            htstfc_by_ll::Tabtfc,
            HtstfcByLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, HtstfcByLl_SPEC, crate::common::W> {
        crate::common::RegisterField::<6,0x3,1,0,u8, HtstfcByLl_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for HtstfcByLl {
    #[inline(always)]
    fn default() -> HtstfcByLl {
        <crate::RegValueT<HtstfcByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htstfc_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tdbefc_SPEC;
    pub type Tdbefc = crate::EnumBitfieldStruct<u8, Tdbefc_SPEC>;
    impl Tdbefc {
        #[doc = "not Force High Priority Tx Data Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Tx Data Buffer Empty Interrupt for software"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rdbffc_SPEC;
    pub type Rdbffc = crate::EnumBitfieldStruct<u8, Rdbffc_SPEC>;
    impl Rdbffc {
        #[doc = "not Force High Priority Rx Data Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Rx Data Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cmdqefc_SPEC;
    pub type Cmdqefc = crate::EnumBitfieldStruct<u8, Cmdqefc_SPEC>;
    impl Cmdqefc {
        #[doc = "not Force High Priority Command Buffer Empty Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Command Buffer Empty Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rspqffc_SPEC;
    pub type Rspqffc = crate::EnumBitfieldStruct<u8, Rspqffc_SPEC>;
    impl Rspqffc {
        #[doc = "not Force High Priority Response Buffer Full Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Response Buffer Full Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tabtfc_SPEC;
    pub type Tabtfc = crate::EnumBitfieldStruct<u8, Tabtfc_SPEC>;
    impl Tabtfc {
        #[doc = "not Force High Priority Transfer Abort Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Transfer Abort Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HtstfcByLh_SPEC;
impl crate::sealed::RegSpec for HtstfcByLh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Transfer Status Force Register"]
pub type HtstfcByLh = crate::RegValueT<HtstfcByLh_SPEC>;

impl HtstfcByLh {
    #[doc = "High Priority Transfer Error Force"]
    #[inline(always)]
    pub fn tefc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        htstfc_by_lh::Tefc,
        HtstfcByLh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            htstfc_by_lh::Tefc,
            HtstfcByLh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }
    #[doc = "The write value should be 000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, HtstfcByLh_SPEC, crate::common::W> {
        crate::common::RegisterField::<2,0x3f,1,0,u8, HtstfcByLh_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for HtstfcByLh {
    #[inline(always)]
    fn default() -> HtstfcByLh {
        <crate::RegValueT<HtstfcByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod htstfc_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tefc_SPEC;
    pub type Tefc = crate::EnumBitfieldStruct<u8, Tefc_SPEC>;
    impl Tefc {
        #[doc = "not Force High Priority Transfer Error Interrupt for software testing."]
        pub const _0: Self = Self::new(0);
        #[doc = "Force High Priority Transfer Error Interrupt for software testing."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bcst_SPEC;
impl crate::sealed::RegSpec for Bcst_SPEC {
    type DataType = u32;
}
#[doc = "Bus Condition Status Register"]
pub type Bcst = crate::RegValueT<Bcst_SPEC>;

impl Bcst {
    #[doc = "Bus Free Detection Flag"]
    #[inline(always)]
    pub fn bfref(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bcst::Bfref, Bcst_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x1,1,0,bcst::Bfref, Bcst_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Bus Available Detection Flag"]
    #[inline(always)]
    pub fn bavlf(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, bcst::Bavlf, Bcst_SPEC, crate::common::R> {
        crate::common::RegisterField::<1,0x1,1,0,bcst::Bavlf, Bcst_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Bus Idle Detection Flag"]
    #[inline(always)]
    pub fn bidlf(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, bcst::Bidlf, Bcst_SPEC, crate::common::R> {
        crate::common::RegisterField::<2,0x1,1,0,bcst::Bidlf, Bcst_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fffffff, 1, 0, u32, Bcst_SPEC, crate::common::R> {
        crate::common::RegisterField::<3,0x1fffffff,1,0,u32, Bcst_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Bcst {
    #[inline(always)]
    fn default() -> Bcst {
        <crate::RegValueT<Bcst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bcst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bfref_SPEC;
    pub type Bfref = crate::EnumBitfieldStruct<u8, Bfref_SPEC>;
    impl Bfref {
        #[doc = "Have not Detected Bus Free"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Free"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bavlf_SPEC;
    pub type Bavlf = crate::EnumBitfieldStruct<u8, Bavlf_SPEC>;
    impl Bavlf {
        #[doc = "Have not Detected Bus Available"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Available"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bidlf_SPEC;
    pub type Bidlf = crate::EnumBitfieldStruct<u8, Bidlf_SPEC>;
    impl Bidlf {
        #[doc = "Have not Detected Bus Idle"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Idle"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BcstHaL_SPEC;
impl crate::sealed::RegSpec for BcstHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bus Condition Status Register"]
pub type BcstHaL = crate::RegValueT<BcstHaL_SPEC>;

impl BcstHaL {
    #[doc = "Bus Free Detection Flag"]
    #[inline(always)]
    pub fn bfref(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, bcst_ha_l::Bfref, BcstHaL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0x1,1,0,bcst_ha_l::Bfref, BcstHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Bus Available Detection Flag"]
    #[inline(always)]
    pub fn bavlf(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, bcst_ha_l::Bavlf, BcstHaL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<1,0x1,1,0,bcst_ha_l::Bavlf, BcstHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Bus Idle Detection Flag"]
    #[inline(always)]
    pub fn bidlf(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, bcst_ha_l::Bidlf, BcstHaL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<2,0x1,1,0,bcst_ha_l::Bidlf, BcstHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, BcstHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<3,0x1fff,1,0,u16, BcstHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for BcstHaL {
    #[inline(always)]
    fn default() -> BcstHaL {
        <crate::RegValueT<BcstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bcst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bfref_SPEC;
    pub type Bfref = crate::EnumBitfieldStruct<u8, Bfref_SPEC>;
    impl Bfref {
        #[doc = "Have not Detected Bus Free"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Free"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bavlf_SPEC;
    pub type Bavlf = crate::EnumBitfieldStruct<u8, Bavlf_SPEC>;
    impl Bavlf {
        #[doc = "Have not Detected Bus Available"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Available"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bidlf_SPEC;
    pub type Bidlf = crate::EnumBitfieldStruct<u8, Bidlf_SPEC>;
    impl Bidlf {
        #[doc = "Have not Detected Bus Idle"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Idle"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BcstByLl_SPEC;
impl crate::sealed::RegSpec for BcstByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bus Condition Status Register"]
pub type BcstByLl = crate::RegValueT<BcstByLl_SPEC>;

impl BcstByLl {
    #[doc = "Bus Free Detection Flag"]
    #[inline(always)]
    pub fn bfref(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        bcst_by_ll::Bfref,
        BcstByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            bcst_by_ll::Bfref,
            BcstByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Bus Available Detection Flag"]
    #[inline(always)]
    pub fn bavlf(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        bcst_by_ll::Bavlf,
        BcstByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            bcst_by_ll::Bavlf,
            BcstByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Bus Idle Detection Flag"]
    #[inline(always)]
    pub fn bidlf(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        bcst_by_ll::Bidlf,
        BcstByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            bcst_by_ll::Bidlf,
            BcstByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, BcstByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, BcstByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for BcstByLl {
    #[inline(always)]
    fn default() -> BcstByLl {
        <crate::RegValueT<BcstByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod bcst_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bfref_SPEC;
    pub type Bfref = crate::EnumBitfieldStruct<u8, Bfref_SPEC>;
    impl Bfref {
        #[doc = "Have not Detected Bus Free"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Free"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bavlf_SPEC;
    pub type Bavlf = crate::EnumBitfieldStruct<u8, Bavlf_SPEC>;
    impl Bavlf {
        #[doc = "Have not Detected Bus Available"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Available"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bidlf_SPEC;
    pub type Bidlf = crate::EnumBitfieldStruct<u8, Bidlf_SPEC>;
    impl Bidlf {
        #[doc = "Have not Detected Bus Idle"]
        pub const _0: Self = Self::new(0);
        #[doc = "Have Detected Bus Idle"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svst_SPEC;
impl crate::sealed::RegSpec for Svst_SPEC {
    type DataType = u32;
}
#[doc = "Slave Status Register"]
pub type Svst = crate::RegValueT<Svst_SPEC>;

impl Svst {
    #[doc = "General Call Address Detection Flag"]
    #[inline(always)]
    pub fn gcaf(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, svst::Gcaf, Svst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1,1,0,svst::Gcaf, Svst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Hs-mode Master Code Detection Flag"]
    #[inline(always)]
    pub fn hsmcf(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, svst::Hsmcf, Svst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x1,1,0,svst::Hsmcf, Svst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device-ID Address Detection Flag"]
    #[inline(always)]
    pub fn dvidf(
        self,
    ) -> crate::common::RegisterField<6, 0x1, 1, 0, svst::Dvidf, Svst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x1,1,0,svst::Dvidf, Svst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Host Address Detection Flag"]
    #[inline(always)]
    pub fn hoaf(
        self,
    ) -> crate::common::RegisterField<15, 0x1, 1, 0, svst::Hoaf, Svst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<15,0x1,1,0,svst::Hoaf, Svst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Address Detection Flag $x ($x=2 to 0)"]
    #[inline(always)]
    pub fn svaf(
        self,
    ) -> crate::common::RegisterField<16, 0x7, 1, 0, svst::Svaf, Svst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x7,1,0,svst::Svaf, Svst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<19, 0x1fff, 1, 0, u16, Svst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<19,0x1fff,1,0,u16, Svst_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Svst {
    #[inline(always)]
    fn default() -> Svst {
        <crate::RegValueT<Svst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Gcaf_SPEC;
    pub type Gcaf = crate::EnumBitfieldStruct<u8, Gcaf_SPEC>;
    impl Gcaf {
        #[doc = "General call address does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "General call address detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsmcf_SPEC;
    pub type Hsmcf = crate::EnumBitfieldStruct<u8, Hsmcf_SPEC>;
    impl Hsmcf {
        #[doc = "Hs-mode Master Code does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Hs-mode Master Code detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvidf_SPEC;
    pub type Dvidf = crate::EnumBitfieldStruct<u8, Dvidf_SPEC>;
    impl Dvidf {
        #[doc = "Device-ID command does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Device-ID command detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hoaf_SPEC;
    pub type Hoaf = crate::EnumBitfieldStruct<u8, Hoaf_SPEC>;
    impl Hoaf {
        #[doc = "Host address does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Host address detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svaf_SPEC;
    pub type Svaf = crate::EnumBitfieldStruct<u8, Svaf_SPEC>;
    impl Svaf {
        #[doc = "Slave{$x} does not detect"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave{$x} detect"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvstHaL_SPEC;
impl crate::sealed::RegSpec for SvstHaL_SPEC {
    type DataType = u16;
}
#[doc = "Slave Status Register"]
pub type SvstHaL = crate::RegValueT<SvstHaL_SPEC>;

impl SvstHaL {
    #[doc = "General Call Address Detection Flag"]
    #[inline(always)]
    pub fn gcaf(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, svst_ha_l::Gcaf, SvstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,svst_ha_l::Gcaf, SvstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Hs-mode Master Code Detection Flag"]
    #[inline(always)]
    pub fn hsmcf(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, svst_ha_l::Hsmcf, SvstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            svst_ha_l::Hsmcf,
            SvstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device-ID Address Detection Flag"]
    #[inline(always)]
    pub fn dvidf(
        self,
    ) -> crate::common::RegisterField<6, 0x1, 1, 0, svst_ha_l::Dvidf, SvstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            svst_ha_l::Dvidf,
            SvstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0xff, 1, 0, u8, SvstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0xff,1,0,u8, SvstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Host Address Detection Flag"]
    #[inline(always)]
    pub fn hoaf(
        self,
    ) -> crate::common::RegisterField<15, 0x1, 1, 0, svst_ha_l::Hoaf, SvstHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            svst_ha_l::Hoaf,
            SvstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for SvstHaL {
    #[inline(always)]
    fn default() -> SvstHaL {
        <crate::RegValueT<SvstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Gcaf_SPEC;
    pub type Gcaf = crate::EnumBitfieldStruct<u8, Gcaf_SPEC>;
    impl Gcaf {
        #[doc = "General call address does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "General call address detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsmcf_SPEC;
    pub type Hsmcf = crate::EnumBitfieldStruct<u8, Hsmcf_SPEC>;
    impl Hsmcf {
        #[doc = "Hs-mode Master Code does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Hs-mode Master Code detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvidf_SPEC;
    pub type Dvidf = crate::EnumBitfieldStruct<u8, Dvidf_SPEC>;
    impl Dvidf {
        #[doc = "Device-ID command does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Device-ID command detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hoaf_SPEC;
    pub type Hoaf = crate::EnumBitfieldStruct<u8, Hoaf_SPEC>;
    impl Hoaf {
        #[doc = "Host address does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Host address detects."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvstByLl_SPEC;
impl crate::sealed::RegSpec for SvstByLl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Status Register"]
pub type SvstByLl = crate::RegValueT<SvstByLl_SPEC>;

impl SvstByLl {
    #[doc = "General Call Address Detection Flag"]
    #[inline(always)]
    pub fn gcaf(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        svst_by_ll::Gcaf,
        SvstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            svst_by_ll::Gcaf,
            SvstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Hs-mode Master Code Detection Flag"]
    #[inline(always)]
    pub fn hsmcf(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        svst_by_ll::Hsmcf,
        SvstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            svst_by_ll::Hsmcf,
            SvstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device-ID Address Detection Flag"]
    #[inline(always)]
    pub fn dvidf(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        svst_by_ll::Dvidf,
        SvstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            svst_by_ll::Dvidf,
            SvstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, SvstByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, SvstByLl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for SvstByLl {
    #[inline(always)]
    fn default() -> SvstByLl {
        <crate::RegValueT<SvstByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svst_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Gcaf_SPEC;
    pub type Gcaf = crate::EnumBitfieldStruct<u8, Gcaf_SPEC>;
    impl Gcaf {
        #[doc = "General call address does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "General call address detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsmcf_SPEC;
    pub type Hsmcf = crate::EnumBitfieldStruct<u8, Hsmcf_SPEC>;
    impl Hsmcf {
        #[doc = "Hs-mode Master Code does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Hs-mode Master Code detects."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvidf_SPEC;
    pub type Dvidf = crate::EnumBitfieldStruct<u8, Dvidf_SPEC>;
    impl Dvidf {
        #[doc = "Device-ID command does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Device-ID command detects."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvstByLh_SPEC;
impl crate::sealed::RegSpec for SvstByLh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Status Register"]
pub type SvstByLh = crate::RegValueT<SvstByLh_SPEC>;

impl SvstByLh {
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, SvstByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, SvstByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Host Address Detection Flag"]
    #[inline(always)]
    pub fn hoaf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        svst_by_lh::Hoaf,
        SvstByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            svst_by_lh::Hoaf,
            SvstByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for SvstByLh {
    #[inline(always)]
    fn default() -> SvstByLh {
        <crate::RegValueT<SvstByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svst_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hoaf_SPEC;
    pub type Hoaf = crate::EnumBitfieldStruct<u8, Hoaf_SPEC>;
    impl Hoaf {
        #[doc = "Host address does not detect."]
        pub const _0: Self = Self::new(0);
        #[doc = "Host address detects."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvstHaH_SPEC;
impl crate::sealed::RegSpec for SvstHaH_SPEC {
    type DataType = u16;
}
#[doc = "Slave Status Register"]
pub type SvstHaH = crate::RegValueT<SvstHaH_SPEC>;

impl SvstHaH {
    #[doc = "Slave Address Detection Flag $x ($x=2 to 0)"]
    #[inline(always)]
    pub fn svaf(
        self,
    ) -> crate::common::RegisterField<0, 0x7, 1, 0, svst_ha_h::Svaf, SvstHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x7,1,0,svst_ha_h::Svaf, SvstHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, SvstHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1fff,1,0,u16, SvstHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SvstHaH {
    #[inline(always)]
    fn default() -> SvstHaH {
        <crate::RegValueT<SvstHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svst_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svaf_SPEC;
    pub type Svaf = crate::EnumBitfieldStruct<u8, Svaf_SPEC>;
    impl Svaf {
        #[doc = "Slave{$x} does not detect"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave{$x} detect"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvstByHl_SPEC;
impl crate::sealed::RegSpec for SvstByHl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Status Register"]
pub type SvstByHl = crate::RegValueT<SvstByHl_SPEC>;

impl SvstByHl {
    #[doc = "Slave Address Detection Flag $x ($x=2 to 0)"]
    #[inline(always)]
    pub fn svaf(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        svst_by_hl::Svaf,
        SvstByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            svst_by_hl::Svaf,
            SvstByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, SvstByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, SvstByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SvstByHl {
    #[inline(always)]
    fn default() -> SvstByHl {
        <crate::RegValueT<SvstByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svst_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svaf_SPEC;
    pub type Svaf = crate::EnumBitfieldStruct<u8, Svaf_SPEC>;
    impl Svaf {
        #[doc = "Slave{$x} does not detect"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave{$x} detect"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Wust_SPEC;
impl crate::sealed::RegSpec for Wust_SPEC {
    type DataType = u32;
}
#[doc = "Wake Up Unit Operating Status Register"]
pub type Wust = crate::RegValueT<Wust_SPEC>;

impl Wust {
    #[doc = "Wake-Up function Asynchronous operation status Flag"]
    #[inline(always)]
    pub fn wuasynf(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, wust::Wuasynf, Wust_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0x1,1,0,wust::Wuasynf, Wust_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ffffff, 1, 0, u32, Wust_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7ffffff,1,0,u32, Wust_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Wust {
    #[inline(always)]
    fn default() -> Wust {
        <crate::RegValueT<Wust_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod wust {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wuasynf_SPEC;
    pub type Wuasynf = crate::EnumBitfieldStruct<u8, Wuasynf_SPEC>;
    impl Wuasynf {
        #[doc = "This IP synchronous circuit enable condition"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP asynchronous circuit enable condition"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct WustHaL_SPEC;
impl crate::sealed::RegSpec for WustHaL_SPEC {
    type DataType = u16;
}
#[doc = "Wake Up Unit Operating Status Register"]
pub type WustHaL = crate::RegValueT<WustHaL_SPEC>;

impl WustHaL {
    #[doc = "Wake-Up function Asynchronous operation status Flag"]
    #[inline(always)]
    pub fn wuasynf(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        wust_ha_l::Wuasynf,
        WustHaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            wust_ha_l::Wuasynf,
            WustHaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ff, 1, 0, u16, WustHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7ff,1,0,u16, WustHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for WustHaL {
    #[inline(always)]
    fn default() -> WustHaL {
        <crate::RegValueT<WustHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod wust_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wuasynf_SPEC;
    pub type Wuasynf = crate::EnumBitfieldStruct<u8, Wuasynf_SPEC>;
    impl Wuasynf {
        #[doc = "This IP synchronous circuit enable condition"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP asynchronous circuit enable condition"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct WustByLl_SPEC;
impl crate::sealed::RegSpec for WustByLl_SPEC {
    type DataType = u8;
}
#[doc = "Wake Up Unit Operating Status Register"]
pub type WustByLl = crate::RegValueT<WustByLl_SPEC>;

impl WustByLl {
    #[doc = "Wake-Up function Asynchronous operation status Flag"]
    #[inline(always)]
    pub fn wuasynf(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        wust_by_ll::Wuasynf,
        WustByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            wust_by_ll::Wuasynf,
            WustByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, WustByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8, WustByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for WustByLl {
    #[inline(always)]
    fn default() -> WustByLl {
        <crate::RegValueT<WustByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod wust_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wuasynf_SPEC;
    pub type Wuasynf = crate::EnumBitfieldStruct<u8, Wuasynf_SPEC>;
    impl Wuasynf {
        #[doc = "This IP synchronous circuit enable condition"]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP asynchronous circuit enable condition"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Mrccpt_SPEC;
impl crate::sealed::RegSpec for Mrccpt_SPEC {
    type DataType = u32;
}
#[doc = "MsyncCNT Counter Capture Register"]
pub type Mrccpt = crate::RegValueT<Mrccpt_SPEC>;

impl Mrccpt {
    #[doc = "MSyncCNT Counter Capture"]
    #[inline(always)]
    pub fn mrccpt(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Mrccpt_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Mrccpt_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Mrccpt {
    #[inline(always)]
    fn default() -> Mrccpt {
        <crate::RegValueT<Mrccpt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas0_SPEC;
impl crate::sealed::RegSpec for Datbas0_SPEC {
    type DataType = u32;
}
#[doc = "Device Address Table Basic Register 0"]
pub type Datbas0 = crate::RegValueT<Datbas0_SPEC>;

impl Datbas0 {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, datbas0::Dvibipl, Datbas0_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas0::Dvibipl,
            Datbas0_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas0::Dvsirrj,
        Datbas0_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas0::Dvsirrj,
            Datbas0_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, datbas0::Dvmrrj, Datbas0_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas0::Dvmrrj,
            Datbas0_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas0::Dvibits,
        Datbas0_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas0::Dvibits,
            Datbas0_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Datbas0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Datbas0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Datbas0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Datbas0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Datbas0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Datbas0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, datbas0::Dvtyp, Datbas0_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,datbas0::Dvtyp, Datbas0_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas0 {
    #[inline(always)]
    fn default() -> Datbas0 {
        <crate::RegValueT<Datbas0_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas0 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas0HaL_SPEC;
impl crate::sealed::RegSpec for Datbas0HaL_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 0"]
pub type Datbas0HaL = crate::RegValueT<Datbas0HaL_SPEC>;

impl Datbas0HaL {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas0HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas0HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1f, 1, 0, u8, Datbas0HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1f,1,0,u8, Datbas0HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        datbas0_ha_l::Dvibipl,
        Datbas0HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas0_ha_l::Dvibipl,
            Datbas0HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas0_ha_l::Dvsirrj,
        Datbas0HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas0_ha_l::Dvsirrj,
            Datbas0HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        datbas0_ha_l::Dvmrrj,
        Datbas0HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas0_ha_l::Dvmrrj,
            Datbas0HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas0_ha_l::Dvibits,
        Datbas0HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas0_ha_l::Dvibits,
            Datbas0HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas0HaL {
    #[inline(always)]
    fn default() -> Datbas0HaL {
        <crate::RegValueT<Datbas0HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas0_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas0ByLl_SPEC;
impl crate::sealed::RegSpec for Datbas0ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 0"]
pub type Datbas0ByLl = crate::RegValueT<Datbas0ByLl_SPEC>;

impl Datbas0ByLl {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas0ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas0ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Datbas0ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Datbas0ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas0ByLl {
    #[inline(always)]
    fn default() -> Datbas0ByLl {
        <crate::RegValueT<Datbas0ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas0ByLh_SPEC;
impl crate::sealed::RegSpec for Datbas0ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 0"]
pub type Datbas0ByLh = crate::RegValueT<Datbas0ByLh_SPEC>;

impl Datbas0ByLh {
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Datbas0ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Datbas0ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        datbas0_by_lh::Dvibipl,
        Datbas0ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            datbas0_by_lh::Dvibipl,
            Datbas0ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        datbas0_by_lh::Dvsirrj,
        Datbas0ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            datbas0_by_lh::Dvsirrj,
            Datbas0ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        datbas0_by_lh::Dvmrrj,
        Datbas0ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            datbas0_by_lh::Dvmrrj,
            Datbas0ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas0_by_lh::Dvibits,
        Datbas0ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas0_by_lh::Dvibits,
            Datbas0ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas0ByLh {
    #[inline(always)]
    fn default() -> Datbas0ByLh {
        <crate::RegValueT<Datbas0ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas0_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas0HaH_SPEC;
impl crate::sealed::RegSpec for Datbas0HaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 0"]
pub type Datbas0HaH = crate::RegValueT<Datbas0HaH_SPEC>;

impl Datbas0HaH {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas0HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas0HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Datbas0HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, Datbas0HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, Datbas0HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, Datbas0HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas0_ha_h::Dvtyp,
        Datbas0HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas0_ha_h::Dvtyp,
            Datbas0HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas0HaH {
    #[inline(always)]
    fn default() -> Datbas0HaH {
        <crate::RegValueT<Datbas0HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas0_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas0ByHl_SPEC;
impl crate::sealed::RegSpec for Datbas0ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 0"]
pub type Datbas0ByHl = crate::RegValueT<Datbas0ByHl_SPEC>;

impl Datbas0ByHl {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas0ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas0ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas0ByHl {
    #[inline(always)]
    fn default() -> Datbas0ByHl {
        <crate::RegValueT<Datbas0ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas0ByHh_SPEC;
impl crate::sealed::RegSpec for Datbas0ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 0"]
pub type Datbas0ByHh = crate::RegValueT<Datbas0ByHh_SPEC>;

impl Datbas0ByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Datbas0ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Datbas0ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, Datbas0ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, Datbas0ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas0_by_hh::Dvtyp,
        Datbas0ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas0_by_hh::Dvtyp,
            Datbas0ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas0ByHh {
    #[inline(always)]
    fn default() -> Datbas0ByHh {
        <crate::RegValueT<Datbas0ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas0_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas1_SPEC;
impl crate::sealed::RegSpec for Datbas1_SPEC {
    type DataType = u32;
}
#[doc = "Device Address Table Basic Register 1"]
pub type Datbas1 = crate::RegValueT<Datbas1_SPEC>;

impl Datbas1 {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, datbas1::Dvibipl, Datbas1_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas1::Dvibipl,
            Datbas1_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas1::Dvsirrj,
        Datbas1_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas1::Dvsirrj,
            Datbas1_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, datbas1::Dvmrrj, Datbas1_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas1::Dvmrrj,
            Datbas1_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas1::Dvibits,
        Datbas1_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas1::Dvibits,
            Datbas1_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Datbas1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Datbas1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Datbas1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Datbas1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Datbas1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Datbas1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, datbas1::Dvtyp, Datbas1_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,datbas1::Dvtyp, Datbas1_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas1 {
    #[inline(always)]
    fn default() -> Datbas1 {
        <crate::RegValueT<Datbas1_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas1 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas1HaL_SPEC;
impl crate::sealed::RegSpec for Datbas1HaL_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 1"]
pub type Datbas1HaL = crate::RegValueT<Datbas1HaL_SPEC>;

impl Datbas1HaL {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas1HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas1HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1f, 1, 0, u8, Datbas1HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1f,1,0,u8, Datbas1HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        datbas1_ha_l::Dvibipl,
        Datbas1HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas1_ha_l::Dvibipl,
            Datbas1HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas1_ha_l::Dvsirrj,
        Datbas1HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas1_ha_l::Dvsirrj,
            Datbas1HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        datbas1_ha_l::Dvmrrj,
        Datbas1HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas1_ha_l::Dvmrrj,
            Datbas1HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas1_ha_l::Dvibits,
        Datbas1HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas1_ha_l::Dvibits,
            Datbas1HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas1HaL {
    #[inline(always)]
    fn default() -> Datbas1HaL {
        <crate::RegValueT<Datbas1HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas1_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas1ByLl_SPEC;
impl crate::sealed::RegSpec for Datbas1ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 1"]
pub type Datbas1ByLl = crate::RegValueT<Datbas1ByLl_SPEC>;

impl Datbas1ByLl {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas1ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas1ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Datbas1ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Datbas1ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas1ByLl {
    #[inline(always)]
    fn default() -> Datbas1ByLl {
        <crate::RegValueT<Datbas1ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas1ByLh_SPEC;
impl crate::sealed::RegSpec for Datbas1ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 1"]
pub type Datbas1ByLh = crate::RegValueT<Datbas1ByLh_SPEC>;

impl Datbas1ByLh {
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Datbas1ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Datbas1ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        datbas1_by_lh::Dvibipl,
        Datbas1ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            datbas1_by_lh::Dvibipl,
            Datbas1ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        datbas1_by_lh::Dvsirrj,
        Datbas1ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            datbas1_by_lh::Dvsirrj,
            Datbas1ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        datbas1_by_lh::Dvmrrj,
        Datbas1ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            datbas1_by_lh::Dvmrrj,
            Datbas1ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas1_by_lh::Dvibits,
        Datbas1ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas1_by_lh::Dvibits,
            Datbas1ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas1ByLh {
    #[inline(always)]
    fn default() -> Datbas1ByLh {
        <crate::RegValueT<Datbas1ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas1_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas1HaH_SPEC;
impl crate::sealed::RegSpec for Datbas1HaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 1"]
pub type Datbas1HaH = crate::RegValueT<Datbas1HaH_SPEC>;

impl Datbas1HaH {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas1HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas1HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Datbas1HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, Datbas1HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, Datbas1HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, Datbas1HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas1_ha_h::Dvtyp,
        Datbas1HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas1_ha_h::Dvtyp,
            Datbas1HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas1HaH {
    #[inline(always)]
    fn default() -> Datbas1HaH {
        <crate::RegValueT<Datbas1HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas1_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas1ByHl_SPEC;
impl crate::sealed::RegSpec for Datbas1ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 1"]
pub type Datbas1ByHl = crate::RegValueT<Datbas1ByHl_SPEC>;

impl Datbas1ByHl {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas1ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas1ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas1ByHl {
    #[inline(always)]
    fn default() -> Datbas1ByHl {
        <crate::RegValueT<Datbas1ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas1ByHh_SPEC;
impl crate::sealed::RegSpec for Datbas1ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 1"]
pub type Datbas1ByHh = crate::RegValueT<Datbas1ByHh_SPEC>;

impl Datbas1ByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Datbas1ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Datbas1ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, Datbas1ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, Datbas1ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas1_by_hh::Dvtyp,
        Datbas1ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas1_by_hh::Dvtyp,
            Datbas1ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas1ByHh {
    #[inline(always)]
    fn default() -> Datbas1ByHh {
        <crate::RegValueT<Datbas1ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas1_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas2_SPEC;
impl crate::sealed::RegSpec for Datbas2_SPEC {
    type DataType = u32;
}
#[doc = "Device Address Table Basic Register 2"]
pub type Datbas2 = crate::RegValueT<Datbas2_SPEC>;

impl Datbas2 {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas2_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas2_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, datbas2::Dvibipl, Datbas2_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas2::Dvibipl,
            Datbas2_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas2::Dvsirrj,
        Datbas2_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas2::Dvsirrj,
            Datbas2_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, datbas2::Dvmrrj, Datbas2_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas2::Dvmrrj,
            Datbas2_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas2::Dvibits,
        Datbas2_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas2::Dvibits,
            Datbas2_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Datbas2_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Datbas2_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Datbas2_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Datbas2_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Datbas2_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Datbas2_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, datbas2::Dvtyp, Datbas2_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,datbas2::Dvtyp, Datbas2_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas2 {
    #[inline(always)]
    fn default() -> Datbas2 {
        <crate::RegValueT<Datbas2_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas2 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas2HaL_SPEC;
impl crate::sealed::RegSpec for Datbas2HaL_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 2"]
pub type Datbas2HaL = crate::RegValueT<Datbas2HaL_SPEC>;

impl Datbas2HaL {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas2HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas2HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1f, 1, 0, u8, Datbas2HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1f,1,0,u8, Datbas2HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        datbas2_ha_l::Dvibipl,
        Datbas2HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas2_ha_l::Dvibipl,
            Datbas2HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas2_ha_l::Dvsirrj,
        Datbas2HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas2_ha_l::Dvsirrj,
            Datbas2HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        datbas2_ha_l::Dvmrrj,
        Datbas2HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas2_ha_l::Dvmrrj,
            Datbas2HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas2_ha_l::Dvibits,
        Datbas2HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas2_ha_l::Dvibits,
            Datbas2HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas2HaL {
    #[inline(always)]
    fn default() -> Datbas2HaL {
        <crate::RegValueT<Datbas2HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas2_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas2ByLl_SPEC;
impl crate::sealed::RegSpec for Datbas2ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 2"]
pub type Datbas2ByLl = crate::RegValueT<Datbas2ByLl_SPEC>;

impl Datbas2ByLl {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas2ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas2ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Datbas2ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Datbas2ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas2ByLl {
    #[inline(always)]
    fn default() -> Datbas2ByLl {
        <crate::RegValueT<Datbas2ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas2ByLh_SPEC;
impl crate::sealed::RegSpec for Datbas2ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 2"]
pub type Datbas2ByLh = crate::RegValueT<Datbas2ByLh_SPEC>;

impl Datbas2ByLh {
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Datbas2ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Datbas2ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        datbas2_by_lh::Dvibipl,
        Datbas2ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            datbas2_by_lh::Dvibipl,
            Datbas2ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        datbas2_by_lh::Dvsirrj,
        Datbas2ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            datbas2_by_lh::Dvsirrj,
            Datbas2ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        datbas2_by_lh::Dvmrrj,
        Datbas2ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            datbas2_by_lh::Dvmrrj,
            Datbas2ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas2_by_lh::Dvibits,
        Datbas2ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas2_by_lh::Dvibits,
            Datbas2ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas2ByLh {
    #[inline(always)]
    fn default() -> Datbas2ByLh {
        <crate::RegValueT<Datbas2ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas2_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas2HaH_SPEC;
impl crate::sealed::RegSpec for Datbas2HaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 2"]
pub type Datbas2HaH = crate::RegValueT<Datbas2HaH_SPEC>;

impl Datbas2HaH {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas2HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas2HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Datbas2HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, Datbas2HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, Datbas2HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, Datbas2HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas2_ha_h::Dvtyp,
        Datbas2HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas2_ha_h::Dvtyp,
            Datbas2HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas2HaH {
    #[inline(always)]
    fn default() -> Datbas2HaH {
        <crate::RegValueT<Datbas2HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas2_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas2ByHl_SPEC;
impl crate::sealed::RegSpec for Datbas2ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 2"]
pub type Datbas2ByHl = crate::RegValueT<Datbas2ByHl_SPEC>;

impl Datbas2ByHl {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas2ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas2ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas2ByHl {
    #[inline(always)]
    fn default() -> Datbas2ByHl {
        <crate::RegValueT<Datbas2ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas2ByHh_SPEC;
impl crate::sealed::RegSpec for Datbas2ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 2"]
pub type Datbas2ByHh = crate::RegValueT<Datbas2ByHh_SPEC>;

impl Datbas2ByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Datbas2ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Datbas2ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, Datbas2ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, Datbas2ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas2_by_hh::Dvtyp,
        Datbas2ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas2_by_hh::Dvtyp,
            Datbas2ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas2ByHh {
    #[inline(always)]
    fn default() -> Datbas2ByHh {
        <crate::RegValueT<Datbas2ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas2_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas3_SPEC;
impl crate::sealed::RegSpec for Datbas3_SPEC {
    type DataType = u32;
}
#[doc = "Device Address Table Basic Register 3"]
pub type Datbas3 = crate::RegValueT<Datbas3_SPEC>;

impl Datbas3 {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas3_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas3_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, datbas3::Dvibipl, Datbas3_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas3::Dvibipl,
            Datbas3_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas3::Dvsirrj,
        Datbas3_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas3::Dvsirrj,
            Datbas3_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, datbas3::Dvmrrj, Datbas3_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas3::Dvmrrj,
            Datbas3_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas3::Dvibits,
        Datbas3_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas3::Dvibits,
            Datbas3_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Datbas3_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Datbas3_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Datbas3_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Datbas3_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Datbas3_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Datbas3_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, datbas3::Dvtyp, Datbas3_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,datbas3::Dvtyp, Datbas3_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas3 {
    #[inline(always)]
    fn default() -> Datbas3 {
        <crate::RegValueT<Datbas3_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas3 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas3HaL_SPEC;
impl crate::sealed::RegSpec for Datbas3HaL_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 3"]
pub type Datbas3HaL = crate::RegValueT<Datbas3HaL_SPEC>;

impl Datbas3HaL {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas3HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas3HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1f, 1, 0, u8, Datbas3HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1f,1,0,u8, Datbas3HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        datbas3_ha_l::Dvibipl,
        Datbas3HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas3_ha_l::Dvibipl,
            Datbas3HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas3_ha_l::Dvsirrj,
        Datbas3HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas3_ha_l::Dvsirrj,
            Datbas3HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        datbas3_ha_l::Dvmrrj,
        Datbas3HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas3_ha_l::Dvmrrj,
            Datbas3HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas3_ha_l::Dvibits,
        Datbas3HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas3_ha_l::Dvibits,
            Datbas3HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas3HaL {
    #[inline(always)]
    fn default() -> Datbas3HaL {
        <crate::RegValueT<Datbas3HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas3_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas3ByLl_SPEC;
impl crate::sealed::RegSpec for Datbas3ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 3"]
pub type Datbas3ByLl = crate::RegValueT<Datbas3ByLl_SPEC>;

impl Datbas3ByLl {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas3ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas3ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Datbas3ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Datbas3ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas3ByLl {
    #[inline(always)]
    fn default() -> Datbas3ByLl {
        <crate::RegValueT<Datbas3ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas3ByLh_SPEC;
impl crate::sealed::RegSpec for Datbas3ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 3"]
pub type Datbas3ByLh = crate::RegValueT<Datbas3ByLh_SPEC>;

impl Datbas3ByLh {
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Datbas3ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Datbas3ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        datbas3_by_lh::Dvibipl,
        Datbas3ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            datbas3_by_lh::Dvibipl,
            Datbas3ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        datbas3_by_lh::Dvsirrj,
        Datbas3ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            datbas3_by_lh::Dvsirrj,
            Datbas3ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        datbas3_by_lh::Dvmrrj,
        Datbas3ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            datbas3_by_lh::Dvmrrj,
            Datbas3ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas3_by_lh::Dvibits,
        Datbas3ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas3_by_lh::Dvibits,
            Datbas3ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas3ByLh {
    #[inline(always)]
    fn default() -> Datbas3ByLh {
        <crate::RegValueT<Datbas3ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas3_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas3HaH_SPEC;
impl crate::sealed::RegSpec for Datbas3HaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 3"]
pub type Datbas3HaH = crate::RegValueT<Datbas3HaH_SPEC>;

impl Datbas3HaH {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas3HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas3HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Datbas3HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, Datbas3HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, Datbas3HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, Datbas3HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas3_ha_h::Dvtyp,
        Datbas3HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas3_ha_h::Dvtyp,
            Datbas3HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas3HaH {
    #[inline(always)]
    fn default() -> Datbas3HaH {
        <crate::RegValueT<Datbas3HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas3_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas3ByHl_SPEC;
impl crate::sealed::RegSpec for Datbas3ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 3"]
pub type Datbas3ByHl = crate::RegValueT<Datbas3ByHl_SPEC>;

impl Datbas3ByHl {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas3ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas3ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas3ByHl {
    #[inline(always)]
    fn default() -> Datbas3ByHl {
        <crate::RegValueT<Datbas3ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas3ByHh_SPEC;
impl crate::sealed::RegSpec for Datbas3ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 3"]
pub type Datbas3ByHh = crate::RegValueT<Datbas3ByHh_SPEC>;

impl Datbas3ByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Datbas3ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Datbas3ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, Datbas3ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, Datbas3ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas3_by_hh::Dvtyp,
        Datbas3ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas3_by_hh::Dvtyp,
            Datbas3ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas3ByHh {
    #[inline(always)]
    fn default() -> Datbas3ByHh {
        <crate::RegValueT<Datbas3ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas3_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas4_SPEC;
impl crate::sealed::RegSpec for Datbas4_SPEC {
    type DataType = u32;
}
#[doc = "Device Address Table Basic Register 4"]
pub type Datbas4 = crate::RegValueT<Datbas4_SPEC>;

impl Datbas4 {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas4_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas4_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, datbas4::Dvibipl, Datbas4_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas4::Dvibipl,
            Datbas4_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas4::Dvsirrj,
        Datbas4_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas4::Dvsirrj,
            Datbas4_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, datbas4::Dvmrrj, Datbas4_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas4::Dvmrrj,
            Datbas4_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas4::Dvibits,
        Datbas4_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas4::Dvibits,
            Datbas4_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Datbas4_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Datbas4_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Datbas4_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Datbas4_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Datbas4_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Datbas4_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, datbas4::Dvtyp, Datbas4_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,datbas4::Dvtyp, Datbas4_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas4 {
    #[inline(always)]
    fn default() -> Datbas4 {
        <crate::RegValueT<Datbas4_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas4 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas4HaL_SPEC;
impl crate::sealed::RegSpec for Datbas4HaL_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 4"]
pub type Datbas4HaL = crate::RegValueT<Datbas4HaL_SPEC>;

impl Datbas4HaL {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas4HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas4HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1f, 1, 0, u8, Datbas4HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1f,1,0,u8, Datbas4HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        datbas4_ha_l::Dvibipl,
        Datbas4HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas4_ha_l::Dvibipl,
            Datbas4HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas4_ha_l::Dvsirrj,
        Datbas4HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas4_ha_l::Dvsirrj,
            Datbas4HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        datbas4_ha_l::Dvmrrj,
        Datbas4HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas4_ha_l::Dvmrrj,
            Datbas4HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas4_ha_l::Dvibits,
        Datbas4HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas4_ha_l::Dvibits,
            Datbas4HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas4HaL {
    #[inline(always)]
    fn default() -> Datbas4HaL {
        <crate::RegValueT<Datbas4HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas4_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas4ByLl_SPEC;
impl crate::sealed::RegSpec for Datbas4ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 4"]
pub type Datbas4ByLl = crate::RegValueT<Datbas4ByLl_SPEC>;

impl Datbas4ByLl {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas4ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas4ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Datbas4ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Datbas4ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas4ByLl {
    #[inline(always)]
    fn default() -> Datbas4ByLl {
        <crate::RegValueT<Datbas4ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas4ByLh_SPEC;
impl crate::sealed::RegSpec for Datbas4ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 4"]
pub type Datbas4ByLh = crate::RegValueT<Datbas4ByLh_SPEC>;

impl Datbas4ByLh {
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Datbas4ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Datbas4ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        datbas4_by_lh::Dvibipl,
        Datbas4ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            datbas4_by_lh::Dvibipl,
            Datbas4ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        datbas4_by_lh::Dvsirrj,
        Datbas4ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            datbas4_by_lh::Dvsirrj,
            Datbas4ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        datbas4_by_lh::Dvmrrj,
        Datbas4ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            datbas4_by_lh::Dvmrrj,
            Datbas4ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas4_by_lh::Dvibits,
        Datbas4ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas4_by_lh::Dvibits,
            Datbas4ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas4ByLh {
    #[inline(always)]
    fn default() -> Datbas4ByLh {
        <crate::RegValueT<Datbas4ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas4_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas4HaH_SPEC;
impl crate::sealed::RegSpec for Datbas4HaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 4"]
pub type Datbas4HaH = crate::RegValueT<Datbas4HaH_SPEC>;

impl Datbas4HaH {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas4HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas4HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Datbas4HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, Datbas4HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, Datbas4HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, Datbas4HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas4_ha_h::Dvtyp,
        Datbas4HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas4_ha_h::Dvtyp,
            Datbas4HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas4HaH {
    #[inline(always)]
    fn default() -> Datbas4HaH {
        <crate::RegValueT<Datbas4HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas4_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas4ByHl_SPEC;
impl crate::sealed::RegSpec for Datbas4ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 4"]
pub type Datbas4ByHl = crate::RegValueT<Datbas4ByHl_SPEC>;

impl Datbas4ByHl {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas4ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas4ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas4ByHl {
    #[inline(always)]
    fn default() -> Datbas4ByHl {
        <crate::RegValueT<Datbas4ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas4ByHh_SPEC;
impl crate::sealed::RegSpec for Datbas4ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 4"]
pub type Datbas4ByHh = crate::RegValueT<Datbas4ByHh_SPEC>;

impl Datbas4ByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Datbas4ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Datbas4ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, Datbas4ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, Datbas4ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas4_by_hh::Dvtyp,
        Datbas4ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas4_by_hh::Dvtyp,
            Datbas4ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas4ByHh {
    #[inline(always)]
    fn default() -> Datbas4ByHh {
        <crate::RegValueT<Datbas4ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas4_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas5_SPEC;
impl crate::sealed::RegSpec for Datbas5_SPEC {
    type DataType = u32;
}
#[doc = "Device Address Table Basic Register 5"]
pub type Datbas5 = crate::RegValueT<Datbas5_SPEC>;

impl Datbas5 {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas5_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas5_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, datbas5::Dvibipl, Datbas5_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas5::Dvibipl,
            Datbas5_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas5::Dvsirrj,
        Datbas5_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas5::Dvsirrj,
            Datbas5_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, datbas5::Dvmrrj, Datbas5_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas5::Dvmrrj,
            Datbas5_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas5::Dvibits,
        Datbas5_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas5::Dvibits,
            Datbas5_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Datbas5_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Datbas5_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Datbas5_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Datbas5_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Datbas5_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Datbas5_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, datbas5::Dvtyp, Datbas5_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,datbas5::Dvtyp, Datbas5_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas5 {
    #[inline(always)]
    fn default() -> Datbas5 {
        <crate::RegValueT<Datbas5_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas5 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas5HaL_SPEC;
impl crate::sealed::RegSpec for Datbas5HaL_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 5"]
pub type Datbas5HaL = crate::RegValueT<Datbas5HaL_SPEC>;

impl Datbas5HaL {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas5HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas5HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1f, 1, 0, u8, Datbas5HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1f,1,0,u8, Datbas5HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        datbas5_ha_l::Dvibipl,
        Datbas5HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas5_ha_l::Dvibipl,
            Datbas5HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas5_ha_l::Dvsirrj,
        Datbas5HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas5_ha_l::Dvsirrj,
            Datbas5HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        datbas5_ha_l::Dvmrrj,
        Datbas5HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas5_ha_l::Dvmrrj,
            Datbas5HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas5_ha_l::Dvibits,
        Datbas5HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas5_ha_l::Dvibits,
            Datbas5HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas5HaL {
    #[inline(always)]
    fn default() -> Datbas5HaL {
        <crate::RegValueT<Datbas5HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas5_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas5ByLl_SPEC;
impl crate::sealed::RegSpec for Datbas5ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 5"]
pub type Datbas5ByLl = crate::RegValueT<Datbas5ByLl_SPEC>;

impl Datbas5ByLl {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas5ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas5ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Datbas5ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Datbas5ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas5ByLl {
    #[inline(always)]
    fn default() -> Datbas5ByLl {
        <crate::RegValueT<Datbas5ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas5ByLh_SPEC;
impl crate::sealed::RegSpec for Datbas5ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 5"]
pub type Datbas5ByLh = crate::RegValueT<Datbas5ByLh_SPEC>;

impl Datbas5ByLh {
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Datbas5ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Datbas5ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        datbas5_by_lh::Dvibipl,
        Datbas5ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            datbas5_by_lh::Dvibipl,
            Datbas5ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        datbas5_by_lh::Dvsirrj,
        Datbas5ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            datbas5_by_lh::Dvsirrj,
            Datbas5ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        datbas5_by_lh::Dvmrrj,
        Datbas5ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            datbas5_by_lh::Dvmrrj,
            Datbas5ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas5_by_lh::Dvibits,
        Datbas5ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas5_by_lh::Dvibits,
            Datbas5ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas5ByLh {
    #[inline(always)]
    fn default() -> Datbas5ByLh {
        <crate::RegValueT<Datbas5ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas5_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas5HaH_SPEC;
impl crate::sealed::RegSpec for Datbas5HaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 5"]
pub type Datbas5HaH = crate::RegValueT<Datbas5HaH_SPEC>;

impl Datbas5HaH {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas5HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas5HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Datbas5HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, Datbas5HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, Datbas5HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, Datbas5HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas5_ha_h::Dvtyp,
        Datbas5HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas5_ha_h::Dvtyp,
            Datbas5HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas5HaH {
    #[inline(always)]
    fn default() -> Datbas5HaH {
        <crate::RegValueT<Datbas5HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas5_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas5ByHl_SPEC;
impl crate::sealed::RegSpec for Datbas5ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 5"]
pub type Datbas5ByHl = crate::RegValueT<Datbas5ByHl_SPEC>;

impl Datbas5ByHl {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas5ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas5ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas5ByHl {
    #[inline(always)]
    fn default() -> Datbas5ByHl {
        <crate::RegValueT<Datbas5ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas5ByHh_SPEC;
impl crate::sealed::RegSpec for Datbas5ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 5"]
pub type Datbas5ByHh = crate::RegValueT<Datbas5ByHh_SPEC>;

impl Datbas5ByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Datbas5ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Datbas5ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, Datbas5ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, Datbas5ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas5_by_hh::Dvtyp,
        Datbas5ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas5_by_hh::Dvtyp,
            Datbas5ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas5ByHh {
    #[inline(always)]
    fn default() -> Datbas5ByHh {
        <crate::RegValueT<Datbas5ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas5_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas6_SPEC;
impl crate::sealed::RegSpec for Datbas6_SPEC {
    type DataType = u32;
}
#[doc = "Device Address Table Basic Register 6"]
pub type Datbas6 = crate::RegValueT<Datbas6_SPEC>;

impl Datbas6 {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas6_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas6_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, datbas6::Dvibipl, Datbas6_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas6::Dvibipl,
            Datbas6_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas6::Dvsirrj,
        Datbas6_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas6::Dvsirrj,
            Datbas6_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, datbas6::Dvmrrj, Datbas6_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas6::Dvmrrj,
            Datbas6_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas6::Dvibits,
        Datbas6_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas6::Dvibits,
            Datbas6_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Datbas6_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Datbas6_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Datbas6_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Datbas6_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Datbas6_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Datbas6_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, datbas6::Dvtyp, Datbas6_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,datbas6::Dvtyp, Datbas6_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas6 {
    #[inline(always)]
    fn default() -> Datbas6 {
        <crate::RegValueT<Datbas6_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas6 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas6HaL_SPEC;
impl crate::sealed::RegSpec for Datbas6HaL_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 6"]
pub type Datbas6HaL = crate::RegValueT<Datbas6HaL_SPEC>;

impl Datbas6HaL {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas6HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas6HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1f, 1, 0, u8, Datbas6HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1f,1,0,u8, Datbas6HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        datbas6_ha_l::Dvibipl,
        Datbas6HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas6_ha_l::Dvibipl,
            Datbas6HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas6_ha_l::Dvsirrj,
        Datbas6HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas6_ha_l::Dvsirrj,
            Datbas6HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        datbas6_ha_l::Dvmrrj,
        Datbas6HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas6_ha_l::Dvmrrj,
            Datbas6HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas6_ha_l::Dvibits,
        Datbas6HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas6_ha_l::Dvibits,
            Datbas6HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas6HaL {
    #[inline(always)]
    fn default() -> Datbas6HaL {
        <crate::RegValueT<Datbas6HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas6_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas6ByLl_SPEC;
impl crate::sealed::RegSpec for Datbas6ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 6"]
pub type Datbas6ByLl = crate::RegValueT<Datbas6ByLl_SPEC>;

impl Datbas6ByLl {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas6ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas6ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Datbas6ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Datbas6ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas6ByLl {
    #[inline(always)]
    fn default() -> Datbas6ByLl {
        <crate::RegValueT<Datbas6ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas6ByLh_SPEC;
impl crate::sealed::RegSpec for Datbas6ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 6"]
pub type Datbas6ByLh = crate::RegValueT<Datbas6ByLh_SPEC>;

impl Datbas6ByLh {
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Datbas6ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Datbas6ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        datbas6_by_lh::Dvibipl,
        Datbas6ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            datbas6_by_lh::Dvibipl,
            Datbas6ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        datbas6_by_lh::Dvsirrj,
        Datbas6ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            datbas6_by_lh::Dvsirrj,
            Datbas6ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        datbas6_by_lh::Dvmrrj,
        Datbas6ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            datbas6_by_lh::Dvmrrj,
            Datbas6ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas6_by_lh::Dvibits,
        Datbas6ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas6_by_lh::Dvibits,
            Datbas6ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas6ByLh {
    #[inline(always)]
    fn default() -> Datbas6ByLh {
        <crate::RegValueT<Datbas6ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas6_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas6HaH_SPEC;
impl crate::sealed::RegSpec for Datbas6HaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 6"]
pub type Datbas6HaH = crate::RegValueT<Datbas6HaH_SPEC>;

impl Datbas6HaH {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas6HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas6HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Datbas6HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, Datbas6HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, Datbas6HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, Datbas6HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas6_ha_h::Dvtyp,
        Datbas6HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas6_ha_h::Dvtyp,
            Datbas6HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas6HaH {
    #[inline(always)]
    fn default() -> Datbas6HaH {
        <crate::RegValueT<Datbas6HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas6_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas6ByHl_SPEC;
impl crate::sealed::RegSpec for Datbas6ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 6"]
pub type Datbas6ByHl = crate::RegValueT<Datbas6ByHl_SPEC>;

impl Datbas6ByHl {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas6ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas6ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas6ByHl {
    #[inline(always)]
    fn default() -> Datbas6ByHl {
        <crate::RegValueT<Datbas6ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas6ByHh_SPEC;
impl crate::sealed::RegSpec for Datbas6ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 6"]
pub type Datbas6ByHh = crate::RegValueT<Datbas6ByHh_SPEC>;

impl Datbas6ByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Datbas6ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Datbas6ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, Datbas6ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, Datbas6ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas6_by_hh::Dvtyp,
        Datbas6ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas6_by_hh::Dvtyp,
            Datbas6ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas6ByHh {
    #[inline(always)]
    fn default() -> Datbas6ByHh {
        <crate::RegValueT<Datbas6ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas6_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas7_SPEC;
impl crate::sealed::RegSpec for Datbas7_SPEC {
    type DataType = u32;
}
#[doc = "Device Address Table Basic Register 7"]
pub type Datbas7 = crate::RegValueT<Datbas7_SPEC>;

impl Datbas7 {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas7_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas7_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, datbas7::Dvibipl, Datbas7_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas7::Dvibipl,
            Datbas7_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas7::Dvsirrj,
        Datbas7_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas7::Dvsirrj,
            Datbas7_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<14, 0x1, 1, 0, datbas7::Dvmrrj, Datbas7_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas7::Dvmrrj,
            Datbas7_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas7::Dvibits,
        Datbas7_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas7::Dvibits,
            Datbas7_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Datbas7_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Datbas7_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Datbas7_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Datbas7_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Datbas7_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Datbas7_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, datbas7::Dvtyp, Datbas7_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,datbas7::Dvtyp, Datbas7_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas7 {
    #[inline(always)]
    fn default() -> Datbas7 {
        <crate::RegValueT<Datbas7_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas7 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas7HaL_SPEC;
impl crate::sealed::RegSpec for Datbas7HaL_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 7"]
pub type Datbas7HaL = crate::RegValueT<Datbas7HaL_SPEC>;

impl Datbas7HaL {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas7HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas7HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1f, 1, 0, u8, Datbas7HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<7,0x1f,1,0,u8, Datbas7HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        datbas7_ha_l::Dvibipl,
        Datbas7HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            datbas7_ha_l::Dvibipl,
            Datbas7HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        datbas7_ha_l::Dvsirrj,
        Datbas7HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            datbas7_ha_l::Dvsirrj,
            Datbas7HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        datbas7_ha_l::Dvmrrj,
        Datbas7HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            datbas7_ha_l::Dvmrrj,
            Datbas7HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas7_ha_l::Dvibits,
        Datbas7HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas7_ha_l::Dvibits,
            Datbas7HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas7HaL {
    #[inline(always)]
    fn default() -> Datbas7HaL {
        <crate::RegValueT<Datbas7HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas7_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas7ByLl_SPEC;
impl crate::sealed::RegSpec for Datbas7ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 7"]
pub type Datbas7ByLl = crate::RegValueT<Datbas7ByLl_SPEC>;

impl Datbas7ByLl {
    #[doc = "Device Static Address"]
    #[inline(always)]
    pub fn dvstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Datbas7ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Datbas7ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Datbas7ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Datbas7ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas7ByLl {
    #[inline(always)]
    fn default() -> Datbas7ByLl {
        <crate::RegValueT<Datbas7ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas7ByLh_SPEC;
impl crate::sealed::RegSpec for Datbas7ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 7"]
pub type Datbas7ByLh = crate::RegValueT<Datbas7ByLh_SPEC>;

impl Datbas7ByLh {
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Datbas7ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Datbas7ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device IBI Payload"]
    #[inline(always)]
    pub fn dvibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        datbas7_by_lh::Dvibipl,
        Datbas7ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            datbas7_by_lh::Dvibipl,
            Datbas7ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Slave Interrupt Request Reject"]
    #[inline(always)]
    pub fn dvsirrj(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        datbas7_by_lh::Dvsirrj,
        Datbas7ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            datbas7_by_lh::Dvsirrj,
            Datbas7ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device In-Band Master Request Reject"]
    #[inline(always)]
    pub fn dvmrrj(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        datbas7_by_lh::Dvmrrj,
        Datbas7ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            datbas7_by_lh::Dvmrrj,
            Datbas7ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Device IBI Time-stamp"]
    #[inline(always)]
    pub fn dvibits(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas7_by_lh::Dvibits,
        Datbas7ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas7_by_lh::Dvibits,
            Datbas7ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas7ByLh {
    #[inline(always)]
    fn default() -> Datbas7ByLh {
        <crate::RegValueT<Datbas7ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas7_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibipl_SPEC;
    pub type Dvibipl = crate::EnumBitfieldStruct<u8, Dvibipl_SPEC>;
    impl Dvibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvsirrj_SPEC;
    pub type Dvsirrj = crate::EnumBitfieldStruct<u8, Dvsirrj_SPEC>;
    impl Dvsirrj {
        #[doc = "This Device shall ACK the SIR"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK the SIR and send the auto-disable CCC"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvmrrj_SPEC;
    pub type Dvmrrj = crate::EnumBitfieldStruct<u8, Dvmrrj_SPEC>;
    impl Dvmrrj {
        #[doc = "This Device shall ACK Master Requests"]
        pub const _0: Self = Self::new(0);
        #[doc = "This Device shall NACK Master Requests and send the auto-disable command"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvibits_SPEC;
    pub type Dvibits = crate::EnumBitfieldStruct<u8, Dvibits_SPEC>;
    impl Dvibits {
        #[doc = "The Master shall not time-stamp IBIs from this Device with Master Time-stamps"]
        pub const _0: Self = Self::new(0);
        #[doc = "The Master shall time-stamp IBIs for this Device with Master Time-stamps"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas7HaH_SPEC;
impl crate::sealed::RegSpec for Datbas7HaH_SPEC {
    type DataType = u16;
}
#[doc = "Device Address Table Basic Register 7"]
pub type Datbas7HaH = crate::RegValueT<Datbas7HaH_SPEC>;

impl Datbas7HaH {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas7HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas7HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, Datbas7HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, Datbas7HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, Datbas7HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, Datbas7HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        datbas7_ha_h::Dvtyp,
        Datbas7HaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            datbas7_ha_h::Dvtyp,
            Datbas7HaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas7HaH {
    #[inline(always)]
    fn default() -> Datbas7HaH {
        <crate::RegValueT<Datbas7HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas7_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas7ByHl_SPEC;
impl crate::sealed::RegSpec for Datbas7ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 7"]
pub type Datbas7ByHl = crate::RegValueT<Datbas7ByHl_SPEC>;

impl Datbas7ByHl {
    #[doc = "Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn dvdyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Datbas7ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Datbas7ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Datbas7ByHl {
    #[inline(always)]
    fn default() -> Datbas7ByHl {
        <crate::RegValueT<Datbas7ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Datbas7ByHh_SPEC;
impl crate::sealed::RegSpec for Datbas7ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Device Address Table Basic Register 7"]
pub type Datbas7ByHh = crate::RegValueT<Datbas7ByHh_SPEC>;

impl Datbas7ByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Datbas7ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Datbas7ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device NACK Retry Count"]
    #[inline(always)]
    pub fn dvnack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, Datbas7ByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, Datbas7ByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Device Type"]
    #[inline(always)]
    pub fn dvtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        datbas7_by_hh::Dvtyp,
        Datbas7ByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            datbas7_by_hh::Dvtyp,
            Datbas7ByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Datbas7ByHh {
    #[inline(always)]
    fn default() -> Datbas7ByHh {
        <crate::RegValueT<Datbas7ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod datbas7_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dvtyp_SPEC;
    pub type Dvtyp = crate::EnumBitfieldStruct<u8, Dvtyp_SPEC>;
    impl Dvtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Exdatbas_SPEC;
impl crate::sealed::RegSpec for Exdatbas_SPEC {
    type DataType = u32;
}
#[doc = "Extended Device Address Table Basic Register"]
pub type Exdatbas = crate::RegValueT<Exdatbas_SPEC>;

impl Exdatbas {
    #[doc = "Extended Device Static Address"]
    #[inline(always)]
    pub fn edstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Exdatbas_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Exdatbas_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn eddyad(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Exdatbas_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Exdatbas_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Exdatbas_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Exdatbas_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Device NACK Retry Count"]
    #[inline(always)]
    pub fn ednack(
        self,
    ) -> crate::common::RegisterField<29, 0x3, 1, 0, u8, Exdatbas_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x3,1,0,u8, Exdatbas_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Device Type"]
    #[inline(always)]
    pub fn edtyp(
        self,
    ) -> crate::common::RegisterField<
        31,
        0x1,
        1,
        0,
        exdatbas::Edtyp,
        Exdatbas_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            31,
            0x1,
            1,
            0,
            exdatbas::Edtyp,
            Exdatbas_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Exdatbas {
    #[inline(always)]
    fn default() -> Exdatbas {
        <crate::RegValueT<Exdatbas_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod exdatbas {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Edtyp_SPEC;
    pub type Edtyp = crate::EnumBitfieldStruct<u8, Edtyp_SPEC>;
    impl Edtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExdatbasHaL_SPEC;
impl crate::sealed::RegSpec for ExdatbasHaL_SPEC {
    type DataType = u16;
}
#[doc = "Extended Device Address Table Basic Register"]
pub type ExdatbasHaL = crate::RegValueT<ExdatbasHaL_SPEC>;

impl ExdatbasHaL {
    #[doc = "Extended Device Static Address"]
    #[inline(always)]
    pub fn edstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, ExdatbasHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, ExdatbasHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000. The write value should be 000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1ff, 1, 0, u16, ExdatbasHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<7,0x1ff,1,0,u16, ExdatbasHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExdatbasHaL {
    #[inline(always)]
    fn default() -> ExdatbasHaL {
        <crate::RegValueT<ExdatbasHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExdatbasByLl_SPEC;
impl crate::sealed::RegSpec for ExdatbasByLl_SPEC {
    type DataType = u8;
}
#[doc = "Extended Device Address Table Basic Register"]
pub type ExdatbasByLl = crate::RegValueT<ExdatbasByLl_SPEC>;

impl ExdatbasByLl {
    #[doc = "Extended Device Static Address"]
    #[inline(always)]
    pub fn edstad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, ExdatbasByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, ExdatbasByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, ExdatbasByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,ExdatbasByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExdatbasByLl {
    #[inline(always)]
    fn default() -> ExdatbasByLl {
        <crate::RegValueT<ExdatbasByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExdatbasByLh_SPEC;
impl crate::sealed::RegSpec for ExdatbasByLh_SPEC {
    type DataType = u8;
}
#[doc = "Extended Device Address Table Basic Register"]
pub type ExdatbasByLh = crate::RegValueT<ExdatbasByLh_SPEC>;

impl ExdatbasByLh {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ExdatbasByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ExdatbasByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExdatbasByLh {
    #[inline(always)]
    fn default() -> ExdatbasByLh {
        <crate::RegValueT<ExdatbasByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExdatbasHaH_SPEC;
impl crate::sealed::RegSpec for ExdatbasHaH_SPEC {
    type DataType = u16;
}
#[doc = "Extended Device Address Table Basic Register"]
pub type ExdatbasHaH = crate::RegValueT<ExdatbasHaH_SPEC>;

impl ExdatbasHaH {
    #[doc = "Extended Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn eddyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ExdatbasHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ExdatbasHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, ExdatbasHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, ExdatbasHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Device NACK Retry Count"]
    #[inline(always)]
    pub fn ednack(
        self,
    ) -> crate::common::RegisterField<13, 0x3, 1, 0, u8, ExdatbasHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x3,1,0,u8, ExdatbasHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Device Type"]
    #[inline(always)]
    pub fn edtyp(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        exdatbas_ha_h::Edtyp,
        ExdatbasHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            exdatbas_ha_h::Edtyp,
            ExdatbasHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for ExdatbasHaH {
    #[inline(always)]
    fn default() -> ExdatbasHaH {
        <crate::RegValueT<ExdatbasHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod exdatbas_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Edtyp_SPEC;
    pub type Edtyp = crate::EnumBitfieldStruct<u8, Edtyp_SPEC>;
    impl Edtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExdatbasByHl_SPEC;
impl crate::sealed::RegSpec for ExdatbasByHl_SPEC {
    type DataType = u8;
}
#[doc = "Extended Device Address Table Basic Register"]
pub type ExdatbasByHl = crate::RegValueT<ExdatbasByHl_SPEC>;

impl ExdatbasByHl {
    #[doc = "Extended Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn eddyad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, ExdatbasByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, ExdatbasByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ExdatbasByHl {
    #[inline(always)]
    fn default() -> ExdatbasByHl {
        <crate::RegValueT<ExdatbasByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ExdatbasByHh_SPEC;
impl crate::sealed::RegSpec for ExdatbasByHh_SPEC {
    type DataType = u8;
}
#[doc = "Extended Device Address Table Basic Register"]
pub type ExdatbasByHh = crate::RegValueT<ExdatbasByHh_SPEC>;

impl ExdatbasByHh {
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, ExdatbasByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, ExdatbasByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Device NACK Retry Count"]
    #[inline(always)]
    pub fn ednack(
        self,
    ) -> crate::common::RegisterField<5, 0x3, 1, 0, u8, ExdatbasByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x3,1,0,u8, ExdatbasByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Extended Device Type"]
    #[inline(always)]
    pub fn edtyp(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        exdatbas_by_hh::Edtyp,
        ExdatbasByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            exdatbas_by_hh::Edtyp,
            ExdatbasByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for ExdatbasByHh {
    #[inline(always)]
    fn default() -> ExdatbasByHh {
        <crate::RegValueT<ExdatbasByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod exdatbas_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Edtyp_SPEC;
    pub type Edtyp = crate::EnumBitfieldStruct<u8, Edtyp_SPEC>;
    impl Edtyp {
        #[doc = "I3C: I3C Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "I2C: I2C Device"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas0_SPEC;
impl crate::sealed::RegSpec for Sdatbas0_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Address Table Basic Register 0"]
pub type Sdatbas0 = crate::RegValueT<Sdatbas0_SPEC>;

impl Sdatbas0 {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Sdatbas0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Sdatbas0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sdatbas0::Sdadls,
        Sdatbas0_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sdatbas0::Sdadls,
            Sdatbas0_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Slave Device IBI Payload"]
    #[inline(always)]
    pub fn sdibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        sdatbas0::Sdibipl,
        Sdatbas0_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            sdatbas0::Sdibipl,
            Sdatbas0_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn sddyad(
        self,
    ) -> crate::common::RegisterField<16, 0x7f, 1, 0, u8, Sdatbas0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0x7f,1,0,u8, Sdatbas0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000. The write value should be 000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<23, 0x1ff, 1, 0, u16, Sdatbas0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<23,0x1ff,1,0,u16, Sdatbas0_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas0 {
    #[inline(always)]
    fn default() -> Sdatbas0 {
        <crate::RegValueT<Sdatbas0_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas0 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdibipl_SPEC;
    pub type Sdibipl = crate::EnumBitfieldStruct<u8, Sdibipl_SPEC>;
    impl Sdibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas0HaL_SPEC;
impl crate::sealed::RegSpec for Sdatbas0HaL_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Address Table Basic Register 0"]
pub type Sdatbas0HaL = crate::RegValueT<Sdatbas0HaL_SPEC>;

impl Sdatbas0HaL {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Sdatbas0HaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Sdatbas0HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sdatbas0_ha_l::Sdadls,
        Sdatbas0HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sdatbas0_ha_l::Sdadls,
            Sdatbas0HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Slave Device IBI Payload"]
    #[inline(always)]
    pub fn sdibipl(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        sdatbas0_ha_l::Sdibipl,
        Sdatbas0HaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            sdatbas0_ha_l::Sdibipl,
            Sdatbas0HaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, Sdatbas0HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<13,0x7,1,0,u8, Sdatbas0HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas0HaL {
    #[inline(always)]
    fn default() -> Sdatbas0HaL {
        <crate::RegValueT<Sdatbas0HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas0_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdibipl_SPEC;
    pub type Sdibipl = crate::EnumBitfieldStruct<u8, Sdibipl_SPEC>;
    impl Sdibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas0ByLl_SPEC;
impl crate::sealed::RegSpec for Sdatbas0ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Table Basic Register 0"]
pub type Sdatbas0ByLl = crate::RegValueT<Sdatbas0ByLl_SPEC>;

impl Sdatbas0ByLl {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Sdatbas0ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Sdatbas0ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas0ByLl {
    #[inline(always)]
    fn default() -> Sdatbas0ByLl {
        <crate::RegValueT<Sdatbas0ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas0ByLh_SPEC;
impl crate::sealed::RegSpec for Sdatbas0ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Table Basic Register 0"]
pub type Sdatbas0ByLh = crate::RegValueT<Sdatbas0ByLh_SPEC>;

impl Sdatbas0ByLh {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Sdatbas0ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, Sdatbas0ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sdatbas0_by_lh::Sdadls,
        Sdatbas0ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sdatbas0_by_lh::Sdadls,
            Sdatbas0ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Slave Device IBI Payload"]
    #[inline(always)]
    pub fn sdibipl(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sdatbas0_by_lh::Sdibipl,
        Sdatbas0ByLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sdatbas0_by_lh::Sdibipl,
            Sdatbas0ByLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000. The write value should be 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, Sdatbas0ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8, Sdatbas0ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas0ByLh {
    #[inline(always)]
    fn default() -> Sdatbas0ByLh {
        <crate::RegValueT<Sdatbas0ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas0_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdibipl_SPEC;
    pub type Sdibipl = crate::EnumBitfieldStruct<u8, Sdibipl_SPEC>;
    impl Sdibipl {
        #[doc = "IBIs from this Device do not carry a Data Payload"]
        pub const _0: Self = Self::new(0);
        #[doc = "IBIs from this Device do carry a Data Payload"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas0HaH_SPEC;
impl crate::sealed::RegSpec for Sdatbas0HaH_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Address Table Basic Register 0"]
pub type Sdatbas0HaH = crate::RegValueT<Sdatbas0HaH_SPEC>;

impl Sdatbas0HaH {
    #[doc = "Slave Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn sddyad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Sdatbas0HaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Sdatbas0HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000. The write value should be 000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<7, 0x1ff, 1, 0, u16, Sdatbas0HaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<7,0x1ff,1,0,u16, Sdatbas0HaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas0HaH {
    #[inline(always)]
    fn default() -> Sdatbas0HaH {
        <crate::RegValueT<Sdatbas0HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas0ByHl_SPEC;
impl crate::sealed::RegSpec for Sdatbas0ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Table Basic Register 0"]
pub type Sdatbas0ByHl = crate::RegValueT<Sdatbas0ByHl_SPEC>;

impl Sdatbas0ByHl {
    #[doc = "Slave Device I3C Dynamic Address"]
    #[inline(always)]
    pub fn sddyad(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, Sdatbas0ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, Sdatbas0ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sdatbas0ByHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sdatbas0ByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas0ByHl {
    #[inline(always)]
    fn default() -> Sdatbas0ByHl {
        <crate::RegValueT<Sdatbas0ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas1_SPEC;
impl crate::sealed::RegSpec for Sdatbas1_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Address Table Basic Register 1"]
pub type Sdatbas1 = crate::RegValueT<Sdatbas1_SPEC>;

impl Sdatbas1 {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Sdatbas1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Sdatbas1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sdatbas1::Sdadls,
        Sdatbas1_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sdatbas1::Sdadls,
            Sdatbas1_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000000000000. The write value should be 000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1fffff, 1, 0, u32, Sdatbas1_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<11,0x1fffff,1,0,u32, Sdatbas1_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas1 {
    #[inline(always)]
    fn default() -> Sdatbas1 {
        <crate::RegValueT<Sdatbas1_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas1 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas1HaL_SPEC;
impl crate::sealed::RegSpec for Sdatbas1HaL_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Address Table Basic Register 1"]
pub type Sdatbas1HaL = crate::RegValueT<Sdatbas1HaL_SPEC>;

impl Sdatbas1HaL {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Sdatbas1HaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Sdatbas1HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sdatbas1_ha_l::Sdadls,
        Sdatbas1HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sdatbas1_ha_l::Sdadls,
            Sdatbas1HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, Sdatbas1HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<11,0x1f,1,0,u8, Sdatbas1HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas1HaL {
    #[inline(always)]
    fn default() -> Sdatbas1HaL {
        <crate::RegValueT<Sdatbas1HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas1_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas1ByLl_SPEC;
impl crate::sealed::RegSpec for Sdatbas1ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Table Basic Register 1"]
pub type Sdatbas1ByLl = crate::RegValueT<Sdatbas1ByLl_SPEC>;

impl Sdatbas1ByLl {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Sdatbas1ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Sdatbas1ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas1ByLl {
    #[inline(always)]
    fn default() -> Sdatbas1ByLl {
        <crate::RegValueT<Sdatbas1ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas1ByLh_SPEC;
impl crate::sealed::RegSpec for Sdatbas1ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Table Basic Register 1"]
pub type Sdatbas1ByLh = crate::RegValueT<Sdatbas1ByLh_SPEC>;

impl Sdatbas1ByLh {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Sdatbas1ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, Sdatbas1ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sdatbas1_by_lh::Sdadls,
        Sdatbas1ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sdatbas1_by_lh::Sdadls,
            Sdatbas1ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, Sdatbas1ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, Sdatbas1ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas1ByLh {
    #[inline(always)]
    fn default() -> Sdatbas1ByLh {
        <crate::RegValueT<Sdatbas1ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas1_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas2_SPEC;
impl crate::sealed::RegSpec for Sdatbas2_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Address Table Basic Register 2"]
pub type Sdatbas2 = crate::RegValueT<Sdatbas2_SPEC>;

impl Sdatbas2 {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Sdatbas2_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Sdatbas2_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sdatbas2::Sdadls,
        Sdatbas2_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sdatbas2::Sdadls,
            Sdatbas2_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000000000000. The write value should be 000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1fffff, 1, 0, u32, Sdatbas2_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<11,0x1fffff,1,0,u32, Sdatbas2_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas2 {
    #[inline(always)]
    fn default() -> Sdatbas2 {
        <crate::RegValueT<Sdatbas2_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas2 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas2HaL_SPEC;
impl crate::sealed::RegSpec for Sdatbas2HaL_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Address Table Basic Register 2"]
pub type Sdatbas2HaL = crate::RegValueT<Sdatbas2HaL_SPEC>;

impl Sdatbas2HaL {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Sdatbas2HaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Sdatbas2HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sdatbas2_ha_l::Sdadls,
        Sdatbas2HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sdatbas2_ha_l::Sdadls,
            Sdatbas2HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<11, 0x1f, 1, 0, u8, Sdatbas2HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<11,0x1f,1,0,u8, Sdatbas2HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas2HaL {
    #[inline(always)]
    fn default() -> Sdatbas2HaL {
        <crate::RegValueT<Sdatbas2HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas2_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas2ByLl_SPEC;
impl crate::sealed::RegSpec for Sdatbas2ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Table Basic Register 2"]
pub type Sdatbas2ByLl = crate::RegValueT<Sdatbas2ByLl_SPEC>;

impl Sdatbas2ByLl {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Sdatbas2ByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Sdatbas2ByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas2ByLl {
    #[inline(always)]
    fn default() -> Sdatbas2ByLl {
        <crate::RegValueT<Sdatbas2ByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdatbas2ByLh_SPEC;
impl crate::sealed::RegSpec for Sdatbas2ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Table Basic Register 2"]
pub type Sdatbas2ByLh = crate::RegValueT<Sdatbas2ByLh_SPEC>;

impl Sdatbas2ByLh {
    #[doc = "Slave Device Static Address"]
    #[inline(always)]
    pub fn sdstad(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Sdatbas2ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x3,1,0,u8, Sdatbas2ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Slave Device Address Length Selection"]
    #[inline(always)]
    pub fn sdadls(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sdatbas2_by_lh::Sdadls,
        Sdatbas2ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sdatbas2_by_lh::Sdadls,
            Sdatbas2ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, Sdatbas2ByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, Sdatbas2ByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdatbas2ByLh {
    #[inline(always)]
    fn default() -> Sdatbas2ByLh {
        <crate::RegValueT<Sdatbas2ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sdatbas2_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdadls_SPEC;
    pub type Sdadls = crate::EnumBitfieldStruct<u8, Sdadls_SPEC>;
    impl Sdadls {
        #[doc = "Slave Device address length 7 bits selected"]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave Device address length 10 bits selected. (I2C device only)"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct0_SPEC;
impl crate::sealed::RegSpec for Msdct0_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Characteristic Table Register 0"]
pub type Msdct0 = crate::RegValueT<Msdct0_SPEC>;

impl Msdct0 {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, msdct0::Rbcr, Msdct0_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,msdct0::Rbcr, Msdct0_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Msdct0_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Msdct0_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdct0 {
    #[inline(always)]
    fn default() -> Msdct0 {
        <crate::RegValueT<Msdct0_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct0 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct0HaL_SPEC;
impl crate::sealed::RegSpec for Msdct0HaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Characteristic Table Register 0"]
pub type Msdct0HaL = crate::RegValueT<Msdct0HaL_SPEC>;

impl Msdct0HaL {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Msdct0HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Msdct0HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        msdct0_ha_l::Rbcr,
        Msdct0HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            msdct0_ha_l::Rbcr,
            Msdct0HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct0HaL {
    #[inline(always)]
    fn default() -> Msdct0HaL {
        <crate::RegValueT<Msdct0HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct0_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct0ByLh_SPEC;
impl crate::sealed::RegSpec for Msdct0ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Characteristic Table Register 0"]
pub type Msdct0ByLh = crate::RegValueT<Msdct0ByLh_SPEC>;

impl Msdct0ByLh {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        msdct0_by_lh::Rbcr,
        Msdct0ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            msdct0_by_lh::Rbcr,
            Msdct0ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct0ByLh {
    #[inline(always)]
    fn default() -> Msdct0ByLh {
        <crate::RegValueT<Msdct0ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct0_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct1_SPEC;
impl crate::sealed::RegSpec for Msdct1_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Characteristic Table Register 1"]
pub type Msdct1 = crate::RegValueT<Msdct1_SPEC>;

impl Msdct1 {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, msdct1::Rbcr, Msdct1_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,msdct1::Rbcr, Msdct1_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Msdct1_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Msdct1_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdct1 {
    #[inline(always)]
    fn default() -> Msdct1 {
        <crate::RegValueT<Msdct1_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct1 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct1HaL_SPEC;
impl crate::sealed::RegSpec for Msdct1HaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Characteristic Table Register 1"]
pub type Msdct1HaL = crate::RegValueT<Msdct1HaL_SPEC>;

impl Msdct1HaL {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Msdct1HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Msdct1HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        msdct1_ha_l::Rbcr,
        Msdct1HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            msdct1_ha_l::Rbcr,
            Msdct1HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct1HaL {
    #[inline(always)]
    fn default() -> Msdct1HaL {
        <crate::RegValueT<Msdct1HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct1_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct1ByLh_SPEC;
impl crate::sealed::RegSpec for Msdct1ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Characteristic Table Register 1"]
pub type Msdct1ByLh = crate::RegValueT<Msdct1ByLh_SPEC>;

impl Msdct1ByLh {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        msdct1_by_lh::Rbcr,
        Msdct1ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            msdct1_by_lh::Rbcr,
            Msdct1ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct1ByLh {
    #[inline(always)]
    fn default() -> Msdct1ByLh {
        <crate::RegValueT<Msdct1ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct1_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct2_SPEC;
impl crate::sealed::RegSpec for Msdct2_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Characteristic Table Register 2"]
pub type Msdct2 = crate::RegValueT<Msdct2_SPEC>;

impl Msdct2 {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, msdct2::Rbcr, Msdct2_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,msdct2::Rbcr, Msdct2_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Msdct2_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Msdct2_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdct2 {
    #[inline(always)]
    fn default() -> Msdct2 {
        <crate::RegValueT<Msdct2_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct2 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct2HaL_SPEC;
impl crate::sealed::RegSpec for Msdct2HaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Characteristic Table Register 2"]
pub type Msdct2HaL = crate::RegValueT<Msdct2HaL_SPEC>;

impl Msdct2HaL {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Msdct2HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Msdct2HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        msdct2_ha_l::Rbcr,
        Msdct2HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            msdct2_ha_l::Rbcr,
            Msdct2HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct2HaL {
    #[inline(always)]
    fn default() -> Msdct2HaL {
        <crate::RegValueT<Msdct2HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct2_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct2ByLh_SPEC;
impl crate::sealed::RegSpec for Msdct2ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Characteristic Table Register 2"]
pub type Msdct2ByLh = crate::RegValueT<Msdct2ByLh_SPEC>;

impl Msdct2ByLh {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        msdct2_by_lh::Rbcr,
        Msdct2ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            msdct2_by_lh::Rbcr,
            Msdct2ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct2ByLh {
    #[inline(always)]
    fn default() -> Msdct2ByLh {
        <crate::RegValueT<Msdct2ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct2_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct3_SPEC;
impl crate::sealed::RegSpec for Msdct3_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Characteristic Table Register 3"]
pub type Msdct3 = crate::RegValueT<Msdct3_SPEC>;

impl Msdct3 {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, msdct3::Rbcr, Msdct3_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,msdct3::Rbcr, Msdct3_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Msdct3_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Msdct3_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdct3 {
    #[inline(always)]
    fn default() -> Msdct3 {
        <crate::RegValueT<Msdct3_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct3 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct3HaL_SPEC;
impl crate::sealed::RegSpec for Msdct3HaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Characteristic Table Register 3"]
pub type Msdct3HaL = crate::RegValueT<Msdct3HaL_SPEC>;

impl Msdct3HaL {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Msdct3HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Msdct3HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        msdct3_ha_l::Rbcr,
        Msdct3HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            msdct3_ha_l::Rbcr,
            Msdct3HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct3HaL {
    #[inline(always)]
    fn default() -> Msdct3HaL {
        <crate::RegValueT<Msdct3HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct3_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct3ByLh_SPEC;
impl crate::sealed::RegSpec for Msdct3ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Characteristic Table Register 3"]
pub type Msdct3ByLh = crate::RegValueT<Msdct3ByLh_SPEC>;

impl Msdct3ByLh {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        msdct3_by_lh::Rbcr,
        Msdct3ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            msdct3_by_lh::Rbcr,
            Msdct3ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct3ByLh {
    #[inline(always)]
    fn default() -> Msdct3ByLh {
        <crate::RegValueT<Msdct3ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct3_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct4_SPEC;
impl crate::sealed::RegSpec for Msdct4_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Characteristic Table Register 4"]
pub type Msdct4 = crate::RegValueT<Msdct4_SPEC>;

impl Msdct4 {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, msdct4::Rbcr, Msdct4_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,msdct4::Rbcr, Msdct4_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Msdct4_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Msdct4_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdct4 {
    #[inline(always)]
    fn default() -> Msdct4 {
        <crate::RegValueT<Msdct4_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct4 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct4HaL_SPEC;
impl crate::sealed::RegSpec for Msdct4HaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Characteristic Table Register 4"]
pub type Msdct4HaL = crate::RegValueT<Msdct4HaL_SPEC>;

impl Msdct4HaL {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Msdct4HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Msdct4HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        msdct4_ha_l::Rbcr,
        Msdct4HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            msdct4_ha_l::Rbcr,
            Msdct4HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct4HaL {
    #[inline(always)]
    fn default() -> Msdct4HaL {
        <crate::RegValueT<Msdct4HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct4_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct4ByLh_SPEC;
impl crate::sealed::RegSpec for Msdct4ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Characteristic Table Register 4"]
pub type Msdct4ByLh = crate::RegValueT<Msdct4ByLh_SPEC>;

impl Msdct4ByLh {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        msdct4_by_lh::Rbcr,
        Msdct4ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            msdct4_by_lh::Rbcr,
            Msdct4ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct4ByLh {
    #[inline(always)]
    fn default() -> Msdct4ByLh {
        <crate::RegValueT<Msdct4ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct4_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct5_SPEC;
impl crate::sealed::RegSpec for Msdct5_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Characteristic Table Register 5"]
pub type Msdct5 = crate::RegValueT<Msdct5_SPEC>;

impl Msdct5 {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, msdct5::Rbcr, Msdct5_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,msdct5::Rbcr, Msdct5_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Msdct5_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Msdct5_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdct5 {
    #[inline(always)]
    fn default() -> Msdct5 {
        <crate::RegValueT<Msdct5_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct5 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct5HaL_SPEC;
impl crate::sealed::RegSpec for Msdct5HaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Characteristic Table Register 5"]
pub type Msdct5HaL = crate::RegValueT<Msdct5HaL_SPEC>;

impl Msdct5HaL {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Msdct5HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Msdct5HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        msdct5_ha_l::Rbcr,
        Msdct5HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            msdct5_ha_l::Rbcr,
            Msdct5HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct5HaL {
    #[inline(always)]
    fn default() -> Msdct5HaL {
        <crate::RegValueT<Msdct5HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct5_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct5ByLh_SPEC;
impl crate::sealed::RegSpec for Msdct5ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Characteristic Table Register 5"]
pub type Msdct5ByLh = crate::RegValueT<Msdct5ByLh_SPEC>;

impl Msdct5ByLh {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        msdct5_by_lh::Rbcr,
        Msdct5ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            msdct5_by_lh::Rbcr,
            Msdct5ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct5ByLh {
    #[inline(always)]
    fn default() -> Msdct5ByLh {
        <crate::RegValueT<Msdct5ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct5_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct6_SPEC;
impl crate::sealed::RegSpec for Msdct6_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Characteristic Table Register 6"]
pub type Msdct6 = crate::RegValueT<Msdct6_SPEC>;

impl Msdct6 {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, msdct6::Rbcr, Msdct6_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,msdct6::Rbcr, Msdct6_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Msdct6_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Msdct6_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdct6 {
    #[inline(always)]
    fn default() -> Msdct6 {
        <crate::RegValueT<Msdct6_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct6 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct6HaL_SPEC;
impl crate::sealed::RegSpec for Msdct6HaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Characteristic Table Register 6"]
pub type Msdct6HaL = crate::RegValueT<Msdct6HaL_SPEC>;

impl Msdct6HaL {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Msdct6HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Msdct6HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        msdct6_ha_l::Rbcr,
        Msdct6HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            msdct6_ha_l::Rbcr,
            Msdct6HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct6HaL {
    #[inline(always)]
    fn default() -> Msdct6HaL {
        <crate::RegValueT<Msdct6HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct6_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct6ByLh_SPEC;
impl crate::sealed::RegSpec for Msdct6ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Characteristic Table Register 6"]
pub type Msdct6ByLh = crate::RegValueT<Msdct6ByLh_SPEC>;

impl Msdct6ByLh {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        msdct6_by_lh::Rbcr,
        Msdct6ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            msdct6_by_lh::Rbcr,
            Msdct6ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct6ByLh {
    #[inline(always)]
    fn default() -> Msdct6ByLh {
        <crate::RegValueT<Msdct6ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct6_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct7_SPEC;
impl crate::sealed::RegSpec for Msdct7_SPEC {
    type DataType = u32;
}
#[doc = "Master Device Characteristic Table Register 7"]
pub type Msdct7 = crate::RegValueT<Msdct7_SPEC>;

impl Msdct7 {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, msdct7::Rbcr, Msdct7_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,msdct7::Rbcr, Msdct7_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Msdct7_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Msdct7_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Msdct7 {
    #[inline(always)]
    fn default() -> Msdct7 {
        <crate::RegValueT<Msdct7_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct7 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct7HaL_SPEC;
impl crate::sealed::RegSpec for Msdct7HaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Device Characteristic Table Register 7"]
pub type Msdct7HaL = crate::RegValueT<Msdct7HaL_SPEC>;

impl Msdct7HaL {
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Msdct7HaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Msdct7HaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        msdct7_ha_l::Rbcr,
        Msdct7HaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            msdct7_ha_l::Rbcr,
            Msdct7HaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct7HaL {
    #[inline(always)]
    fn default() -> Msdct7HaL {
        <crate::RegValueT<Msdct7HaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct7_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Msdct7ByLh_SPEC;
impl crate::sealed::RegSpec for Msdct7ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Master Device Characteristic Table Register 7"]
pub type Msdct7ByLh = crate::RegValueT<Msdct7ByLh_SPEC>;

impl Msdct7ByLh {
    #[doc = "Received Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn rbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        msdct7_by_lh::Rbcr,
        Msdct7ByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            msdct7_by_lh::Rbcr,
            Msdct7ByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Msdct7ByLh {
    #[inline(always)]
    fn default() -> Msdct7ByLh {
        <crate::RegValueT<Msdct7ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod msdct7_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rbcr_SPEC;
    pub type Rbcr = crate::EnumBitfieldStruct<u8, Rbcr_SPEC>;
    impl Rbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdct_SPEC;
impl crate::sealed::RegSpec for Svdct_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Characteristic Table Register"]
pub type Svdct = crate::RegValueT<Svdct_SPEC>;

impl Svdct {
    #[doc = "Transfar Device Characteristic Register"]
    #[inline(always)]
    pub fn tdcr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Svdct_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Svdct_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Transfar Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn tbcr(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, svdct::Tbcr, Svdct_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,svdct::Tbcr, Svdct_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Svdct_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Svdct_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdct {
    #[inline(always)]
    fn default() -> Svdct {
        <crate::RegValueT<Svdct_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdct {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tbcr_SPEC;
    pub type Tbcr = crate::EnumBitfieldStruct<u8, Tbcr_SPEC>;
    impl Tbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvdctHaL_SPEC;
impl crate::sealed::RegSpec for SvdctHaL_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Characteristic Table Register"]
pub type SvdctHaL = crate::RegValueT<SvdctHaL_SPEC>;

impl SvdctHaL {
    #[doc = "Transfar Device Characteristic Register"]
    #[inline(always)]
    pub fn tdcr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, SvdctHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, SvdctHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Transfar Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn tbcr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        svdct_ha_l::Tbcr,
        SvdctHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            svdct_ha_l::Tbcr,
            SvdctHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for SvdctHaL {
    #[inline(always)]
    fn default() -> SvdctHaL {
        <crate::RegValueT<SvdctHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdct_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tbcr_SPEC;
    pub type Tbcr = crate::EnumBitfieldStruct<u8, Tbcr_SPEC>;
    impl Tbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvdctByLl_SPEC;
impl crate::sealed::RegSpec for SvdctByLl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Characteristic Table Register"]
pub type SvdctByLl = crate::RegValueT<SvdctByLl_SPEC>;

impl SvdctByLl {
    #[doc = "Transfar Device Characteristic Register"]
    #[inline(always)]
    pub fn tdcr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, SvdctByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, SvdctByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SvdctByLl {
    #[inline(always)]
    fn default() -> SvdctByLl {
        <crate::RegValueT<SvdctByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SvdctByLh_SPEC;
impl crate::sealed::RegSpec for SvdctByLh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Characteristic Table Register"]
pub type SvdctByLh = crate::RegValueT<SvdctByLh_SPEC>;

impl SvdctByLh {
    #[doc = "Transfar Bus Characteristic RegisterValue of Device\'s I3C Bus Characteristics Register."]
    #[inline(always)]
    pub fn tbcr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        svdct_by_lh::Tbcr,
        SvdctByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            svdct_by_lh::Tbcr,
            SvdctByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for SvdctByLh {
    #[inline(always)]
    fn default() -> SvdctByLh {
        <crate::RegValueT<SvdctByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdct_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tbcr_SPEC;
    pub type Tbcr = crate::EnumBitfieldStruct<u8, Tbcr_SPEC>;
    impl Tbcr {
        #[doc = "– SDR only"]
        pub const _0: Self = Self::new(0);
        #[doc = "– HDR Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not a Bridge Device"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Is a Bridge Device"]
        pub const _1: Self = Self::new(1);
        #[doc = "– Device will always respond to I3C Bus commands"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Device will not always respond to I3C Bus commands"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No data byte follows the accepted IBI"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Mandatory one or more data bytes follow the accepted IBI."]
        pub const _1: Self = Self::new(1);
        #[doc = "– Not Capable"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Capable"]
        pub const _1: Self = Self::new(1);
        #[doc = "– No Limitation"]
        pub const _0: Self = Self::new(0);
        #[doc = "– Limitation"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdctpidl_SPEC;
impl crate::sealed::RegSpec for Sdctpidl_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Characteristic Table Provisional ID Low Register"]
pub type Sdctpidl = crate::RegValueT<Sdctpidl_SPEC>;

impl Sdctpidl {
    #[doc = "Transfar Device Provisional ID Low"]
    #[inline(always)]
    pub fn sdctpidl(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Sdctpidl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Sdctpidl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Sdctpidl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Sdctpidl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdctpidl {
    #[inline(always)]
    fn default() -> Sdctpidl {
        <crate::RegValueT<Sdctpidl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidlHaL_SPEC;
impl crate::sealed::RegSpec for SdctpidlHaL_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Characteristic Table Provisional ID Low Register"]
pub type SdctpidlHaL = crate::RegValueT<SdctpidlHaL_SPEC>;

impl SdctpidlHaL {
    #[doc = "Transfar Device Provisional ID Low"]
    #[inline(always)]
    pub fn sdctpidl(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, SdctpidlHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16, SdctpidlHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidlHaL {
    #[inline(always)]
    fn default() -> SdctpidlHaL {
        <crate::RegValueT<SdctpidlHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidlByLl_SPEC;
impl crate::sealed::RegSpec for SdctpidlByLl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Characteristic Table Provisional ID Low Register"]
pub type SdctpidlByLl = crate::RegValueT<SdctpidlByLl_SPEC>;

impl SdctpidlByLl {
    #[doc = "Transfar Device Provisional ID Low"]
    #[inline(always)]
    pub fn sdctpidl(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, SdctpidlByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, SdctpidlByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidlByLl {
    #[inline(always)]
    fn default() -> SdctpidlByLl {
        <crate::RegValueT<SdctpidlByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidlByLh_SPEC;
impl crate::sealed::RegSpec for SdctpidlByLh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Characteristic Table Provisional ID Low Register"]
pub type SdctpidlByLh = crate::RegValueT<SdctpidlByLh_SPEC>;

impl SdctpidlByLh {
    #[doc = "Transfar Device Provisional ID Low"]
    #[inline(always)]
    pub fn sdctpidl(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, SdctpidlByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, SdctpidlByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidlByLh {
    #[inline(always)]
    fn default() -> SdctpidlByLh {
        <crate::RegValueT<SdctpidlByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sdctpidh_SPEC;
impl crate::sealed::RegSpec for Sdctpidh_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Characteristic Table Provisional ID High Register"]
pub type Sdctpidh = crate::RegValueT<Sdctpidh_SPEC>;

impl Sdctpidh {
    #[doc = "Transfar Device Provisional ID High"]
    #[inline(always)]
    pub fn sdctpidh(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, Sdctpidh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffffffff,1,0,u32, Sdctpidh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sdctpidh {
    #[inline(always)]
    fn default() -> Sdctpidh {
        <crate::RegValueT<Sdctpidh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidhHaL_SPEC;
impl crate::sealed::RegSpec for SdctpidhHaL_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Characteristic Table Provisional ID High Register"]
pub type SdctpidhHaL = crate::RegValueT<SdctpidhHaL_SPEC>;

impl SdctpidhHaL {
    #[doc = "Transfar Device Provisional ID High"]
    #[inline(always)]
    pub fn sdctpidh(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, SdctpidhHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16, SdctpidhHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidhHaL {
    #[inline(always)]
    fn default() -> SdctpidhHaL {
        <crate::RegValueT<SdctpidhHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidhByLl_SPEC;
impl crate::sealed::RegSpec for SdctpidhByLl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Characteristic Table Provisional ID High Register"]
pub type SdctpidhByLl = crate::RegValueT<SdctpidhByLl_SPEC>;

impl SdctpidhByLl {
    #[doc = "Transfar Device Provisional ID High"]
    #[inline(always)]
    pub fn sdctpidh(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, SdctpidhByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, SdctpidhByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidhByLl {
    #[inline(always)]
    fn default() -> SdctpidhByLl {
        <crate::RegValueT<SdctpidhByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidhByLh_SPEC;
impl crate::sealed::RegSpec for SdctpidhByLh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Characteristic Table Provisional ID High Register"]
pub type SdctpidhByLh = crate::RegValueT<SdctpidhByLh_SPEC>;

impl SdctpidhByLh {
    #[doc = "Transfar Device Provisional ID High"]
    #[inline(always)]
    pub fn sdctpidh(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, SdctpidhByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, SdctpidhByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidhByLh {
    #[inline(always)]
    fn default() -> SdctpidhByLh {
        <crate::RegValueT<SdctpidhByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidhHaH_SPEC;
impl crate::sealed::RegSpec for SdctpidhHaH_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Characteristic Table Provisional ID High Register"]
pub type SdctpidhHaH = crate::RegValueT<SdctpidhHaH_SPEC>;

impl SdctpidhHaH {
    #[doc = "Transfar Device Provisional ID High"]
    #[inline(always)]
    pub fn sdctpidh(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, SdctpidhHaH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16, SdctpidhHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidhHaH {
    #[inline(always)]
    fn default() -> SdctpidhHaH {
        <crate::RegValueT<SdctpidhHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidhByHl_SPEC;
impl crate::sealed::RegSpec for SdctpidhByHl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Characteristic Table Provisional ID High Register"]
pub type SdctpidhByHl = crate::RegValueT<SdctpidhByHl_SPEC>;

impl SdctpidhByHl {
    #[doc = "Transfar Device Provisional ID High"]
    #[inline(always)]
    pub fn sdctpidh(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, SdctpidhByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, SdctpidhByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidhByHl {
    #[inline(always)]
    fn default() -> SdctpidhByHl {
        <crate::RegValueT<SdctpidhByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct SdctpidhByHh_SPEC;
impl crate::sealed::RegSpec for SdctpidhByHh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Characteristic Table Provisional ID High Register"]
pub type SdctpidhByHh = crate::RegValueT<SdctpidhByHh_SPEC>;

impl SdctpidhByHh {
    #[doc = "Transfar Device Provisional ID High"]
    #[inline(always)]
    pub fn sdctpidh(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, SdctpidhByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, SdctpidhByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for SdctpidhByHh {
    #[inline(always)]
    fn default() -> SdctpidhByHh {
        <crate::RegValueT<SdctpidhByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad0_SPEC;
impl crate::sealed::RegSpec for Svdvad0_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Address Register 0"]
pub type Svdvad0 = crate::RegValueT<Svdvad0_SPEC>;

impl Svdvad0 {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<16, 0x3ff, 1, 0, u16, Svdvad0_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0x3ff,1,0,u16, Svdvad0_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<27, 0x1, 1, 0, svdvad0::Sadlg, Svdvad0_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<27,0x1,1,0,svdvad0::Sadlg, Svdvad0_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<28, 0x3, 1, 0, u8, Svdvad0_SPEC, crate::common::R> {
        crate::common::RegisterField::<28,0x3,1,0,u8, Svdvad0_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<30, 0x1, 1, 0, svdvad0::Sstadv, Svdvad0_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<30,0x1,1,0,svdvad0::Sstadv, Svdvad0_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Dynamic Address Valid"]
    #[inline(always)]
    pub fn sdyadv(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, svdvad0::Sdyadv, Svdvad0_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<31,0x1,1,0,svdvad0::Sdyadv, Svdvad0_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdvad0 {
    #[inline(always)]
    fn default() -> Svdvad0 {
        <crate::RegValueT<Svdvad0_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad0 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdyadv_SPEC;
    pub type Sdyadv = crate::EnumBitfieldStruct<u8, Sdyadv_SPEC>;
    impl Sdyadv {
        #[doc = "Dynamic Address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Dynamic Address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad0HaH_SPEC;
impl crate::sealed::RegSpec for Svdvad0HaH_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Address Register 0"]
pub type Svdvad0HaH = crate::RegValueT<Svdvad0HaH_SPEC>;

impl Svdvad0HaH {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Svdvad0HaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Svdvad0HaH_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        svdvad0_ha_h::Sadlg,
        Svdvad0HaH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            svdvad0_ha_h::Sadlg,
            Svdvad0HaH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<12, 0x3, 1, 0, u8, Svdvad0HaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<12,0x3,1,0,u8, Svdvad0HaH_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        svdvad0_ha_h::Sstadv,
        Svdvad0HaH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            svdvad0_ha_h::Sstadv,
            Svdvad0HaH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Dynamic Address Valid"]
    #[inline(always)]
    pub fn sdyadv(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        svdvad0_ha_h::Sdyadv,
        Svdvad0HaH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            svdvad0_ha_h::Sdyadv,
            Svdvad0HaH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Svdvad0HaH {
    #[inline(always)]
    fn default() -> Svdvad0HaH {
        <crate::RegValueT<Svdvad0HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad0_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdyadv_SPEC;
    pub type Sdyadv = crate::EnumBitfieldStruct<u8, Sdyadv_SPEC>;
    impl Sdyadv {
        #[doc = "Dynamic Address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Dynamic Address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad0ByHl_SPEC;
impl crate::sealed::RegSpec for Svdvad0ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Register 0"]
pub type Svdvad0ByHl = crate::RegValueT<Svdvad0ByHl_SPEC>;

impl Svdvad0ByHl {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Svdvad0ByHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Svdvad0ByHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdvad0ByHl {
    #[inline(always)]
    fn default() -> Svdvad0ByHl {
        <crate::RegValueT<Svdvad0ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad0ByHh_SPEC;
impl crate::sealed::RegSpec for Svdvad0ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Register 0"]
pub type Svdvad0ByHh = crate::RegValueT<Svdvad0ByHh_SPEC>;

impl Svdvad0ByHh {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Svdvad0ByHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x3,1,0,u8, Svdvad0ByHh_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        svdvad0_by_hh::Sadlg,
        Svdvad0ByHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            svdvad0_by_hh::Sadlg,
            Svdvad0ByHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0x3, 1, 0, u8, Svdvad0ByHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<4,0x3,1,0,u8, Svdvad0ByHh_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        svdvad0_by_hh::Sstadv,
        Svdvad0ByHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            svdvad0_by_hh::Sstadv,
            Svdvad0ByHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Dynamic Address Valid"]
    #[inline(always)]
    pub fn sdyadv(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        svdvad0_by_hh::Sdyadv,
        Svdvad0ByHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            svdvad0_by_hh::Sdyadv,
            Svdvad0ByHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Svdvad0ByHh {
    #[inline(always)]
    fn default() -> Svdvad0ByHh {
        <crate::RegValueT<Svdvad0ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad0_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdyadv_SPEC;
    pub type Sdyadv = crate::EnumBitfieldStruct<u8, Sdyadv_SPEC>;
    impl Sdyadv {
        #[doc = "Dynamic Address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Dynamic Address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad1_SPEC;
impl crate::sealed::RegSpec for Svdvad1_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Address Register 1"]
pub type Svdvad1 = crate::RegValueT<Svdvad1_SPEC>;

impl Svdvad1 {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<16, 0x3ff, 1, 0, u16, Svdvad1_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0x3ff,1,0,u16, Svdvad1_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<27, 0x1, 1, 0, svdvad1::Sadlg, Svdvad1_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<27,0x1,1,0,svdvad1::Sadlg, Svdvad1_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<30, 0x1, 1, 0, svdvad1::Sstadv, Svdvad1_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<30,0x1,1,0,svdvad1::Sstadv, Svdvad1_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "This bit is read as 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Svdvad1_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<31, 1, 0, Svdvad1_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Svdvad1 {
    #[inline(always)]
    fn default() -> Svdvad1 {
        <crate::RegValueT<Svdvad1_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad1 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad1HaH_SPEC;
impl crate::sealed::RegSpec for Svdvad1HaH_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Address Register 1"]
pub type Svdvad1HaH = crate::RegValueT<Svdvad1HaH_SPEC>;

impl Svdvad1HaH {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Svdvad1HaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Svdvad1HaH_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        svdvad1_ha_h::Sadlg,
        Svdvad1HaH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            svdvad1_ha_h::Sadlg,
            Svdvad1HaH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        svdvad1_ha_h::Sstadv,
        Svdvad1HaH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            svdvad1_ha_h::Sstadv,
            Svdvad1HaH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Svdvad1HaH_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15,1,0,Svdvad1HaH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdvad1HaH {
    #[inline(always)]
    fn default() -> Svdvad1HaH {
        <crate::RegValueT<Svdvad1HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad1_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad1ByHl_SPEC;
impl crate::sealed::RegSpec for Svdvad1ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Register 1"]
pub type Svdvad1ByHl = crate::RegValueT<Svdvad1ByHl_SPEC>;

impl Svdvad1ByHl {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Svdvad1ByHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Svdvad1ByHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdvad1ByHl {
    #[inline(always)]
    fn default() -> Svdvad1ByHl {
        <crate::RegValueT<Svdvad1ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad1ByHh_SPEC;
impl crate::sealed::RegSpec for Svdvad1ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Register 1"]
pub type Svdvad1ByHh = crate::RegValueT<Svdvad1ByHh_SPEC>;

impl Svdvad1ByHh {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Svdvad1ByHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x3,1,0,u8, Svdvad1ByHh_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        svdvad1_by_hh::Sadlg,
        Svdvad1ByHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            svdvad1_by_hh::Sadlg,
            Svdvad1ByHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        svdvad1_by_hh::Sstadv,
        Svdvad1ByHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            svdvad1_by_hh::Sstadv,
            Svdvad1ByHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Svdvad1ByHh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7,1,0,Svdvad1ByHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdvad1ByHh {
    #[inline(always)]
    fn default() -> Svdvad1ByHh {
        <crate::RegValueT<Svdvad1ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad1_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad2_SPEC;
impl crate::sealed::RegSpec for Svdvad2_SPEC {
    type DataType = u32;
}
#[doc = "Slave Device Address Register 2"]
pub type Svdvad2 = crate::RegValueT<Svdvad2_SPEC>;

impl Svdvad2 {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<16, 0x3ff, 1, 0, u16, Svdvad2_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0x3ff,1,0,u16, Svdvad2_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<27, 0x1, 1, 0, svdvad2::Sadlg, Svdvad2_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<27,0x1,1,0,svdvad2::Sadlg, Svdvad2_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<30, 0x1, 1, 0, svdvad2::Sstadv, Svdvad2_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<30,0x1,1,0,svdvad2::Sstadv, Svdvad2_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "This bit is read as 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Svdvad2_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<31, 1, 0, Svdvad2_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Svdvad2 {
    #[inline(always)]
    fn default() -> Svdvad2 {
        <crate::RegValueT<Svdvad2_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad2 {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad2HaH_SPEC;
impl crate::sealed::RegSpec for Svdvad2HaH_SPEC {
    type DataType = u16;
}
#[doc = "Slave Device Address Register 2"]
pub type Svdvad2HaH = crate::RegValueT<Svdvad2HaH_SPEC>;

impl Svdvad2HaH {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, Svdvad2HaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x3ff,1,0,u16, Svdvad2HaH_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        svdvad2_ha_h::Sadlg,
        Svdvad2HaH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            svdvad2_ha_h::Sadlg,
            Svdvad2HaH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        svdvad2_ha_h::Sstadv,
        Svdvad2HaH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            svdvad2_ha_h::Sstadv,
            Svdvad2HaH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Svdvad2HaH_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15,1,0,Svdvad2HaH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdvad2HaH {
    #[inline(always)]
    fn default() -> Svdvad2HaH {
        <crate::RegValueT<Svdvad2HaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad2_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad2ByHl_SPEC;
impl crate::sealed::RegSpec for Svdvad2ByHl_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Register 2"]
pub type Svdvad2ByHl = crate::RegValueT<Svdvad2ByHl_SPEC>;

impl Svdvad2ByHl {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Svdvad2ByHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Svdvad2ByHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdvad2ByHl {
    #[inline(always)]
    fn default() -> Svdvad2ByHl {
        <crate::RegValueT<Svdvad2ByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Svdvad2ByHh_SPEC;
impl crate::sealed::RegSpec for Svdvad2ByHh_SPEC {
    type DataType = u8;
}
#[doc = "Slave Device Address Register 2"]
pub type Svdvad2ByHh = crate::RegValueT<Svdvad2ByHh_SPEC>;

impl Svdvad2ByHh {
    #[doc = "Slave Address"]
    #[inline(always)]
    pub fn svad(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, Svdvad2ByHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x3,1,0,u8, Svdvad2ByHh_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Address Length"]
    #[inline(always)]
    pub fn sadlg(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        svdvad2_by_hh::Sadlg,
        Svdvad2ByHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            svdvad2_by_hh::Sadlg,
            Svdvad2ByHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Static Address Valid"]
    #[inline(always)]
    pub fn sstadv(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        svdvad2_by_hh::Sstadv,
        Svdvad2ByHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            svdvad2_by_hh::Sstadv,
            Svdvad2ByHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "This bit is read as 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Svdvad2ByHh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7,1,0,Svdvad2ByHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Svdvad2ByHh {
    #[inline(always)]
    fn default() -> Svdvad2ByHh {
        <crate::RegValueT<Svdvad2ByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod svdvad2_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sadlg_SPEC;
    pub type Sadlg = crate::EnumBitfieldStruct<u8, Sadlg_SPEC>;
    impl Sadlg {
        #[doc = "The 7-bit address format is selected."]
        pub const _0: Self = Self::new(0);
        #[doc = "The 10-bit address format is selected"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sstadv_SPEC;
    pub type Sstadv = crate::EnumBitfieldStruct<u8, Sstadv_SPEC>;
    impl Sstadv {
        #[doc = "Slave address is disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave address is enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Csecmd_SPEC;
impl crate::sealed::RegSpec for Csecmd_SPEC {
    type DataType = u32;
}
#[doc = "CCC Slave Events Command Register"]
pub type Csecmd = crate::RegValueT<Csecmd_SPEC>;

impl Csecmd {
    #[doc = "Slave Interrupt Requests Enable"]
    #[inline(always)]
    pub fn svirqe(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, csecmd::Svirqe, Csecmd_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,csecmd::Svirqe, Csecmd_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Mastership Requests Enable"]
    #[inline(always)]
    pub fn msrqe(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, csecmd::Msrqe, Csecmd_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,csecmd::Msrqe, Csecmd_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Hot-Join Event Enable"]
    #[inline(always)]
    pub fn hjeve(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, csecmd::Hjeve, Csecmd_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1,1,0,csecmd::Hjeve, Csecmd_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000000000000000. The write value should be 0000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfffffff, 1, 0, u32, Csecmd_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xfffffff,1,0,u32, Csecmd_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Csecmd {
    #[inline(always)]
    fn default() -> Csecmd {
        <crate::RegValueT<Csecmd_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod csecmd {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svirqe_SPEC;
    pub type Svirqe = crate::EnumBitfieldStruct<u8, Svirqe_SPEC>;
    impl Svirqe {
        #[doc = "DISABLED: Slave-initiated Interrupts is Disabled by the Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Slave-initiated Interrupts is Enabled by the Master to control."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Msrqe_SPEC;
    pub type Msrqe = crate::EnumBitfieldStruct<u8, Msrqe_SPEC>;
    impl Msrqe {
        #[doc = "DISABLED: Mastership requests from Secondary Masters is Disabled by the Current Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Mastership requests from Secondary Masters is Enabled by the Current Master to control."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hjeve_SPEC;
    pub type Hjeve = crate::EnumBitfieldStruct<u8, Hjeve_SPEC>;
    impl Hjeve {
        #[doc = "DISABLED: Slave-initiated Hot-Join is Disabled by the Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Slave-initiated Hot-Join is Enabled by the Master to control."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CsecmdHaL_SPEC;
impl crate::sealed::RegSpec for CsecmdHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Slave Events Command Register"]
pub type CsecmdHaL = crate::RegValueT<CsecmdHaL_SPEC>;

impl CsecmdHaL {
    #[doc = "Slave Interrupt Requests Enable"]
    #[inline(always)]
    pub fn svirqe(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        csecmd_ha_l::Svirqe,
        CsecmdHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            csecmd_ha_l::Svirqe,
            CsecmdHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Mastership Requests Enable"]
    #[inline(always)]
    pub fn msrqe(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        csecmd_ha_l::Msrqe,
        CsecmdHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            csecmd_ha_l::Msrqe,
            CsecmdHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Hot-Join Event Enable"]
    #[inline(always)]
    pub fn hjeve(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        csecmd_ha_l::Hjeve,
        CsecmdHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            csecmd_ha_l::Hjeve,
            CsecmdHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000. The write value should be 000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, CsecmdHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xfff,1,0,u16, CsecmdHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CsecmdHaL {
    #[inline(always)]
    fn default() -> CsecmdHaL {
        <crate::RegValueT<CsecmdHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod csecmd_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svirqe_SPEC;
    pub type Svirqe = crate::EnumBitfieldStruct<u8, Svirqe_SPEC>;
    impl Svirqe {
        #[doc = "DISABLED: Slave-initiated Interrupts is Disabled by the Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Slave-initiated Interrupts is Enabled by the Master to control."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Msrqe_SPEC;
    pub type Msrqe = crate::EnumBitfieldStruct<u8, Msrqe_SPEC>;
    impl Msrqe {
        #[doc = "DISABLED: Mastership requests from Secondary Masters is Disabled by the Current Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Mastership requests from Secondary Masters is Enabled by the Current Master to control."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hjeve_SPEC;
    pub type Hjeve = crate::EnumBitfieldStruct<u8, Hjeve_SPEC>;
    impl Hjeve {
        #[doc = "DISABLED: Slave-initiated Hot-Join is Disabled by the Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Slave-initiated Hot-Join is Enabled by the Master to control."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CsecmdByLl_SPEC;
impl crate::sealed::RegSpec for CsecmdByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Slave Events Command Register"]
pub type CsecmdByLl = crate::RegValueT<CsecmdByLl_SPEC>;

impl CsecmdByLl {
    #[doc = "Slave Interrupt Requests Enable"]
    #[inline(always)]
    pub fn svirqe(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        csecmd_by_ll::Svirqe,
        CsecmdByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            csecmd_by_ll::Svirqe,
            CsecmdByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Mastership Requests Enable"]
    #[inline(always)]
    pub fn msrqe(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        csecmd_by_ll::Msrqe,
        CsecmdByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            csecmd_by_ll::Msrqe,
            CsecmdByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Hot-Join Event Enable"]
    #[inline(always)]
    pub fn hjeve(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        csecmd_by_ll::Hjeve,
        CsecmdByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            csecmd_by_ll::Hjeve,
            CsecmdByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, CsecmdByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, CsecmdByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CsecmdByLl {
    #[inline(always)]
    fn default() -> CsecmdByLl {
        <crate::RegValueT<CsecmdByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod csecmd_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Svirqe_SPEC;
    pub type Svirqe = crate::EnumBitfieldStruct<u8, Svirqe_SPEC>;
    impl Svirqe {
        #[doc = "DISABLED: Slave-initiated Interrupts is Disabled by the Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Slave-initiated Interrupts is Enabled by the Master to control."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Msrqe_SPEC;
    pub type Msrqe = crate::EnumBitfieldStruct<u8, Msrqe_SPEC>;
    impl Msrqe {
        #[doc = "DISABLED: Mastership requests from Secondary Masters is Disabled by the Current Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Mastership requests from Secondary Masters is Enabled by the Current Master to control."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hjeve_SPEC;
    pub type Hjeve = crate::EnumBitfieldStruct<u8, Hjeve_SPEC>;
    impl Hjeve {
        #[doc = "DISABLED: Slave-initiated Hot-Join is Disabled by the Master to control."]
        pub const _0: Self = Self::new(0);
        #[doc = "ENABLED: Slave-initiated Hot-Join is Enabled by the Master to control."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ceactst_SPEC;
impl crate::sealed::RegSpec for Ceactst_SPEC {
    type DataType = u32;
}
#[doc = "CCC Enter Activity State Register"]
pub type Ceactst = crate::RegValueT<Ceactst_SPEC>;

impl Ceactst {
    #[doc = "Activity State"]
    #[inline(always)]
    pub fn actst(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, ceactst::Actst, Ceactst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xf,1,0,ceactst::Actst, Ceactst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000000000000000. The write value should be 0000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfffffff, 1, 0, u32, Ceactst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xfffffff,1,0,u32, Ceactst_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ceactst {
    #[inline(always)]
    fn default() -> Ceactst {
        <crate::RegValueT<Ceactst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ceactst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actst_SPEC;
    pub type Actst = crate::EnumBitfieldStruct<u8, Actst_SPEC>;
    impl Actst {
        #[doc = "ENTAS0 1μSec: Latency-free operation"]
        pub const _0001: Self = Self::new(1);
        #[doc = "ENTAS1 100μSec"]
        pub const _0010: Self = Self::new(2);
        #[doc = "ENTAS2 2mSec"]
        pub const _0100: Self = Self::new(4);
        #[doc = "ENTAS3 50mSec: Lowest-activity operation"]
        pub const _1000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CeactstHaL_SPEC;
impl crate::sealed::RegSpec for CeactstHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Enter Activity State Register"]
pub type CeactstHaL = crate::RegValueT<CeactstHaL_SPEC>;

impl CeactstHaL {
    #[doc = "Activity State"]
    #[inline(always)]
    pub fn actst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xf,
        1,
        0,
        ceactst_ha_l::Actst,
        CeactstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xf,
            1,
            0,
            ceactst_ha_l::Actst,
            CeactstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 000000000000. The write value should be 000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, CeactstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xfff,1,0,u16, CeactstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CeactstHaL {
    #[inline(always)]
    fn default() -> CeactstHaL {
        <crate::RegValueT<CeactstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ceactst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actst_SPEC;
    pub type Actst = crate::EnumBitfieldStruct<u8, Actst_SPEC>;
    impl Actst {
        #[doc = "ENTAS0 1μSec: Latency-free operation"]
        pub const _0001: Self = Self::new(1);
        #[doc = "ENTAS1 100μSec"]
        pub const _0010: Self = Self::new(2);
        #[doc = "ENTAS2 2mSec"]
        pub const _0100: Self = Self::new(4);
        #[doc = "ENTAS3 50mSec: Lowest-activity operation"]
        pub const _1000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CeactstByLl_SPEC;
impl crate::sealed::RegSpec for CeactstByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Enter Activity State Register"]
pub type CeactstByLl = crate::RegValueT<CeactstByLl_SPEC>;

impl CeactstByLl {
    #[doc = "Activity State"]
    #[inline(always)]
    pub fn actst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xf,
        1,
        0,
        ceactst_by_ll::Actst,
        CeactstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xf,
            1,
            0,
            ceactst_by_ll::Actst,
            CeactstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, CeactstByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8, CeactstByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CeactstByLl {
    #[inline(always)]
    fn default() -> CeactstByLl {
        <crate::RegValueT<CeactstByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ceactst_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actst_SPEC;
    pub type Actst = crate::EnumBitfieldStruct<u8, Actst_SPEC>;
    impl Actst {
        #[doc = "ENTAS0 1μSec: Latency-free operation"]
        pub const _0001: Self = Self::new(1);
        #[doc = "ENTAS1 100μSec"]
        pub const _0010: Self = Self::new(2);
        #[doc = "ENTAS2 2mSec"]
        pub const _0100: Self = Self::new(4);
        #[doc = "ENTAS3 50mSec: Lowest-activity operation"]
        pub const _1000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cmwlg_SPEC;
impl crate::sealed::RegSpec for Cmwlg_SPEC {
    type DataType = u32;
}
#[doc = "CCC Max Write Length Register"]
pub type Cmwlg = crate::RegValueT<Cmwlg_SPEC>;

impl Cmwlg {
    #[doc = "Max Write Length"]
    #[inline(always)]
    pub fn mwlg(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Cmwlg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Cmwlg_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Cmwlg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Cmwlg_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cmwlg {
    #[inline(always)]
    fn default() -> Cmwlg {
        <crate::RegValueT<Cmwlg_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmwlgHaL_SPEC;
impl crate::sealed::RegSpec for CmwlgHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Max Write Length Register"]
pub type CmwlgHaL = crate::RegValueT<CmwlgHaL_SPEC>;

impl CmwlgHaL {
    #[doc = "Max Write Length"]
    #[inline(always)]
    pub fn mwlg(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, CmwlgHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, CmwlgHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmwlgHaL {
    #[inline(always)]
    fn default() -> CmwlgHaL {
        <crate::RegValueT<CmwlgHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmwlgByLl_SPEC;
impl crate::sealed::RegSpec for CmwlgByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Write Length Register"]
pub type CmwlgByLl = crate::RegValueT<CmwlgByLl_SPEC>;

impl CmwlgByLl {
    #[doc = "Max Write Length"]
    #[inline(always)]
    pub fn mwlg(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmwlgByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmwlgByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmwlgByLl {
    #[inline(always)]
    fn default() -> CmwlgByLl {
        <crate::RegValueT<CmwlgByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmwlgByLh_SPEC;
impl crate::sealed::RegSpec for CmwlgByLh_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Write Length Register"]
pub type CmwlgByLh = crate::RegValueT<CmwlgByLh_SPEC>;

impl CmwlgByLh {
    #[doc = "Max Write Length"]
    #[inline(always)]
    pub fn mwlg(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmwlgByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmwlgByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmwlgByLh {
    #[inline(always)]
    fn default() -> CmwlgByLh {
        <crate::RegValueT<CmwlgByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cmrlg_SPEC;
impl crate::sealed::RegSpec for Cmrlg_SPEC {
    type DataType = u32;
}
#[doc = "CCC Max Read Length Register"]
pub type Cmrlg = crate::RegValueT<Cmrlg_SPEC>;

impl Cmrlg {
    #[doc = "Max Read Length."]
    #[inline(always)]
    pub fn mrlg(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Cmrlg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Cmrlg_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "IBI Payload Size"]
    #[inline(always)]
    pub fn ibipsz(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Cmrlg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Cmrlg_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Cmrlg_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xff,1,0,u8, Cmrlg_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cmrlg {
    #[inline(always)]
    fn default() -> Cmrlg {
        <crate::RegValueT<Cmrlg_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmrlgHaL_SPEC;
impl crate::sealed::RegSpec for CmrlgHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Max Read Length Register"]
pub type CmrlgHaL = crate::RegValueT<CmrlgHaL_SPEC>;

impl CmrlgHaL {
    #[doc = "Max Read Length."]
    #[inline(always)]
    pub fn mrlg(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, CmrlgHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, CmrlgHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmrlgHaL {
    #[inline(always)]
    fn default() -> CmrlgHaL {
        <crate::RegValueT<CmrlgHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmrlgByLl_SPEC;
impl crate::sealed::RegSpec for CmrlgByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Read Length Register"]
pub type CmrlgByLl = crate::RegValueT<CmrlgByLl_SPEC>;

impl CmrlgByLl {
    #[doc = "Max Read Length."]
    #[inline(always)]
    pub fn mrlg(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmrlgByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmrlgByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmrlgByLl {
    #[inline(always)]
    fn default() -> CmrlgByLl {
        <crate::RegValueT<CmrlgByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmrlgByLh_SPEC;
impl crate::sealed::RegSpec for CmrlgByLh_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Read Length Register"]
pub type CmrlgByLh = crate::RegValueT<CmrlgByLh_SPEC>;

impl CmrlgByLh {
    #[doc = "Max Read Length."]
    #[inline(always)]
    pub fn mrlg(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmrlgByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmrlgByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmrlgByLh {
    #[inline(always)]
    fn default() -> CmrlgByLh {
        <crate::RegValueT<CmrlgByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmrlgHaH_SPEC;
impl crate::sealed::RegSpec for CmrlgHaH_SPEC {
    type DataType = u16;
}
#[doc = "CCC Max Read Length Register"]
pub type CmrlgHaH = crate::RegValueT<CmrlgHaH_SPEC>;

impl CmrlgHaH {
    #[doc = "IBI Payload Size"]
    #[inline(always)]
    pub fn ibipsz(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmrlgHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmrlgHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, CmrlgHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, CmrlgHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmrlgHaH {
    #[inline(always)]
    fn default() -> CmrlgHaH {
        <crate::RegValueT<CmrlgHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmrlgByHl_SPEC;
impl crate::sealed::RegSpec for CmrlgByHl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Read Length Register"]
pub type CmrlgByHl = crate::RegValueT<CmrlgByHl_SPEC>;

impl CmrlgByHl {
    #[doc = "IBI Payload Size"]
    #[inline(always)]
    pub fn ibipsz(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmrlgByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmrlgByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmrlgByHl {
    #[inline(always)]
    fn default() -> CmrlgByHl {
        <crate::RegValueT<CmrlgByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cetstmd_SPEC;
impl crate::sealed::RegSpec for Cetstmd_SPEC {
    type DataType = u32;
}
#[doc = "CCC Enter Test Mode Register"]
pub type Cetstmd = crate::RegValueT<Cetstmd_SPEC>;

impl Cetstmd {
    #[doc = "Test Mode"]
    #[inline(always)]
    pub fn tstmd(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, cetstmd::Tstmd, Cetstmd_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xff,1,0,cetstmd::Tstmd, Cetstmd_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xffffff, 1, 0, u32, Cetstmd_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xffffff,1,0,u32, Cetstmd_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Cetstmd {
    #[inline(always)]
    fn default() -> Cetstmd {
        <crate::RegValueT<Cetstmd_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetstmd {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tstmd_SPEC;
    pub type Tstmd = crate::EnumBitfieldStruct<u8, Tstmd_SPEC>;
    impl Tstmd {
        #[doc = "Exit Test Mode"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = "Vendor Test Mode"]
        pub const _0_X_01: Self = Self::new(1);
        #[doc = "– 0xFF : MIPI Reserved"]
        pub const _0_X_02: Self = Self::new(2);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetstmdHaL_SPEC;
impl crate::sealed::RegSpec for CetstmdHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Enter Test Mode Register"]
pub type CetstmdHaL = crate::RegValueT<CetstmdHaL_SPEC>;

impl CetstmdHaL {
    #[doc = "Test Mode"]
    #[inline(always)]
    pub fn tstmd(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        cetstmd_ha_l::Tstmd,
        CetstmdHaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            cetstmd_ha_l::Tstmd,
            CetstmdHaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, CetstmdHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, CetstmdHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for CetstmdHaL {
    #[inline(always)]
    fn default() -> CetstmdHaL {
        <crate::RegValueT<CetstmdHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetstmd_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tstmd_SPEC;
    pub type Tstmd = crate::EnumBitfieldStruct<u8, Tstmd_SPEC>;
    impl Tstmd {
        #[doc = "Exit Test Mode"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = "Vendor Test Mode"]
        pub const _0_X_01: Self = Self::new(1);
        #[doc = "– 0xFF : MIPI Reserved"]
        pub const _0_X_02: Self = Self::new(2);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetstmdByLl_SPEC;
impl crate::sealed::RegSpec for CetstmdByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Enter Test Mode Register"]
pub type CetstmdByLl = crate::RegValueT<CetstmdByLl_SPEC>;

impl CetstmdByLl {
    #[doc = "Test Mode"]
    #[inline(always)]
    pub fn tstmd(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        cetstmd_by_ll::Tstmd,
        CetstmdByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            cetstmd_by_ll::Tstmd,
            CetstmdByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for CetstmdByLl {
    #[inline(always)]
    fn default() -> CetstmdByLl {
        <crate::RegValueT<CetstmdByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetstmd_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tstmd_SPEC;
    pub type Tstmd = crate::EnumBitfieldStruct<u8, Tstmd_SPEC>;
    impl Tstmd {
        #[doc = "Exit Test Mode"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = "Vendor Test Mode"]
        pub const _0_X_01: Self = Self::new(1);
        #[doc = "– 0xFF : MIPI Reserved"]
        pub const _0_X_02: Self = Self::new(2);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cgdvst_SPEC;
impl crate::sealed::RegSpec for Cgdvst_SPEC {
    type DataType = u32;
}
#[doc = "CCC Get Device Status Register"]
pub type Cgdvst = crate::RegValueT<Cgdvst_SPEC>;

impl Cgdvst {
    #[doc = "Pending Interrupt"]
    #[inline(always)]
    pub fn pndint(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, Cgdvst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, Cgdvst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Protocol Error"]
    #[inline(always)]
    pub fn prte(
        self,
    ) -> crate::common::RegisterField<5, 0x1, 1, 0, cgdvst::Prte, Cgdvst_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<5,0x1,1,0,cgdvst::Prte, Cgdvst_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Slave Device\'s current Activity Mode"]
    #[inline(always)]
    pub fn actmd(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, cgdvst::Actmd, Cgdvst_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,cgdvst::Actmd, Cgdvst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Vendor Reserved"]
    #[inline(always)]
    pub fn vdrsv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Cgdvst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Cgdvst_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000. The write value should be 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Cgdvst_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Cgdvst_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cgdvst {
    #[inline(always)]
    fn default() -> Cgdvst {
        <crate::RegValueT<Cgdvst_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cgdvst {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prte_SPEC;
    pub type Prte = crate::EnumBitfieldStruct<u8, Prte_SPEC>;
    impl Prte {
        #[doc = "The Slave has not detected a protocol error since the last Status read."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Slave has detected a protocol error since the last Status read."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actmd_SPEC;
    pub type Actmd = crate::EnumBitfieldStruct<u8, Actmd_SPEC>;
    impl Actmd {
        #[doc = "Activity Mode 0"]
        pub const _00: Self = Self::new(0);
        #[doc = "Activity Mode 1"]
        pub const _01: Self = Self::new(1);
        #[doc = "Activity Mode 2"]
        pub const _10: Self = Self::new(2);
        #[doc = "Activity Mode 3"]
        pub const _11: Self = Self::new(3);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CgdvstHaL_SPEC;
impl crate::sealed::RegSpec for CgdvstHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Get Device Status Register"]
pub type CgdvstHaL = crate::RegValueT<CgdvstHaL_SPEC>;

impl CgdvstHaL {
    #[doc = "Pending Interrupt"]
    #[inline(always)]
    pub fn pndint(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, CgdvstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, CgdvstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, CgdvstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4,1,0,CgdvstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Protocol Error"]
    #[inline(always)]
    pub fn prte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        cgdvst_ha_l::Prte,
        CgdvstHaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            cgdvst_ha_l::Prte,
            CgdvstHaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Device\'s current Activity Mode"]
    #[inline(always)]
    pub fn actmd(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x3,
        1,
        0,
        cgdvst_ha_l::Actmd,
        CgdvstHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x3,
            1,
            0,
            cgdvst_ha_l::Actmd,
            CgdvstHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Vendor Reserved"]
    #[inline(always)]
    pub fn vdrsv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, CgdvstHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, CgdvstHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CgdvstHaL {
    #[inline(always)]
    fn default() -> CgdvstHaL {
        <crate::RegValueT<CgdvstHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cgdvst_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prte_SPEC;
    pub type Prte = crate::EnumBitfieldStruct<u8, Prte_SPEC>;
    impl Prte {
        #[doc = "The Slave has not detected a protocol error since the last Status read."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Slave has detected a protocol error since the last Status read."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actmd_SPEC;
    pub type Actmd = crate::EnumBitfieldStruct<u8, Actmd_SPEC>;
    impl Actmd {
        #[doc = "Activity Mode 0"]
        pub const _00: Self = Self::new(0);
        #[doc = "Activity Mode 1"]
        pub const _01: Self = Self::new(1);
        #[doc = "Activity Mode 2"]
        pub const _10: Self = Self::new(2);
        #[doc = "Activity Mode 3"]
        pub const _11: Self = Self::new(3);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CgdvstByLl_SPEC;
impl crate::sealed::RegSpec for CgdvstByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Get Device Status Register"]
pub type CgdvstByLl = crate::RegValueT<CgdvstByLl_SPEC>;

impl CgdvstByLl {
    #[doc = "Pending Interrupt"]
    #[inline(always)]
    pub fn pndint(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, CgdvstByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xf,1,0,u8, CgdvstByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "This bit is read as 0. The write value should be 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, CgdvstByLl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4,1,0,CgdvstByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Protocol Error"]
    #[inline(always)]
    pub fn prte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        cgdvst_by_ll::Prte,
        CgdvstByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            cgdvst_by_ll::Prte,
            CgdvstByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "Slave Device\'s current Activity Mode"]
    #[inline(always)]
    pub fn actmd(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x3,
        1,
        0,
        cgdvst_by_ll::Actmd,
        CgdvstByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x3,
            1,
            0,
            cgdvst_by_ll::Actmd,
            CgdvstByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for CgdvstByLl {
    #[inline(always)]
    fn default() -> CgdvstByLl {
        <crate::RegValueT<CgdvstByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cgdvst_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prte_SPEC;
    pub type Prte = crate::EnumBitfieldStruct<u8, Prte_SPEC>;
    impl Prte {
        #[doc = "The Slave has not detected a protocol error since the last Status read."]
        pub const _0: Self = Self::new(0);
        #[doc = "The Slave has detected a protocol error since the last Status read."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actmd_SPEC;
    pub type Actmd = crate::EnumBitfieldStruct<u8, Actmd_SPEC>;
    impl Actmd {
        #[doc = "Activity Mode 0"]
        pub const _00: Self = Self::new(0);
        #[doc = "Activity Mode 1"]
        pub const _01: Self = Self::new(1);
        #[doc = "Activity Mode 2"]
        pub const _10: Self = Self::new(2);
        #[doc = "Activity Mode 3"]
        pub const _11: Self = Self::new(3);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CgdvstByLh_SPEC;
impl crate::sealed::RegSpec for CgdvstByLh_SPEC {
    type DataType = u8;
}
#[doc = "CCC Get Device Status Register"]
pub type CgdvstByLh = crate::RegValueT<CgdvstByLh_SPEC>;

impl CgdvstByLh {
    #[doc = "Vendor Reserved"]
    #[inline(always)]
    pub fn vdrsv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CgdvstByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CgdvstByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CgdvstByLh {
    #[inline(always)]
    fn default() -> CgdvstByLh {
        <crate::RegValueT<CgdvstByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cmdspw_SPEC;
impl crate::sealed::RegSpec for Cmdspw_SPEC {
    type DataType = u32;
}
#[doc = "CCC Max Data Speed W(Write) Registe"]
pub type Cmdspw = crate::RegValueT<Cmdspw_SPEC>;

impl Cmdspw {
    #[doc = "Maximum Sustained Write Data Rate"]
    #[inline(always)]
    pub fn mswdr(
        self,
    ) -> crate::common::RegisterField<0, 0x7, 1, 0, cmdspw::Mswdr, Cmdspw_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x7,1,0,cmdspw::Mswdr, Cmdspw_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000000000000000000. The write value should be 00000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fffffff, 1, 0, u32, Cmdspw_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fffffff,1,0,u32, Cmdspw_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cmdspw {
    #[inline(always)]
    fn default() -> Cmdspw {
        <crate::RegValueT<Cmdspw_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspw {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mswdr_SPEC;
    pub type Mswdr = crate::EnumBitfieldStruct<u8, Mswdr_SPEC>;
    impl Mswdr {
        #[doc = "fscl Max (default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "8MHz"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdspwHaL_SPEC;
impl crate::sealed::RegSpec for CmdspwHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Max Data Speed W(Write) Registe"]
pub type CmdspwHaL = crate::RegValueT<CmdspwHaL_SPEC>;

impl CmdspwHaL {
    #[doc = "Maximum Sustained Write Data Rate"]
    #[inline(always)]
    pub fn mswdr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        cmdspw_ha_l::Mswdr,
        CmdspwHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            cmdspw_ha_l::Mswdr,
            CmdspwHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, CmdspwHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1fff,1,0,u16, CmdspwHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmdspwHaL {
    #[inline(always)]
    fn default() -> CmdspwHaL {
        <crate::RegValueT<CmdspwHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspw_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mswdr_SPEC;
    pub type Mswdr = crate::EnumBitfieldStruct<u8, Mswdr_SPEC>;
    impl Mswdr {
        #[doc = "fscl Max (default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "8MHz"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdspwByLl_SPEC;
impl crate::sealed::RegSpec for CmdspwByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Data Speed W(Write) Registe"]
pub type CmdspwByLl = crate::RegValueT<CmdspwByLl_SPEC>;

impl CmdspwByLl {
    #[doc = "Maximum Sustained Write Data Rate"]
    #[inline(always)]
    pub fn mswdr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        cmdspw_by_ll::Mswdr,
        CmdspwByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            cmdspw_by_ll::Mswdr,
            CmdspwByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, CmdspwByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, CmdspwByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmdspwByLl {
    #[inline(always)]
    fn default() -> CmdspwByLl {
        <crate::RegValueT<CmdspwByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspw_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mswdr_SPEC;
    pub type Mswdr = crate::EnumBitfieldStruct<u8, Mswdr_SPEC>;
    impl Mswdr {
        #[doc = "fscl Max (default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "8MHz"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cmdspr_SPEC;
impl crate::sealed::RegSpec for Cmdspr_SPEC {
    type DataType = u32;
}
#[doc = "CCC Max Data Speed R(Read) Registe"]
pub type Cmdspr = crate::RegValueT<Cmdspr_SPEC>;

impl Cmdspr {
    #[doc = "Maximum Sustained Read Data Rate"]
    #[inline(always)]
    pub fn msrdr(
        self,
    ) -> crate::common::RegisterField<0, 0x7, 1, 0, cmdspr::Msrdr, Cmdspr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x7,1,0,cmdspr::Msrdr, Cmdspr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Clock to Data Turnaround Time (TSCO)"]
    #[inline(always)]
    pub fn cdttim(
        self,
    ) -> crate::common::RegisterField<3, 0x7, 1, 0, cmdspr::Cdttim, Cmdspr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x7,1,0,cmdspr::Cdttim, Cmdspr_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000000000000000000. The write value should be 00000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3ffffff, 1, 0, u32, Cmdspr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3ffffff,1,0,u32, Cmdspr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cmdspr {
    #[inline(always)]
    fn default() -> Cmdspr {
        <crate::RegValueT<Cmdspr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Msrdr_SPEC;
    pub type Msrdr = crate::EnumBitfieldStruct<u8, Msrdr_SPEC>;
    impl Msrdr {
        #[doc = "fscl Max (default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "8MHz"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cdttim_SPEC;
    pub type Cdttim = crate::EnumBitfieldStruct<u8, Cdttim_SPEC>;
    impl Cdttim {
        #[doc = "<= 8ns(default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "<= 9ns"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdsprHaL_SPEC;
impl crate::sealed::RegSpec for CmdsprHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Max Data Speed R(Read) Registe"]
pub type CmdsprHaL = crate::RegValueT<CmdsprHaL_SPEC>;

impl CmdsprHaL {
    #[doc = "Maximum Sustained Read Data Rate"]
    #[inline(always)]
    pub fn msrdr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        cmdspr_ha_l::Msrdr,
        CmdsprHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            cmdspr_ha_l::Msrdr,
            CmdsprHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Clock to Data Turnaround Time (TSCO)"]
    #[inline(always)]
    pub fn cdttim(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x7,
        1,
        0,
        cmdspr_ha_l::Cdttim,
        CmdsprHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x7,
            1,
            0,
            cmdspr_ha_l::Cdttim,
            CmdsprHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000. The write value should be 0000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3ff, 1, 0, u16, CmdsprHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3ff,1,0,u16, CmdsprHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmdsprHaL {
    #[inline(always)]
    fn default() -> CmdsprHaL {
        <crate::RegValueT<CmdsprHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspr_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Msrdr_SPEC;
    pub type Msrdr = crate::EnumBitfieldStruct<u8, Msrdr_SPEC>;
    impl Msrdr {
        #[doc = "fscl Max (default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "8MHz"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cdttim_SPEC;
    pub type Cdttim = crate::EnumBitfieldStruct<u8, Cdttim_SPEC>;
    impl Cdttim {
        #[doc = "<= 8ns(default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "<= 9ns"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdsprByLl_SPEC;
impl crate::sealed::RegSpec for CmdsprByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Data Speed R(Read) Registe"]
pub type CmdsprByLl = crate::RegValueT<CmdsprByLl_SPEC>;

impl CmdsprByLl {
    #[doc = "Maximum Sustained Read Data Rate"]
    #[inline(always)]
    pub fn msrdr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x7,
        1,
        0,
        cmdspr_by_ll::Msrdr,
        CmdsprByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x7,
            1,
            0,
            cmdspr_by_ll::Msrdr,
            CmdsprByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Clock to Data Turnaround Time (TSCO)"]
    #[inline(always)]
    pub fn cdttim(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x7,
        1,
        0,
        cmdspr_by_ll::Cdttim,
        CmdsprByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x7,
            1,
            0,
            cmdspr_by_ll::Cdttim,
            CmdsprByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00. The write value should be 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, CmdsprByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8, CmdsprByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmdsprByLl {
    #[inline(always)]
    fn default() -> CmdsprByLl {
        <crate::RegValueT<CmdsprByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspr_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Msrdr_SPEC;
    pub type Msrdr = crate::EnumBitfieldStruct<u8, Msrdr_SPEC>;
    impl Msrdr {
        #[doc = "fscl Max (default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "8MHz"]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cdttim_SPEC;
    pub type Cdttim = crate::EnumBitfieldStruct<u8, Cdttim_SPEC>;
    impl Cdttim {
        #[doc = "<= 8ns(default value)"]
        pub const _0: Self = Self::new(0);
        #[doc = "<= 9ns"]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cmdspt_SPEC;
impl crate::sealed::RegSpec for Cmdspt_SPEC {
    type DataType = u32;
}
#[doc = "CCC Max Data Speed T(Turnaround) Registe"]
pub type Cmdspt = crate::RegValueT<Cmdspt_SPEC>;

impl Cmdspt {
    #[doc = "Maximum Read Turnaround Time24-bit field can encode turnaround times from 0.0 seconds to 16 seconds."]
    #[inline(always)]
    pub fn mrttim(
        self,
    ) -> crate::common::RegisterField<0, 0xffffff, 1, 0, u32, Cmdspt_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffffff,1,0,u32, Cmdspt_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x7f, 1, 0, u8, Cmdspt_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x7f,1,0,u8, Cmdspt_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Maximum Read Turnaround Time Enable"]
    #[inline(always)]
    pub fn mrte(
        self,
    ) -> crate::common::RegisterField<31, 0x1, 1, 0, cmdspt::Mrte, Cmdspt_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<31,0x1,1,0,cmdspt::Mrte, Cmdspt_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cmdspt {
    #[inline(always)]
    fn default() -> Cmdspt {
        <crate::RegValueT<Cmdspt_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspt {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mrte_SPEC;
    pub type Mrte = crate::EnumBitfieldStruct<u8, Mrte_SPEC>;
    impl Mrte {
        #[doc = "Disables transmission of the Maximum Read Turnaround Time."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables transmission of the Maximum Read Turnaround Time."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdsptHaL_SPEC;
impl crate::sealed::RegSpec for CmdsptHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Max Data Speed T(Turnaround) Register"]
pub type CmdsptHaL = crate::RegValueT<CmdsptHaL_SPEC>;

impl CmdsptHaL {
    #[doc = "Maximum Read Turnaround Time24-bit field can encode turnaround times from 0.0 seconds to 16 seconds."]
    #[inline(always)]
    pub fn mrttim(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, CmdsptHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, CmdsptHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmdsptHaL {
    #[inline(always)]
    fn default() -> CmdsptHaL {
        <crate::RegValueT<CmdsptHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdsptByLl_SPEC;
impl crate::sealed::RegSpec for CmdsptByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Data Speed T(Turnaround) Register"]
pub type CmdsptByLl = crate::RegValueT<CmdsptByLl_SPEC>;

impl CmdsptByLl {
    #[doc = "Maximum Read Turnaround Time24-bit field can encode turnaround times from 0.0 seconds to 16 seconds."]
    #[inline(always)]
    pub fn mrttim(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmdsptByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmdsptByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmdsptByLl {
    #[inline(always)]
    fn default() -> CmdsptByLl {
        <crate::RegValueT<CmdsptByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdsptByLh_SPEC;
impl crate::sealed::RegSpec for CmdsptByLh_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Data Speed T(Turnaround) Register"]
pub type CmdsptByLh = crate::RegValueT<CmdsptByLh_SPEC>;

impl CmdsptByLh {
    #[doc = "Maximum Read Turnaround Time24-bit field can encode turnaround times from 0.0 seconds to 16 seconds."]
    #[inline(always)]
    pub fn mrttim(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmdsptByLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmdsptByLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmdsptByLh {
    #[inline(always)]
    fn default() -> CmdsptByLh {
        <crate::RegValueT<CmdsptByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdsptHaH_SPEC;
impl crate::sealed::RegSpec for CmdsptHaH_SPEC {
    type DataType = u16;
}
#[doc = "CCC Max Data Speed T(Turnaround) Register"]
pub type CmdsptHaH = crate::RegValueT<CmdsptHaH_SPEC>;

impl CmdsptHaH {
    #[doc = "Maximum Read Turnaround Time24-bit field can encode turnaround times from 0.0 seconds to 16 seconds."]
    #[inline(always)]
    pub fn mrttim(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmdsptHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmdsptHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x7f, 1, 0, u8, CmdsptHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x7f,1,0,u8, CmdsptHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Maximum Read Turnaround Time Enable"]
    #[inline(always)]
    pub fn mrte(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        cmdspt_ha_h::Mrte,
        CmdsptHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            cmdspt_ha_h::Mrte,
            CmdsptHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for CmdsptHaH {
    #[inline(always)]
    fn default() -> CmdsptHaH {
        <crate::RegValueT<CmdsptHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspt_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mrte_SPEC;
    pub type Mrte = crate::EnumBitfieldStruct<u8, Mrte_SPEC>;
    impl Mrte {
        #[doc = "Disables transmission of the Maximum Read Turnaround Time."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables transmission of the Maximum Read Turnaround Time."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdsptByHl_SPEC;
impl crate::sealed::RegSpec for CmdsptByHl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Data Speed T(Turnaround) Register"]
pub type CmdsptByHl = crate::RegValueT<CmdsptByHl_SPEC>;

impl CmdsptByHl {
    #[doc = "Maximum Read Turnaround Time24-bit field can encode turnaround times from 0.0 seconds to 16 seconds."]
    #[inline(always)]
    pub fn mrttim(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, CmdsptByHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8, CmdsptByHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CmdsptByHl {
    #[inline(always)]
    fn default() -> CmdsptByHl {
        <crate::RegValueT<CmdsptByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CmdsptByHh_SPEC;
impl crate::sealed::RegSpec for CmdsptByHh_SPEC {
    type DataType = u8;
}
#[doc = "CCC Max Data Speed T(Turnaround) Register"]
pub type CmdsptByHh = crate::RegValueT<CmdsptByHh_SPEC>;

impl CmdsptByHh {
    #[doc = "These bits are read as 0000000. The write value should be 0000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, CmdsptByHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0x7f,1,0,u8, CmdsptByHh_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Maximum Read Turnaround Time Enable"]
    #[inline(always)]
    pub fn mrte(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        cmdspt_by_hh::Mrte,
        CmdsptByHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            cmdspt_by_hh::Mrte,
            CmdsptByHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for CmdsptByHh {
    #[inline(always)]
    fn default() -> CmdsptByHh {
        <crate::RegValueT<CmdsptByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cmdspt_by_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mrte_SPEC;
    pub type Mrte = crate::EnumBitfieldStruct<u8, Mrte_SPEC>;
    impl Mrte {
        #[doc = "Disables transmission of the Maximum Read Turnaround Time."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enables transmission of the Maximum Read Turnaround Time."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cetsm_SPEC;
impl crate::sealed::RegSpec for Cetsm_SPEC {
    type DataType = u32;
}
#[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
pub type Cetsm = crate::RegValueT<Cetsm_SPEC>;

impl Cetsm {
    #[doc = "Supports Sync Mode"]
    #[inline(always)]
    pub fn sptsyn(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, cetsm::Sptsyn, Cetsm_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,cetsm::Sptsyn, Cetsm_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Supports Async Mode 0"]
    #[inline(always)]
    pub fn sptasyn0(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, cetsm::Sptasyn0, Cetsm_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x1,1,0,cetsm::Sptasyn0, Cetsm_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Supports Async Mode 1"]
    #[inline(always)]
    pub fn sptasyn1(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, cetsm::Sptasyn1, Cetsm_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x1,1,0,cetsm::Sptasyn1, Cetsm_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Frequency ByteThis byte represents the Slave\'s internal oscillator frequency in increments of 0.5 MHz (500 kHz), up to 127.5 MHz."]
    #[inline(always)]
    pub fn freq(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, cetsm::Freq, Cetsm_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,cetsm::Freq, Cetsm_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Inaccuracy ByteThis byte represents the maximum variation of the Slave\'s internal oscillator in 1/10th percent (0.1%) increments, up to 25.5%."]
    #[inline(always)]
    pub fn inac(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, cetsm::Inac, Cetsm_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0xff,1,0,cetsm::Inac, Cetsm_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, Cetsm_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xff,1,0,u8, Cetsm_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cetsm {
    #[inline(always)]
    fn default() -> Cetsm {
        <crate::RegValueT<Cetsm_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetsm {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptsyn_SPEC;
    pub type Sptsyn = crate::EnumBitfieldStruct<u8, Sptsyn_SPEC>;
    impl Sptsyn {
        #[doc = "Disable Supports Sync Mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable Supports Sync Mode."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptasyn0_SPEC;
    pub type Sptasyn0 = crate::EnumBitfieldStruct<u8, Sptasyn0_SPEC>;
    impl Sptasyn0 {
        #[doc = "Async Mode 0 is not supported."]
        pub const _0: Self = Self::new(0);
        #[doc = "Async Mode 0 is supported."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptasyn1_SPEC;
    pub type Sptasyn1 = crate::EnumBitfieldStruct<u8, Sptasyn1_SPEC>;
    impl Sptasyn1 {
        #[doc = "Async Mode 1 is not supported."]
        pub const _0: Self = Self::new(0);
        #[doc = "Async Mode 1 is supported."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Freq_SPEC;
    pub type Freq = crate::EnumBitfieldStruct<u8, Freq_SPEC>;
    impl Freq {
        #[doc = "32.0KHz"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = ":   7.5MHz"]
        pub const _0_X_0_F: Self = Self::new(15);
        #[doc = "15.5MHz"]
        pub const _0_X_1_F: Self = Self::new(31);
        #[doc = "23.5MHz"]
        pub const _0_X_2_F: Self = Self::new(47);
        #[doc = "31.5MHz"]
        pub const _0_X_3_F: Self = Self::new(63);
        #[doc = "39.5MHz"]
        pub const _0_X_4_F: Self = Self::new(79);
        #[doc = "47.5MHz"]
        pub const _0_X_5_F: Self = Self::new(95);
        #[doc = "55.5MHz"]
        pub const _0_X_6_F: Self = Self::new(111);
        #[doc = "63.5MHz"]
        pub const _0_X_7_F: Self = Self::new(127);
        #[doc = "71.5MHz"]
        pub const _0_X_8_F: Self = Self::new(143);
        #[doc = "79.5MHz"]
        pub const _0_X_9_F: Self = Self::new(159);
        #[doc = "87.5MHz"]
        pub const _0_X_AF: Self = Self::new(175);
        #[doc = "95.5MHz"]
        pub const _0_X_BF: Self = Self::new(191);
        #[doc = "103.5MHz"]
        pub const _0_X_CF: Self = Self::new(207);
        #[doc = "111.5MHz"]
        pub const _0_X_DF: Self = Self::new(223);
        #[doc = "119.5MHz"]
        pub const _0_X_EF: Self = Self::new(239);
        #[doc = "127.5MHz"]
        pub const _0_X_FF: Self = Self::new(255);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inac_SPEC;
    pub type Inac = crate::EnumBitfieldStruct<u8, Inac_SPEC>;
    impl Inac {
        #[doc = "0.0%"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = "1.5%"]
        pub const _0_X_0_F: Self = Self::new(15);
        #[doc = "3.1%"]
        pub const _0_X_1_F: Self = Self::new(31);
        #[doc = "4.7%"]
        pub const _0_X_2_F: Self = Self::new(47);
        #[doc = "6.3%"]
        pub const _0_X_3_F: Self = Self::new(63);
        #[doc = "7.9%"]
        pub const _0_X_4_F: Self = Self::new(79);
        #[doc = "9.5%"]
        pub const _0_X_5_F: Self = Self::new(95);
        #[doc = "11.1%"]
        pub const _0_X_6_F: Self = Self::new(111);
        #[doc = "12.7%"]
        pub const _0_X_7_F: Self = Self::new(127);
        #[doc = "14.3%"]
        pub const _0_X_8_F: Self = Self::new(143);
        #[doc = "15.9%"]
        pub const _0_X_9_F: Self = Self::new(159);
        #[doc = "17.5%"]
        pub const _0_X_AF: Self = Self::new(175);
        #[doc = "19.1%"]
        pub const _0_X_BF: Self = Self::new(191);
        #[doc = "20.7%"]
        pub const _0_X_CF: Self = Self::new(207);
        #[doc = "22.3%"]
        pub const _0_X_DF: Self = Self::new(223);
        #[doc = "23.9%"]
        pub const _0_X_EF: Self = Self::new(239);
        #[doc = "25.5%"]
        pub const _0_X_FF: Self = Self::new(255);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetsmHaL_SPEC;
impl crate::sealed::RegSpec for CetsmHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
pub type CetsmHaL = crate::RegValueT<CetsmHaL_SPEC>;

impl CetsmHaL {
    #[doc = "Supports Sync Mode"]
    #[inline(always)]
    pub fn sptsyn(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        cetsm_ha_l::Sptsyn,
        CetsmHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cetsm_ha_l::Sptsyn,
            CetsmHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Supports Async Mode 0"]
    #[inline(always)]
    pub fn sptasyn0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        cetsm_ha_l::Sptasyn0,
        CetsmHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            cetsm_ha_l::Sptasyn0,
            CetsmHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Supports Async Mode 1"]
    #[inline(always)]
    pub fn sptasyn1(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        cetsm_ha_l::Sptasyn1,
        CetsmHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            cetsm_ha_l::Sptasyn1,
            CetsmHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, CetsmHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, CetsmHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Frequency ByteThis byte represents the Slave\'s internal oscillator frequency in increments of 0.5 MHz (500 kHz), up to 127.5 MHz."]
    #[inline(always)]
    pub fn freq(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        cetsm_ha_l::Freq,
        CetsmHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            cetsm_ha_l::Freq,
            CetsmHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for CetsmHaL {
    #[inline(always)]
    fn default() -> CetsmHaL {
        <crate::RegValueT<CetsmHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetsm_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptsyn_SPEC;
    pub type Sptsyn = crate::EnumBitfieldStruct<u8, Sptsyn_SPEC>;
    impl Sptsyn {
        #[doc = "Disable Supports Sync Mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable Supports Sync Mode."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptasyn0_SPEC;
    pub type Sptasyn0 = crate::EnumBitfieldStruct<u8, Sptasyn0_SPEC>;
    impl Sptasyn0 {
        #[doc = "Async Mode 0 is not supported."]
        pub const _0: Self = Self::new(0);
        #[doc = "Async Mode 0 is supported."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptasyn1_SPEC;
    pub type Sptasyn1 = crate::EnumBitfieldStruct<u8, Sptasyn1_SPEC>;
    impl Sptasyn1 {
        #[doc = "Async Mode 1 is not supported."]
        pub const _0: Self = Self::new(0);
        #[doc = "Async Mode 1 is supported."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Freq_SPEC;
    pub type Freq = crate::EnumBitfieldStruct<u8, Freq_SPEC>;
    impl Freq {
        #[doc = "32.0KHz"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = ":   7.5MHz"]
        pub const _0_X_0_F: Self = Self::new(15);
        #[doc = "15.5MHz"]
        pub const _0_X_1_F: Self = Self::new(31);
        #[doc = "23.5MHz"]
        pub const _0_X_2_F: Self = Self::new(47);
        #[doc = "31.5MHz"]
        pub const _0_X_3_F: Self = Self::new(63);
        #[doc = "39.5MHz"]
        pub const _0_X_4_F: Self = Self::new(79);
        #[doc = "47.5MHz"]
        pub const _0_X_5_F: Self = Self::new(95);
        #[doc = "55.5MHz"]
        pub const _0_X_6_F: Self = Self::new(111);
        #[doc = "63.5MHz"]
        pub const _0_X_7_F: Self = Self::new(127);
        #[doc = "71.5MHz"]
        pub const _0_X_8_F: Self = Self::new(143);
        #[doc = "79.5MHz"]
        pub const _0_X_9_F: Self = Self::new(159);
        #[doc = "87.5MHz"]
        pub const _0_X_AF: Self = Self::new(175);
        #[doc = "95.5MHz"]
        pub const _0_X_BF: Self = Self::new(191);
        #[doc = "103.5MHz"]
        pub const _0_X_CF: Self = Self::new(207);
        #[doc = "111.5MHz"]
        pub const _0_X_DF: Self = Self::new(223);
        #[doc = "119.5MHz"]
        pub const _0_X_EF: Self = Self::new(239);
        #[doc = "127.5MHz"]
        pub const _0_X_FF: Self = Self::new(255);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetsmByLl_SPEC;
impl crate::sealed::RegSpec for CetsmByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
pub type CetsmByLl = crate::RegValueT<CetsmByLl_SPEC>;

impl CetsmByLl {
    #[doc = "Supports Sync Mode"]
    #[inline(always)]
    pub fn sptsyn(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        cetsm_by_ll::Sptsyn,
        CetsmByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cetsm_by_ll::Sptsyn,
            CetsmByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Supports Async Mode 0"]
    #[inline(always)]
    pub fn sptasyn0(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        cetsm_by_ll::Sptasyn0,
        CetsmByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            cetsm_by_ll::Sptasyn0,
            CetsmByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Supports Async Mode 1"]
    #[inline(always)]
    pub fn sptasyn1(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        cetsm_by_ll::Sptasyn1,
        CetsmByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            cetsm_by_ll::Sptasyn1,
            CetsmByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, CetsmByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, CetsmByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CetsmByLl {
    #[inline(always)]
    fn default() -> CetsmByLl {
        <crate::RegValueT<CetsmByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetsm_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptsyn_SPEC;
    pub type Sptsyn = crate::EnumBitfieldStruct<u8, Sptsyn_SPEC>;
    impl Sptsyn {
        #[doc = "Disable Supports Sync Mode."]
        pub const _0: Self = Self::new(0);
        #[doc = "Enable Supports Sync Mode."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptasyn0_SPEC;
    pub type Sptasyn0 = crate::EnumBitfieldStruct<u8, Sptasyn0_SPEC>;
    impl Sptasyn0 {
        #[doc = "Async Mode 0 is not supported."]
        pub const _0: Self = Self::new(0);
        #[doc = "Async Mode 0 is supported."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sptasyn1_SPEC;
    pub type Sptasyn1 = crate::EnumBitfieldStruct<u8, Sptasyn1_SPEC>;
    impl Sptasyn1 {
        #[doc = "Async Mode 1 is not supported."]
        pub const _0: Self = Self::new(0);
        #[doc = "Async Mode 1 is supported."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetsmByLh_SPEC;
impl crate::sealed::RegSpec for CetsmByLh_SPEC {
    type DataType = u8;
}
#[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
pub type CetsmByLh = crate::RegValueT<CetsmByLh_SPEC>;

impl CetsmByLh {
    #[doc = "Frequency ByteThis byte represents the Slave\'s internal oscillator frequency in increments of 0.5 MHz (500 kHz), up to 127.5 MHz."]
    #[inline(always)]
    pub fn freq(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        cetsm_by_lh::Freq,
        CetsmByLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            cetsm_by_lh::Freq,
            CetsmByLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for CetsmByLh {
    #[inline(always)]
    fn default() -> CetsmByLh {
        <crate::RegValueT<CetsmByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetsm_by_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Freq_SPEC;
    pub type Freq = crate::EnumBitfieldStruct<u8, Freq_SPEC>;
    impl Freq {
        #[doc = "32.0KHz"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = ":   7.5MHz"]
        pub const _0_X_0_F: Self = Self::new(15);
        #[doc = "15.5MHz"]
        pub const _0_X_1_F: Self = Self::new(31);
        #[doc = "23.5MHz"]
        pub const _0_X_2_F: Self = Self::new(47);
        #[doc = "31.5MHz"]
        pub const _0_X_3_F: Self = Self::new(63);
        #[doc = "39.5MHz"]
        pub const _0_X_4_F: Self = Self::new(79);
        #[doc = "47.5MHz"]
        pub const _0_X_5_F: Self = Self::new(95);
        #[doc = "55.5MHz"]
        pub const _0_X_6_F: Self = Self::new(111);
        #[doc = "63.5MHz"]
        pub const _0_X_7_F: Self = Self::new(127);
        #[doc = "71.5MHz"]
        pub const _0_X_8_F: Self = Self::new(143);
        #[doc = "79.5MHz"]
        pub const _0_X_9_F: Self = Self::new(159);
        #[doc = "87.5MHz"]
        pub const _0_X_AF: Self = Self::new(175);
        #[doc = "95.5MHz"]
        pub const _0_X_BF: Self = Self::new(191);
        #[doc = "103.5MHz"]
        pub const _0_X_CF: Self = Self::new(207);
        #[doc = "111.5MHz"]
        pub const _0_X_DF: Self = Self::new(223);
        #[doc = "119.5MHz"]
        pub const _0_X_EF: Self = Self::new(239);
        #[doc = "127.5MHz"]
        pub const _0_X_FF: Self = Self::new(255);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetsmHaH_SPEC;
impl crate::sealed::RegSpec for CetsmHaH_SPEC {
    type DataType = u16;
}
#[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
pub type CetsmHaH = crate::RegValueT<CetsmHaH_SPEC>;

impl CetsmHaH {
    #[doc = "Inaccuracy ByteThis byte represents the maximum variation of the Slave\'s internal oscillator in 1/10th percent (0.1%) increments, up to 25.5%."]
    #[inline(always)]
    pub fn inac(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        cetsm_ha_h::Inac,
        CetsmHaH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            cetsm_ha_h::Inac,
            CetsmHaH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, CetsmHaH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, CetsmHaH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CetsmHaH {
    #[inline(always)]
    fn default() -> CetsmHaH {
        <crate::RegValueT<CetsmHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetsm_ha_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inac_SPEC;
    pub type Inac = crate::EnumBitfieldStruct<u8, Inac_SPEC>;
    impl Inac {
        #[doc = "0.0%"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = "1.5%"]
        pub const _0_X_0_F: Self = Self::new(15);
        #[doc = "3.1%"]
        pub const _0_X_1_F: Self = Self::new(31);
        #[doc = "4.7%"]
        pub const _0_X_2_F: Self = Self::new(47);
        #[doc = "6.3%"]
        pub const _0_X_3_F: Self = Self::new(63);
        #[doc = "7.9%"]
        pub const _0_X_4_F: Self = Self::new(79);
        #[doc = "9.5%"]
        pub const _0_X_5_F: Self = Self::new(95);
        #[doc = "11.1%"]
        pub const _0_X_6_F: Self = Self::new(111);
        #[doc = "12.7%"]
        pub const _0_X_7_F: Self = Self::new(127);
        #[doc = "14.3%"]
        pub const _0_X_8_F: Self = Self::new(143);
        #[doc = "15.9%"]
        pub const _0_X_9_F: Self = Self::new(159);
        #[doc = "17.5%"]
        pub const _0_X_AF: Self = Self::new(175);
        #[doc = "19.1%"]
        pub const _0_X_BF: Self = Self::new(191);
        #[doc = "20.7%"]
        pub const _0_X_CF: Self = Self::new(207);
        #[doc = "22.3%"]
        pub const _0_X_DF: Self = Self::new(223);
        #[doc = "23.9%"]
        pub const _0_X_EF: Self = Self::new(239);
        #[doc = "25.5%"]
        pub const _0_X_FF: Self = Self::new(255);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetsmByHl_SPEC;
impl crate::sealed::RegSpec for CetsmByHl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Exchange Timing Support Information M(Mode\u{a0}) Register"]
pub type CetsmByHl = crate::RegValueT<CetsmByHl_SPEC>;

impl CetsmByHl {
    #[doc = "Inaccuracy ByteThis byte represents the maximum variation of the Slave\'s internal oscillator in 1/10th percent (0.1%) increments, up to 25.5%."]
    #[inline(always)]
    pub fn inac(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        cetsm_by_hl::Inac,
        CetsmByHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            cetsm_by_hl::Inac,
            CetsmByHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for CetsmByHl {
    #[inline(always)]
    fn default() -> CetsmByHl {
        <crate::RegValueT<CetsmByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetsm_by_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Inac_SPEC;
    pub type Inac = crate::EnumBitfieldStruct<u8, Inac_SPEC>;
    impl Inac {
        #[doc = "0.0%"]
        pub const _0_X_00: Self = Self::new(0);
        #[doc = "1.5%"]
        pub const _0_X_0_F: Self = Self::new(15);
        #[doc = "3.1%"]
        pub const _0_X_1_F: Self = Self::new(31);
        #[doc = "4.7%"]
        pub const _0_X_2_F: Self = Self::new(47);
        #[doc = "6.3%"]
        pub const _0_X_3_F: Self = Self::new(63);
        #[doc = "7.9%"]
        pub const _0_X_4_F: Self = Self::new(79);
        #[doc = "9.5%"]
        pub const _0_X_5_F: Self = Self::new(95);
        #[doc = "11.1%"]
        pub const _0_X_6_F: Self = Self::new(111);
        #[doc = "12.7%"]
        pub const _0_X_7_F: Self = Self::new(127);
        #[doc = "14.3%"]
        pub const _0_X_8_F: Self = Self::new(143);
        #[doc = "15.9%"]
        pub const _0_X_9_F: Self = Self::new(159);
        #[doc = "17.5%"]
        pub const _0_X_AF: Self = Self::new(175);
        #[doc = "19.1%"]
        pub const _0_X_BF: Self = Self::new(191);
        #[doc = "20.7%"]
        pub const _0_X_CF: Self = Self::new(207);
        #[doc = "22.3%"]
        pub const _0_X_DF: Self = Self::new(223);
        #[doc = "23.9%"]
        pub const _0_X_EF: Self = Self::new(239);
        #[doc = "25.5%"]
        pub const _0_X_FF: Self = Self::new(255);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cetss_SPEC;
impl crate::sealed::RegSpec for Cetss_SPEC {
    type DataType = u32;
}
#[doc = "CCC Exchange Timing Support Information S(State\u{a0}) Register"]
pub type Cetss = crate::RegValueT<Cetss_SPEC>;

impl Cetss {
    #[doc = "Sync Mode Enabled"]
    #[inline(always)]
    pub fn syne(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, cetss::Syne, Cetss_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1,1,0,cetss::Syne, Cetss_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Async Mode Enabled"]
    #[inline(always)]
    pub fn asyne(
        self,
    ) -> crate::common::RegisterField<1, 0x3, 1, 0, cetss::Asyne, Cetss_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x3,1,0,cetss::Asyne, Cetss_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Internal Counter Overflow"]
    #[inline(always)]
    pub fn icovf(
        self,
    ) -> crate::common::RegisterField<7, 0x1, 1, 0, cetss::Icovf, Cetss_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<7,0x1,1,0,cetss::Icovf, Cetss_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000000000000000000. The write value should be 000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xffffff, 1, 0, u32, Cetss_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xffffff,1,0,u32, Cetss_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cetss {
    #[inline(always)]
    fn default() -> Cetss {
        <crate::RegValueT<Cetss_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetss {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syne_SPEC;
    pub type Syne = crate::EnumBitfieldStruct<u8, Syne_SPEC>;
    impl Syne {
        #[doc = "Sync Mode Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Sync Mode Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Asyne_SPEC;
    pub type Asyne = crate::EnumBitfieldStruct<u8, Asyne_SPEC>;
    impl Asyne {
        #[doc = "All Mode Disable"]
        pub const _00: Self = Self::new(0);
        #[doc = "Async Mode 0 Enabled."]
        pub const _01: Self = Self::new(1);
        #[doc = "Async Mode 1 Enabled."]
        pub const _10: Self = Self::new(2);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Icovf_SPEC;
    pub type Icovf = crate::EnumBitfieldStruct<u8, Icovf_SPEC>;
    impl Icovf {
        #[doc = "Slave has not experienced a counter overflow since the most recent previous check."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave experienced a counter overflow since the most recent previous check."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetssHaL_SPEC;
impl crate::sealed::RegSpec for CetssHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Exchange Timing Support Information S(State\u{a0}) Register"]
pub type CetssHaL = crate::RegValueT<CetssHaL_SPEC>;

impl CetssHaL {
    #[doc = "Sync Mode Enabled"]
    #[inline(always)]
    pub fn syne(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        cetss_ha_l::Syne,
        CetssHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cetss_ha_l::Syne,
            CetssHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Async Mode Enabled"]
    #[inline(always)]
    pub fn asyne(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x3,
        1,
        0,
        cetss_ha_l::Asyne,
        CetssHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x3,
            1,
            0,
            cetss_ha_l::Asyne,
            CetssHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Internal Counter Overflow"]
    #[inline(always)]
    pub fn icovf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        cetss_ha_l::Icovf,
        CetssHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            cetss_ha_l::Icovf,
            CetssHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000. The write value should be 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, CetssHaL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8, CetssHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CetssHaL {
    #[inline(always)]
    fn default() -> CetssHaL {
        <crate::RegValueT<CetssHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetss_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syne_SPEC;
    pub type Syne = crate::EnumBitfieldStruct<u8, Syne_SPEC>;
    impl Syne {
        #[doc = "Sync Mode Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Sync Mode Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Asyne_SPEC;
    pub type Asyne = crate::EnumBitfieldStruct<u8, Asyne_SPEC>;
    impl Asyne {
        #[doc = "All Mode Disable"]
        pub const _00: Self = Self::new(0);
        #[doc = "Async Mode 0 Enabled."]
        pub const _01: Self = Self::new(1);
        #[doc = "Async Mode 1 Enabled."]
        pub const _10: Self = Self::new(2);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Icovf_SPEC;
    pub type Icovf = crate::EnumBitfieldStruct<u8, Icovf_SPEC>;
    impl Icovf {
        #[doc = "Slave has not experienced a counter overflow since the most recent previous check."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave experienced a counter overflow since the most recent previous check."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CetssByLl_SPEC;
impl crate::sealed::RegSpec for CetssByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Exchange Timing Support Information S(State\u{a0}) Register"]
pub type CetssByLl = crate::RegValueT<CetssByLl_SPEC>;

impl CetssByLl {
    #[doc = "Sync Mode Enabled"]
    #[inline(always)]
    pub fn syne(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        cetss_by_ll::Syne,
        CetssByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cetss_by_ll::Syne,
            CetssByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "Async Mode Enabled"]
    #[inline(always)]
    pub fn asyne(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x3,
        1,
        0,
        cetss_by_ll::Asyne,
        CetssByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x3,
            1,
            0,
            cetss_by_ll::Asyne,
            CetssByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000. The write value should be 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0xf, 1, 0, u8, CetssByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0xf,1,0,u8, CetssByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
    #[doc = "Internal Counter Overflow"]
    #[inline(always)]
    pub fn icovf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        cetss_by_ll::Icovf,
        CetssByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            cetss_by_ll::Icovf,
            CetssByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for CetssByLl {
    #[inline(always)]
    fn default() -> CetssByLl {
        <crate::RegValueT<CetssByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cetss_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syne_SPEC;
    pub type Syne = crate::EnumBitfieldStruct<u8, Syne_SPEC>;
    impl Syne {
        #[doc = "Sync Mode Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "Sync Mode Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Asyne_SPEC;
    pub type Asyne = crate::EnumBitfieldStruct<u8, Asyne_SPEC>;
    impl Asyne {
        #[doc = "All Mode Disable"]
        pub const _00: Self = Self::new(0);
        #[doc = "Async Mode 0 Enabled."]
        pub const _01: Self = Self::new(1);
        #[doc = "Async Mode 1 Enabled."]
        pub const _10: Self = Self::new(2);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Icovf_SPEC;
    pub type Icovf = crate::EnumBitfieldStruct<u8, Icovf_SPEC>;
    impl Icovf {
        #[doc = "Slave has not experienced a counter overflow since the most recent previous check."]
        pub const _0: Self = Self::new(0);
        #[doc = "Slave experienced a counter overflow since the most recent previous check."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Cghdrcap_SPEC;
impl crate::sealed::RegSpec for Cghdrcap_SPEC {
    type DataType = u32;
}
#[doc = "CCC Get HDR capability Register"]
pub type Cghdrcap = crate::RegValueT<Cghdrcap_SPEC>;

impl Cghdrcap {
    #[doc = "HDR-DDR Operation Enable"]
    #[inline(always)]
    pub fn ddren(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, cghdrcap::Ddren, Cghdrcap_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cghdrcap::Ddren,
            Cghdrcap_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR-TSP Operation Enable"]
    #[inline(always)]
    pub fn tspen(
        self,
    ) -> crate::common::RegisterField<1, 0x1, 1, 0, cghdrcap::Tspen, Cghdrcap_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            cghdrcap::Tspen,
            Cghdrcap_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR-TSL Operation Enable"]
    #[inline(always)]
    pub fn tslen(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, cghdrcap::Tslen, Cghdrcap_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            cghdrcap::Tslen,
            Cghdrcap_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000000000000000000000000000. The write value should be 00000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fffffff, 1, 0, u32, Cghdrcap_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fffffff,1,0,u32, Cghdrcap_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Cghdrcap {
    #[inline(always)]
    fn default() -> Cghdrcap {
        <crate::RegValueT<Cghdrcap_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cghdrcap {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ddren_SPEC;
    pub type Ddren = crate::EnumBitfieldStruct<u8, Ddren_SPEC>;
    impl Ddren {
        #[doc = "HDR-DDR Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-DDR Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tspen_SPEC;
    pub type Tspen = crate::EnumBitfieldStruct<u8, Tspen_SPEC>;
    impl Tspen {
        #[doc = "HDR-TSP Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-TSP Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tslen_SPEC;
    pub type Tslen = crate::EnumBitfieldStruct<u8, Tslen_SPEC>;
    impl Tslen {
        #[doc = "HDR-TSL Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-TSL Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CghdrcapHaL_SPEC;
impl crate::sealed::RegSpec for CghdrcapHaL_SPEC {
    type DataType = u16;
}
#[doc = "CCC Get HDR capability Register"]
pub type CghdrcapHaL = crate::RegValueT<CghdrcapHaL_SPEC>;

impl CghdrcapHaL {
    #[doc = "HDR-DDR Operation Enable"]
    #[inline(always)]
    pub fn ddren(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        cghdrcap_ha_l::Ddren,
        CghdrcapHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cghdrcap_ha_l::Ddren,
            CghdrcapHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR-TSP Operation Enable"]
    #[inline(always)]
    pub fn tspen(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        cghdrcap_ha_l::Tspen,
        CghdrcapHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            cghdrcap_ha_l::Tspen,
            CghdrcapHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR-TSL Operation Enable"]
    #[inline(always)]
    pub fn tslen(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        cghdrcap_ha_l::Tslen,
        CghdrcapHaL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            cghdrcap_ha_l::Tslen,
            CghdrcapHaL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000000000000. The write value should be 0000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, CghdrcapHaL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fff,1,0,u16, CghdrcapHaL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CghdrcapHaL {
    #[inline(always)]
    fn default() -> CghdrcapHaL {
        <crate::RegValueT<CghdrcapHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cghdrcap_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ddren_SPEC;
    pub type Ddren = crate::EnumBitfieldStruct<u8, Ddren_SPEC>;
    impl Ddren {
        #[doc = "HDR-DDR Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-DDR Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tspen_SPEC;
    pub type Tspen = crate::EnumBitfieldStruct<u8, Tspen_SPEC>;
    impl Tspen {
        #[doc = "HDR-TSP Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-TSP Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tslen_SPEC;
    pub type Tslen = crate::EnumBitfieldStruct<u8, Tslen_SPEC>;
    impl Tslen {
        #[doc = "HDR-TSL Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-TSL Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct CghdrcapByLl_SPEC;
impl crate::sealed::RegSpec for CghdrcapByLl_SPEC {
    type DataType = u8;
}
#[doc = "CCC Get HDR capability Register"]
pub type CghdrcapByLl = crate::RegValueT<CghdrcapByLl_SPEC>;

impl CghdrcapByLl {
    #[doc = "HDR-DDR Operation Enable"]
    #[inline(always)]
    pub fn ddren(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        cghdrcap_by_ll::Ddren,
        CghdrcapByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            cghdrcap_by_ll::Ddren,
            CghdrcapByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR-TSP Operation Enable"]
    #[inline(always)]
    pub fn tspen(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        cghdrcap_by_ll::Tspen,
        CghdrcapByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            cghdrcap_by_ll::Tspen,
            CghdrcapByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "HDR-TSL Operation Enable"]
    #[inline(always)]
    pub fn tslen(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        cghdrcap_by_ll::Tslen,
        CghdrcapByLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            cghdrcap_by_ll::Tslen,
            CghdrcapByLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00000. The write value should be 00000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, CghdrcapByLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8, CghdrcapByLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for CghdrcapByLl {
    #[inline(always)]
    fn default() -> CghdrcapByLl {
        <crate::RegValueT<CghdrcapByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod cghdrcap_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ddren_SPEC;
    pub type Ddren = crate::EnumBitfieldStruct<u8, Ddren_SPEC>;
    impl Ddren {
        #[doc = "HDR-DDR Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-DDR Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tspen_SPEC;
    pub type Tspen = crate::EnumBitfieldStruct<u8, Tspen_SPEC>;
    impl Tspen {
        #[doc = "HDR-TSP Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-TSP Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tslen_SPEC;
    pub type Tslen = crate::EnumBitfieldStruct<u8, Tslen_SPEC>;
    impl Tslen {
        #[doc = "HDR-TSL Operation is Disabled."]
        pub const _0: Self = Self::new(0);
        #[doc = "HDR-TSL Operation is Enabled."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Bitcnt_SPEC;
impl crate::sealed::RegSpec for Bitcnt_SPEC {
    type DataType = u32;
}
#[doc = "Bit Count Register"]
pub type Bitcnt = crate::RegValueT<Bitcnt_SPEC>;

impl Bitcnt {
    #[doc = "Bit Counter"]
    #[inline(always)]
    pub fn bcnt(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, Bitcnt_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, Bitcnt_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ffffff, 1, 0, u32, Bitcnt_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7ffffff,1,0,u32, Bitcnt_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Bitcnt {
    #[inline(always)]
    fn default() -> Bitcnt {
        <crate::RegValueT<Bitcnt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BitcntHaL_SPEC;
impl crate::sealed::RegSpec for BitcntHaL_SPEC {
    type DataType = u16;
}
#[doc = "Bit Count Register"]
pub type BitcntHaL = crate::RegValueT<BitcntHaL_SPEC>;

impl BitcntHaL {
    #[doc = "Bit Counter"]
    #[inline(always)]
    pub fn bcnt(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, BitcntHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, BitcntHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ff, 1, 0, u16, BitcntHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7ff,1,0,u16, BitcntHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for BitcntHaL {
    #[inline(always)]
    fn default() -> BitcntHaL {
        <crate::RegValueT<BitcntHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct BitcntByLl_SPEC;
impl crate::sealed::RegSpec for BitcntByLl_SPEC {
    type DataType = u8;
}
#[doc = "Bit Count Register"]
pub type BitcntByLl = crate::RegValueT<BitcntByLl_SPEC>;

impl BitcntByLl {
    #[doc = "Bit Counter"]
    #[inline(always)]
    pub fn bcnt(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, BitcntByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, BitcntByLl_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, BitcntByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8, BitcntByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for BitcntByLl {
    #[inline(always)]
    fn default() -> BitcntByLl {
        <crate::RegValueT<BitcntByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Nqstlv_SPEC;
impl crate::sealed::RegSpec for Nqstlv_SPEC {
    type DataType = u32;
}
#[doc = "Normal Queue Status Level Register"]
pub type Nqstlv = crate::RegValueT<Nqstlv_SPEC>;

impl Nqstlv {
    #[doc = "Normal Command Queue Free LevelNumber of free buffer entries currently in the Command Queue. Reset value is the depth of the Command Queue."]
    #[inline(always)]
    pub fn cmdqflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Nqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Nqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Normal Response Queue LevelNumber of buffer entries currently in the Response Queue."]
    #[inline(always)]
    pub fn rspqlv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Nqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Nqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Normal IBI Queue Level  Number of buffer entries currently in the IBI Queue."]
    #[inline(always)]
    pub fn ibiqlv(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, Nqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xff,1,0,u8, Nqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Normal IBI Status CountNumber of IBI Status entries currently in the IBI Queue."]
    #[inline(always)]
    pub fn ibiscnt(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, Nqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<24,0x1f,1,0,u8, Nqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<29, 0x7, 1, 0, u8, Nqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<29,0x7,1,0,u8, Nqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Nqstlv {
    #[inline(always)]
    fn default() -> Nqstlv {
        <crate::RegValueT<Nqstlv_SPEC> as RegisterValue<_>>::new(8)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqstlvHaL_SPEC;
impl crate::sealed::RegSpec for NqstlvHaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Queue Status Level Register"]
pub type NqstlvHaL = crate::RegValueT<NqstlvHaL_SPEC>;

impl NqstlvHaL {
    #[doc = "Normal Command Queue Free LevelNumber of free buffer entries currently in the Command Queue. Reset value is the depth of the Command Queue."]
    #[inline(always)]
    pub fn cmdqflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NqstlvHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NqstlvHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Normal Response Queue LevelNumber of buffer entries currently in the Response Queue."]
    #[inline(always)]
    pub fn rspqlv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, NqstlvHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, NqstlvHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for NqstlvHaL {
    #[inline(always)]
    fn default() -> NqstlvHaL {
        <crate::RegValueT<NqstlvHaL_SPEC> as RegisterValue<_>>::new(8)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqstlvByLl_SPEC;
impl crate::sealed::RegSpec for NqstlvByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Queue Status Level Register"]
pub type NqstlvByLl = crate::RegValueT<NqstlvByLl_SPEC>;

impl NqstlvByLl {
    #[doc = "Normal Command Queue Free LevelNumber of free buffer entries currently in the Command Queue. Reset value is the depth of the Command Queue."]
    #[inline(always)]
    pub fn cmdqflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NqstlvByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NqstlvByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for NqstlvByLl {
    #[inline(always)]
    fn default() -> NqstlvByLl {
        <crate::RegValueT<NqstlvByLl_SPEC> as RegisterValue<_>>::new(8)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqstlvByLh_SPEC;
impl crate::sealed::RegSpec for NqstlvByLh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Queue Status Level Register"]
pub type NqstlvByLh = crate::RegValueT<NqstlvByLh_SPEC>;

impl NqstlvByLh {
    #[doc = "Normal Response Queue LevelNumber of buffer entries currently in the Response Queue."]
    #[inline(always)]
    pub fn rspqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NqstlvByLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NqstlvByLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for NqstlvByLh {
    #[inline(always)]
    fn default() -> NqstlvByLh {
        <crate::RegValueT<NqstlvByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqstlvHaH_SPEC;
impl crate::sealed::RegSpec for NqstlvHaH_SPEC {
    type DataType = u16;
}
#[doc = "Normal Queue Status Level Register"]
pub type NqstlvHaH = crate::RegValueT<NqstlvHaH_SPEC>;

impl NqstlvHaH {
    #[doc = "Normal IBI Queue Level  Number of buffer entries currently in the IBI Queue."]
    #[inline(always)]
    pub fn ibiqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NqstlvHaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NqstlvHaH_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Normal IBI Status CountNumber of IBI Status entries currently in the IBI Queue."]
    #[inline(always)]
    pub fn ibiscnt(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, NqstlvHaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0x1f,1,0,u8, NqstlvHaH_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, NqstlvHaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<13,0x7,1,0,u8, NqstlvHaH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for NqstlvHaH {
    #[inline(always)]
    fn default() -> NqstlvHaH {
        <crate::RegValueT<NqstlvHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqstlvByHl_SPEC;
impl crate::sealed::RegSpec for NqstlvByHl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Queue Status Level Register"]
pub type NqstlvByHl = crate::RegValueT<NqstlvByHl_SPEC>;

impl NqstlvByHl {
    #[doc = "Normal IBI Queue Level  Number of buffer entries currently in the IBI Queue."]
    #[inline(always)]
    pub fn ibiqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NqstlvByHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NqstlvByHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for NqstlvByHl {
    #[inline(always)]
    fn default() -> NqstlvByHl {
        <crate::RegValueT<NqstlvByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NqstlvByHh_SPEC;
impl crate::sealed::RegSpec for NqstlvByHh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Queue Status Level Register"]
pub type NqstlvByHh = crate::RegValueT<NqstlvByHh_SPEC>;

impl NqstlvByHh {
    #[doc = "Normal IBI Status CountNumber of IBI Status entries currently in the IBI Queue."]
    #[inline(always)]
    pub fn ibiscnt(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, NqstlvByHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x1f,1,0,u8, NqstlvByHh_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, NqstlvByHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8, NqstlvByHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for NqstlvByHh {
    #[inline(always)]
    fn default() -> NqstlvByHh {
        <crate::RegValueT<NqstlvByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ndbstlv0_SPEC;
impl crate::sealed::RegSpec for Ndbstlv0_SPEC {
    type DataType = u32;
}
#[doc = "Normal Data Buffer Status Level Register 0"]
pub type Ndbstlv0 = crate::RegValueT<Ndbstlv0_SPEC>;

impl Ndbstlv0 {
    #[doc = "Normal Tx Data Buffer Free LevelIndicates the number of free Tx Data Buffer entries in the Tx Data Queue.Reset value is the depth of the Tx Data Queue."]
    #[inline(always)]
    pub fn tdbflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ndbstlv0_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Ndbstlv0_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Normal Rx Data Buffer LevelIndicates the number of Rx Data Buffer entries in the Rx Data Queue."]
    #[inline(always)]
    pub fn rdblv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ndbstlv0_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Ndbstlv0_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Ndbstlv0_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Ndbstlv0_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Ndbstlv0 {
    #[inline(always)]
    fn default() -> Ndbstlv0 {
        <crate::RegValueT<Ndbstlv0_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ndbstlv0HaL_SPEC;
impl crate::sealed::RegSpec for Ndbstlv0HaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Data Buffer Status Level Register 0"]
pub type Ndbstlv0HaL = crate::RegValueT<Ndbstlv0HaL_SPEC>;

impl Ndbstlv0HaL {
    #[doc = "Normal Tx Data Buffer Free LevelIndicates the number of free Tx Data Buffer entries in the Tx Data Queue.Reset value is the depth of the Tx Data Queue."]
    #[inline(always)]
    pub fn tdbflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ndbstlv0HaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Ndbstlv0HaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "Normal Rx Data Buffer LevelIndicates the number of Rx Data Buffer entries in the Rx Data Queue."]
    #[inline(always)]
    pub fn rdblv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Ndbstlv0HaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Ndbstlv0HaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Ndbstlv0HaL {
    #[inline(always)]
    fn default() -> Ndbstlv0HaL {
        <crate::RegValueT<Ndbstlv0HaL_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ndbstlv0ByLl_SPEC;
impl crate::sealed::RegSpec for Ndbstlv0ByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Data Buffer Status Level Register 0"]
pub type Ndbstlv0ByLl = crate::RegValueT<Ndbstlv0ByLl_SPEC>;

impl Ndbstlv0ByLl {
    #[doc = "Normal Tx Data Buffer Free LevelIndicates the number of free Tx Data Buffer entries in the Tx Data Queue.Reset value is the depth of the Tx Data Queue."]
    #[inline(always)]
    pub fn tdbflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ndbstlv0ByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Ndbstlv0ByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Ndbstlv0ByLl {
    #[inline(always)]
    fn default() -> Ndbstlv0ByLl {
        <crate::RegValueT<Ndbstlv0ByLl_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ndbstlv0ByLh_SPEC;
impl crate::sealed::RegSpec for Ndbstlv0ByLh_SPEC {
    type DataType = u8;
}
#[doc = "Normal Data Buffer Status Level Register 0"]
pub type Ndbstlv0ByLh = crate::RegValueT<Ndbstlv0ByLh_SPEC>;

impl Ndbstlv0ByLh {
    #[doc = "Normal Rx Data Buffer LevelIndicates the number of Rx Data Buffer entries in the Rx Data Queue."]
    #[inline(always)]
    pub fn rdblv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Ndbstlv0ByLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Ndbstlv0ByLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Ndbstlv0ByLh {
    #[inline(always)]
    fn default() -> Ndbstlv0ByLh {
        <crate::RegValueT<Ndbstlv0ByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Nrsqstlv_SPEC;
impl crate::sealed::RegSpec for Nrsqstlv_SPEC {
    type DataType = u32;
}
#[doc = "Normal Receive Status Queue Status Level Register"]
pub type Nrsqstlv = crate::RegValueT<Nrsqstlv_SPEC>;

impl Nrsqstlv {
    #[doc = "Normal Receive Status Queue Level"]
    #[inline(always)]
    pub fn rsqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Nrsqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Nrsqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 000000000000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xffffff, 1, 0, u32, Nrsqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xffffff,1,0,u32, Nrsqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Nrsqstlv {
    #[inline(always)]
    fn default() -> Nrsqstlv {
        <crate::RegValueT<Nrsqstlv_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NrsqstlvHaL_SPEC;
impl crate::sealed::RegSpec for NrsqstlvHaL_SPEC {
    type DataType = u16;
}
#[doc = "Normal Receive Status Queue Status Level Register"]
pub type NrsqstlvHaL = crate::RegValueT<NrsqstlvHaL_SPEC>;

impl NrsqstlvHaL {
    #[doc = "Normal Receive Status Queue Level"]
    #[inline(always)]
    pub fn rsqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NrsqstlvHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NrsqstlvHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, NrsqstlvHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, NrsqstlvHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for NrsqstlvHaL {
    #[inline(always)]
    fn default() -> NrsqstlvHaL {
        <crate::RegValueT<NrsqstlvHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct NrsqstlvByLl_SPEC;
impl crate::sealed::RegSpec for NrsqstlvByLl_SPEC {
    type DataType = u8;
}
#[doc = "Normal Receive Status Queue Status Level Register"]
pub type NrsqstlvByLl = crate::RegValueT<NrsqstlvByLl_SPEC>;

impl NrsqstlvByLl {
    #[doc = "Normal Receive Status Queue Level"]
    #[inline(always)]
    pub fn rsqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, NrsqstlvByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, NrsqstlvByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for NrsqstlvByLl {
    #[inline(always)]
    fn default() -> NrsqstlvByLl {
        <crate::RegValueT<NrsqstlvByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Hqstlv_SPEC;
impl crate::sealed::RegSpec for Hqstlv_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Queue Status Level Register"]
pub type Hqstlv = crate::RegValueT<Hqstlv_SPEC>;

impl Hqstlv {
    #[doc = "High Priority Command Queue LevelNumber of free buffer entries currently in the High Priority Command Queue. Reset value is the depth of the High Priority Command Queue"]
    #[inline(always)]
    pub fn cmdqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Hqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Hqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "High Priority Response Queue LevelNumber of buffer entries currently in the High Priority Response Queue. Data Queue."]
    #[inline(always)]
    pub fn rspqlv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Hqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Hqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Hqstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Hqstlv_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Hqstlv {
    #[inline(always)]
    fn default() -> Hqstlv {
        <crate::RegValueT<Hqstlv_SPEC> as RegisterValue<_>>::new(2)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HqstlvHaL_SPEC;
impl crate::sealed::RegSpec for HqstlvHaL_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Queue Status Level Register"]
pub type HqstlvHaL = crate::RegValueT<HqstlvHaL_SPEC>;

impl HqstlvHaL {
    #[doc = "High Priority Command Queue LevelNumber of free buffer entries currently in the High Priority Command Queue. Reset value is the depth of the High Priority Command Queue"]
    #[inline(always)]
    pub fn cmdqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, HqstlvHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, HqstlvHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "High Priority Response Queue LevelNumber of buffer entries currently in the High Priority Response Queue. Data Queue."]
    #[inline(always)]
    pub fn rspqlv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, HqstlvHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, HqstlvHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for HqstlvHaL {
    #[inline(always)]
    fn default() -> HqstlvHaL {
        <crate::RegValueT<HqstlvHaL_SPEC> as RegisterValue<_>>::new(2)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HqstlvByLl_SPEC;
impl crate::sealed::RegSpec for HqstlvByLl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Queue Status Level Register"]
pub type HqstlvByLl = crate::RegValueT<HqstlvByLl_SPEC>;

impl HqstlvByLl {
    #[doc = "High Priority Command Queue LevelNumber of free buffer entries currently in the High Priority Command Queue. Reset value is the depth of the High Priority Command Queue"]
    #[inline(always)]
    pub fn cmdqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, HqstlvByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, HqstlvByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for HqstlvByLl {
    #[inline(always)]
    fn default() -> HqstlvByLl {
        <crate::RegValueT<HqstlvByLl_SPEC> as RegisterValue<_>>::new(2)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HqstlvByLh_SPEC;
impl crate::sealed::RegSpec for HqstlvByLh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Queue Status Level Register"]
pub type HqstlvByLh = crate::RegValueT<HqstlvByLh_SPEC>;

impl HqstlvByLh {
    #[doc = "High Priority Response Queue LevelNumber of buffer entries currently in the High Priority Response Queue. Data Queue."]
    #[inline(always)]
    pub fn rspqlv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, HqstlvByLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, HqstlvByLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for HqstlvByLh {
    #[inline(always)]
    fn default() -> HqstlvByLh {
        <crate::RegValueT<HqstlvByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Hdbstlv_SPEC;
impl crate::sealed::RegSpec for Hdbstlv_SPEC {
    type DataType = u32;
}
#[doc = "High Priority Data Buffer Status Level Register"]
pub type Hdbstlv = crate::RegValueT<Hdbstlv_SPEC>;

impl Hdbstlv {
    #[doc = "High Priority Tx Data Buffer Free LevelIndicates the number of free High Priority Tx Data Buffer entries in the High Priority Tx Data Queue.Reset value is the depth of the High Priority Tx Data Queue."]
    #[inline(always)]
    pub fn tdbflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Hdbstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Hdbstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "High Priority Rx Data Buffer Level Indicates the number of High Priority Rx Data Buffer entries in the High Priority Rx Data Queue."]
    #[inline(always)]
    pub fn rdblv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, Hdbstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, Hdbstlv_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Hdbstlv_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Hdbstlv_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Hdbstlv {
    #[inline(always)]
    fn default() -> Hdbstlv {
        <crate::RegValueT<Hdbstlv_SPEC> as RegisterValue<_>>::new(4)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HdbstlvHaL_SPEC;
impl crate::sealed::RegSpec for HdbstlvHaL_SPEC {
    type DataType = u16;
}
#[doc = "High Priority Data Buffer Status Level Register"]
pub type HdbstlvHaL = crate::RegValueT<HdbstlvHaL_SPEC>;

impl HdbstlvHaL {
    #[doc = "High Priority Tx Data Buffer Free LevelIndicates the number of free High Priority Tx Data Buffer entries in the High Priority Tx Data Queue.Reset value is the depth of the High Priority Tx Data Queue."]
    #[inline(always)]
    pub fn tdbflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, HdbstlvHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, HdbstlvHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "High Priority Rx Data Buffer Level Indicates the number of High Priority Rx Data Buffer entries in the High Priority Rx Data Queue."]
    #[inline(always)]
    pub fn rdblv(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, HdbstlvHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, HdbstlvHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for HdbstlvHaL {
    #[inline(always)]
    fn default() -> HdbstlvHaL {
        <crate::RegValueT<HdbstlvHaL_SPEC> as RegisterValue<_>>::new(4)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HdbstlvByLl_SPEC;
impl crate::sealed::RegSpec for HdbstlvByLl_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Data Buffer Status Level Register"]
pub type HdbstlvByLl = crate::RegValueT<HdbstlvByLl_SPEC>;

impl HdbstlvByLl {
    #[doc = "High Priority Tx Data Buffer Free LevelIndicates the number of free High Priority Tx Data Buffer entries in the High Priority Tx Data Queue.Reset value is the depth of the High Priority Tx Data Queue."]
    #[inline(always)]
    pub fn tdbflv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, HdbstlvByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, HdbstlvByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for HdbstlvByLl {
    #[inline(always)]
    fn default() -> HdbstlvByLl {
        <crate::RegValueT<HdbstlvByLl_SPEC> as RegisterValue<_>>::new(4)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HdbstlvByLh_SPEC;
impl crate::sealed::RegSpec for HdbstlvByLh_SPEC {
    type DataType = u8;
}
#[doc = "High Priority Data Buffer Status Level Register"]
pub type HdbstlvByLh = crate::RegValueT<HdbstlvByLh_SPEC>;

impl HdbstlvByLh {
    #[doc = "High Priority Rx Data Buffer Level Indicates the number of High Priority Rx Data Buffer entries in the High Priority Rx Data Queue."]
    #[inline(always)]
    pub fn rdblv(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, HdbstlvByLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, HdbstlvByLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for HdbstlvByLh {
    #[inline(always)]
    fn default() -> HdbstlvByLh {
        <crate::RegValueT<HdbstlvByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Prstdbg_SPEC;
impl crate::sealed::RegSpec for Prstdbg_SPEC {
    type DataType = u32;
}
#[doc = "Present State Debug Register"]
pub type Prstdbg = crate::RegValueT<Prstdbg_SPEC>;

impl Prstdbg {
    #[doc = "SCL Line Signal LevelThis bit is used to check the SCL Line level, in order to recover from errors and for debugging. This bit reflects the value of synchronized pt_scli_a signal."]
    #[inline(always)]
    pub fn scilv(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, Prstdbg_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<0, 1, 0, Prstdbg_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "SDA Line Signal LevelThis bit is used to check the SDA Line level, in order to recover from errors and for debugging. This bit reflects the value of synchronized pt_sdai_a  signal."]
    #[inline(always)]
    pub fn sdilv(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, Prstdbg_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<1, 1, 0, Prstdbg_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
    #[doc = "SCL Output Level"]
    #[inline(always)]
    pub fn scolv(
        self,
    ) -> crate::common::RegisterField<2, 0x1, 1, 0, prstdbg::Scolv, Prstdbg_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<2,0x1,1,0,prstdbg::Scolv, Prstdbg_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "SDA Output Level"]
    #[inline(always)]
    pub fn sdolv(
        self,
    ) -> crate::common::RegisterField<3, 0x1, 1, 0, prstdbg::Sdolv, Prstdbg_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<3,0x1,1,0,prstdbg::Sdolv, Prstdbg_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<28, 0xf, 1, 0, u8, Prstdbg_SPEC, crate::common::R> {
        crate::common::RegisterField::<28,0xf,1,0,u8, Prstdbg_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Prstdbg {
    #[inline(always)]
    fn default() -> Prstdbg {
        <crate::RegValueT<Prstdbg_SPEC> as RegisterValue<_>>::new(15)
    }
}
pub mod prstdbg {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scolv_SPEC;
    pub type Scolv = crate::EnumBitfieldStruct<u8, Scolv_SPEC>;
    impl Scolv {
        #[doc = "This IP has driven the SCL pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has released the SCL pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdolv_SPEC;
    pub type Sdolv = crate::EnumBitfieldStruct<u8, Sdolv_SPEC>;
    impl Sdolv {
        #[doc = "This IP has driven the SDA pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has released the SDA pin."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrstdbgHaL_SPEC;
impl crate::sealed::RegSpec for PrstdbgHaL_SPEC {
    type DataType = u16;
}
#[doc = "Present State Debug Register"]
pub type PrstdbgHaL = crate::RegValueT<PrstdbgHaL_SPEC>;

impl PrstdbgHaL {
    #[doc = "SCL Line Signal LevelThis bit is used to check the SCL Line level, in order to recover from errors and for debugging. This bit reflects the value of synchronized pt_scli_a signal."]
    #[inline(always)]
    pub fn scilv(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, PrstdbgHaL_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<0,1,0,PrstdbgHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "SDA Line Signal LevelThis bit is used to check the SDA Line level, in order to recover from errors and for debugging. This bit reflects the value of synchronized pt_sdai_a  signal."]
    #[inline(always)]
    pub fn sdilv(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, PrstdbgHaL_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<1,1,0,PrstdbgHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "SCL Output Level"]
    #[inline(always)]
    pub fn scolv(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        prstdbg_ha_l::Scolv,
        PrstdbgHaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            prstdbg_ha_l::Scolv,
            PrstdbgHaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "SDA Output Level"]
    #[inline(always)]
    pub fn sdolv(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        prstdbg_ha_l::Sdolv,
        PrstdbgHaL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            prstdbg_ha_l::Sdolv,
            PrstdbgHaL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, PrstdbgHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<14,0x3,1,0,u8, PrstdbgHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PrstdbgHaL {
    #[inline(always)]
    fn default() -> PrstdbgHaL {
        <crate::RegValueT<PrstdbgHaL_SPEC> as RegisterValue<_>>::new(15)
    }
}
pub mod prstdbg_ha_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scolv_SPEC;
    pub type Scolv = crate::EnumBitfieldStruct<u8, Scolv_SPEC>;
    impl Scolv {
        #[doc = "This IP has driven the SCL pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has released the SCL pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdolv_SPEC;
    pub type Sdolv = crate::EnumBitfieldStruct<u8, Sdolv_SPEC>;
    impl Sdolv {
        #[doc = "This IP has driven the SDA pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has released the SDA pin."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrstdbgByLl_SPEC;
impl crate::sealed::RegSpec for PrstdbgByLl_SPEC {
    type DataType = u8;
}
#[doc = "Present State Debug Register"]
pub type PrstdbgByLl = crate::RegValueT<PrstdbgByLl_SPEC>;

impl PrstdbgByLl {
    #[doc = "SCL Line Signal LevelThis bit is used to check the SCL Line level, in order to recover from errors and for debugging. This bit reflects the value of synchronized pt_scli_a signal."]
    #[inline(always)]
    pub fn scilv(
        self,
    ) -> crate::common::RegisterFieldBool<0, 1, 0, PrstdbgByLl_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<0,1,0,PrstdbgByLl_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "SDA Line Signal LevelThis bit is used to check the SDA Line level, in order to recover from errors and for debugging. This bit reflects the value of synchronized pt_sdai_a  signal."]
    #[inline(always)]
    pub fn sdilv(
        self,
    ) -> crate::common::RegisterFieldBool<1, 1, 0, PrstdbgByLl_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<1,1,0,PrstdbgByLl_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "SCL Output Level"]
    #[inline(always)]
    pub fn scolv(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        prstdbg_by_ll::Scolv,
        PrstdbgByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            prstdbg_by_ll::Scolv,
            PrstdbgByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "SDA Output Level"]
    #[inline(always)]
    pub fn sdolv(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        prstdbg_by_ll::Sdolv,
        PrstdbgByLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            prstdbg_by_ll::Sdolv,
            PrstdbgByLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
    #[doc = "These bits are read as 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, PrstdbgByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<4,0xf,1,0,u8, PrstdbgByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PrstdbgByLl {
    #[inline(always)]
    fn default() -> PrstdbgByLl {
        <crate::RegValueT<PrstdbgByLl_SPEC> as RegisterValue<_>>::new(15)
    }
}
pub mod prstdbg_by_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scolv_SPEC;
    pub type Scolv = crate::EnumBitfieldStruct<u8, Scolv_SPEC>;
    impl Scolv {
        #[doc = "This IP has driven the SCL pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has released the SCL pin."]
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sdolv_SPEC;
    pub type Sdolv = crate::EnumBitfieldStruct<u8, Sdolv_SPEC>;
    impl Sdolv {
        #[doc = "This IP has driven the SDA pin low."]
        pub const _0: Self = Self::new(0);
        #[doc = "This IP has released the SDA pin."]
        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrstdbgByLh_SPEC;
impl crate::sealed::RegSpec for PrstdbgByLh_SPEC {
    type DataType = u8;
}
#[doc = "Present State Debug Register"]
pub type PrstdbgByLh = crate::RegValueT<PrstdbgByLh_SPEC>;

impl PrstdbgByLh {
    #[doc = "These bits are read as 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, PrstdbgByLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<6,0x3,1,0,u8, PrstdbgByLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PrstdbgByLh {
    #[inline(always)]
    fn default() -> PrstdbgByLh {
        <crate::RegValueT<PrstdbgByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrstdbgHaH_SPEC;
impl crate::sealed::RegSpec for PrstdbgHaH_SPEC {
    type DataType = u16;
}
#[doc = "Present State Debug Register"]
pub type PrstdbgHaH = crate::RegValueT<PrstdbgHaH_SPEC>;

impl PrstdbgHaH {
    #[doc = "These bits are read as 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, PrstdbgHaH_SPEC, crate::common::R> {
        crate::common::RegisterField::<12,0xf,1,0,u8, PrstdbgHaH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PrstdbgHaH {
    #[inline(always)]
    fn default() -> PrstdbgHaH {
        <crate::RegValueT<PrstdbgHaH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrstdbgByHl_SPEC;
impl crate::sealed::RegSpec for PrstdbgByHl_SPEC {
    type DataType = u8;
}
#[doc = "Present State Debug Register"]
pub type PrstdbgByHl = crate::RegValueT<PrstdbgByHl_SPEC>;

impl PrstdbgByHl {
    #[doc = "These bits are read as 00."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, PrstdbgByHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<6,0x3,1,0,u8, PrstdbgByHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PrstdbgByHl {
    #[inline(always)]
    fn default() -> PrstdbgByHl {
        <crate::RegValueT<PrstdbgByHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PrstdbgByHh_SPEC;
impl crate::sealed::RegSpec for PrstdbgByHh_SPEC {
    type DataType = u8;
}
#[doc = "Present State Debug Register"]
pub type PrstdbgByHh = crate::RegValueT<PrstdbgByHh_SPEC>;

impl PrstdbgByHh {
    #[doc = "These bits are read as 0000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, PrstdbgByHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<4,0xf,1,0,u8, PrstdbgByHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PrstdbgByHh {
    #[inline(always)]
    fn default() -> PrstdbgByHh {
        <crate::RegValueT<PrstdbgByHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Mserrcnt_SPEC;
impl crate::sealed::RegSpec for Mserrcnt_SPEC {
    type DataType = u32;
}
#[doc = "Master Error Counters Register"]
pub type Mserrcnt = crate::RegValueT<Mserrcnt_SPEC>;

impl Mserrcnt {
    #[doc = "M2 Error CounterCounts I3C Type M2 errors on the I3C Bus.Cleared upon Read out."]
    #[inline(always)]
    pub fn m2ecnt(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Mserrcnt_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Mserrcnt_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "This bit is read as 0."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Mserrcnt_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<31, 1, 0, Mserrcnt_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Mserrcnt {
    #[inline(always)]
    fn default() -> Mserrcnt {
        <crate::RegValueT<Mserrcnt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct MserrcntHaL_SPEC;
impl crate::sealed::RegSpec for MserrcntHaL_SPEC {
    type DataType = u16;
}
#[doc = "Master Error Counters Register"]
pub type MserrcntHaL = crate::RegValueT<MserrcntHaL_SPEC>;

impl MserrcntHaL {
    #[doc = "M2 Error CounterCounts I3C Type M2 errors on the I3C Bus.Cleared upon Read out."]
    #[inline(always)]
    pub fn m2ecnt(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, MserrcntHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, MserrcntHaL_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 00000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, MserrcntHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8, MserrcntHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for MserrcntHaL {
    #[inline(always)]
    fn default() -> MserrcntHaL {
        <crate::RegValueT<MserrcntHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct MserrcntByLl_SPEC;
impl crate::sealed::RegSpec for MserrcntByLl_SPEC {
    type DataType = u8;
}
#[doc = "Master Error Counters Register"]
pub type MserrcntByLl = crate::RegValueT<MserrcntByLl_SPEC>;

impl MserrcntByLl {
    #[doc = "M2 Error CounterCounts I3C Type M2 errors on the I3C Bus.Cleared upon Read out."]
    #[inline(always)]
    pub fn m2ecnt(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, MserrcntByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, MserrcntByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for MserrcntByLl {
    #[inline(always)]
    fn default() -> MserrcntByLl {
        <crate::RegValueT<MserrcntByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sc1Cpt_SPEC;
impl crate::sealed::RegSpec for Sc1Cpt_SPEC {
    type DataType = u32;
}
#[doc = "SC1 Capture monitor Register"]
pub type Sc1Cpt = crate::RegValueT<Sc1Cpt_SPEC>;

impl Sc1Cpt {
    #[doc = "SC1 Capture"]
    #[inline(always)]
    pub fn sc1c(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Sc1Cpt_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Sc1Cpt_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Sc1Cpt_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Sc1Cpt_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sc1Cpt {
    #[inline(always)]
    fn default() -> Sc1Cpt {
        <crate::RegValueT<Sc1Cpt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sc1CptHaL_SPEC;
impl crate::sealed::RegSpec for Sc1CptHaL_SPEC {
    type DataType = u16;
}
#[doc = "SC1 Capture monitor Register"]
pub type Sc1CptHaL = crate::RegValueT<Sc1CptHaL_SPEC>;

impl Sc1CptHaL {
    #[doc = "SC1 Capture"]
    #[inline(always)]
    pub fn sc1c(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Sc1CptHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Sc1CptHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sc1CptHaL {
    #[inline(always)]
    fn default() -> Sc1CptHaL {
        <crate::RegValueT<Sc1CptHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sc1CptByLl_SPEC;
impl crate::sealed::RegSpec for Sc1CptByLl_SPEC {
    type DataType = u8;
}
#[doc = "SC1 Capture monitor Register"]
pub type Sc1CptByLl = crate::RegValueT<Sc1CptByLl_SPEC>;

impl Sc1CptByLl {
    #[doc = "SC1 Capture"]
    #[inline(always)]
    pub fn sc1c(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Sc1CptByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Sc1CptByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sc1CptByLl {
    #[inline(always)]
    fn default() -> Sc1CptByLl {
        <crate::RegValueT<Sc1CptByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sc1CptByLh_SPEC;
impl crate::sealed::RegSpec for Sc1CptByLh_SPEC {
    type DataType = u8;
}
#[doc = "SC1 Capture monitor Register"]
pub type Sc1CptByLh = crate::RegValueT<Sc1CptByLh_SPEC>;

impl Sc1CptByLh {
    #[doc = "SC1 Capture"]
    #[inline(always)]
    pub fn sc1c(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Sc1CptByLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Sc1CptByLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sc1CptByLh {
    #[inline(always)]
    fn default() -> Sc1CptByLh {
        <crate::RegValueT<Sc1CptByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sc2Cpt_SPEC;
impl crate::sealed::RegSpec for Sc2Cpt_SPEC {
    type DataType = u32;
}
#[doc = "SC2 Capture monitor Register"]
pub type Sc2Cpt = crate::RegValueT<Sc2Cpt_SPEC>;

impl Sc2Cpt {
    #[doc = "SC2 Capture"]
    #[inline(always)]
    pub fn sc2c(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Sc2Cpt_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Sc2Cpt_SPEC,crate::common::R>::from_register(self,0)
    }
    #[doc = "These bits are read as 0000000000000000."]
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, Sc2Cpt_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xffff,1,0,u16, Sc2Cpt_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sc2Cpt {
    #[inline(always)]
    fn default() -> Sc2Cpt {
        <crate::RegValueT<Sc2Cpt_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sc2CptHaL_SPEC;
impl crate::sealed::RegSpec for Sc2CptHaL_SPEC {
    type DataType = u16;
}
#[doc = "SC2 Capture monitor Register"]
pub type Sc2CptHaL = crate::RegValueT<Sc2CptHaL_SPEC>;

impl Sc2CptHaL {
    #[doc = "SC2 Capture"]
    #[inline(always)]
    pub fn sc2c(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, Sc2CptHaL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xffff,1,0,u16, Sc2CptHaL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sc2CptHaL {
    #[inline(always)]
    fn default() -> Sc2CptHaL {
        <crate::RegValueT<Sc2CptHaL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sc2CptByLl_SPEC;
impl crate::sealed::RegSpec for Sc2CptByLl_SPEC {
    type DataType = u8;
}
#[doc = "SC2 Capture monitor Register"]
pub type Sc2CptByLl = crate::RegValueT<Sc2CptByLl_SPEC>;

impl Sc2CptByLl {
    #[doc = "SC2 Capture"]
    #[inline(always)]
    pub fn sc2c(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Sc2CptByLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Sc2CptByLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sc2CptByLl {
    #[inline(always)]
    fn default() -> Sc2CptByLl {
        <crate::RegValueT<Sc2CptByLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sc2CptByLh_SPEC;
impl crate::sealed::RegSpec for Sc2CptByLh_SPEC {
    type DataType = u8;
}
#[doc = "SC2 Capture monitor Register"]
pub type Sc2CptByLh = crate::RegValueT<Sc2CptByLh_SPEC>;

impl Sc2CptByLh {
    #[doc = "SC2 Capture"]
    #[inline(always)]
    pub fn sc2c(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, Sc2CptByLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8, Sc2CptByLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sc2CptByLh {
    #[inline(always)]
    fn default() -> Sc2CptByLh {
        <crate::RegValueT<Sc2CptByLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
