/*
DISCLAIMER
This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products.
No other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
applicable laws, including copyright laws.
THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING THIS SOFTWARE, WHETHER EXPRESS, IMPLIED
OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED NOT PROHIBITED BY
LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE FOR ANY DIRECT,
INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, EVEN IF RENESAS OR
ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability
of this software. By using this software, you agree to the additional terms and conditions found by accessing the
following link:
http://www.renesas.com/disclaimer

*/
// Generated from SVD 1.2, with svd2pac 0.5.0 on Mon, 14 Apr 2025 11:23:25 +0000

#![allow(clippy::identity_op)]
#![allow(clippy::module_inception)]
#![allow(clippy::derivable_impls)]
#[allow(unused_imports)]
use crate::common::sealed;
#[allow(unused_imports)]
use crate::common::*;
#[doc = r"DSI Link"]
unsafe impl ::core::marker::Send for super::Dsilink {}
unsafe impl ::core::marker::Sync for super::Dsilink {}
impl super::Dsilink {
    #[allow(unused)]
    #[inline(always)]
    pub(crate) const fn _svd2pac_as_ptr(&self) -> *mut u8 {
        self.ptr
    }

    #[inline(always)]
    pub const fn isr(&self) -> &'static crate::common::Reg<self::Isr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Isr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(0usize),
            )
        }
    }

    #[inline(always)]
    pub const fn isr_l(&self) -> &'static crate::common::Reg<self::IsrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::IsrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(0usize),
            )
        }
    }

    #[inline(always)]
    pub const fn isr_ll(&self) -> &'static crate::common::Reg<self::IsrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::IsrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(0usize),
            )
        }
    }

    #[inline(always)]
    pub const fn isr_lh(&self) -> &'static crate::common::Reg<self::IsrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::IsrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1usize),
            )
        }
    }

    #[inline(always)]
    pub const fn isr_h(&self) -> &'static crate::common::Reg<self::IsrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::IsrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(2usize),
            )
        }
    }

    #[inline(always)]
    pub const fn isr_hl(&self) -> &'static crate::common::Reg<self::IsrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::IsrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(2usize),
            )
        }
    }

    #[inline(always)]
    pub const fn isr_hh(&self) -> &'static crate::common::Reg<self::IsrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::IsrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(3usize),
            )
        }
    }

    #[inline(always)]
    pub const fn linksr_l(
        &self,
    ) -> &'static crate::common::Reg<self::LinksrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::LinksrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(16usize),
            )
        }
    }

    #[inline(always)]
    pub const fn linksr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::LinksrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::LinksrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(16usize),
            )
        }
    }

    #[inline(always)]
    pub const fn linksr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::LinksrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::LinksrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(17usize),
            )
        }
    }

    #[inline(always)]
    pub const fn linksr_h(
        &self,
    ) -> &'static crate::common::Reg<self::LinksrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::LinksrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(18usize),
            )
        }
    }

    #[inline(always)]
    pub const fn linksr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::LinksrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::LinksrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(18usize),
            )
        }
    }

    #[inline(always)]
    pub const fn linksr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::LinksrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::LinksrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(19usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txsetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::TxsetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::TxsetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(256usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txsetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::TxsetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::TxsetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(256usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txsetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::TxsetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::TxsetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(257usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txsetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::TxsetrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::TxsetrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(258usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txsetr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::TxsetrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::TxsetrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(258usize),
            )
        }
    }

    #[inline(always)]
    pub const fn hsclksetr(
        &self,
    ) -> &'static crate::common::Reg<self::Hsclksetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Hsclksetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(260usize),
            )
        }
    }

    #[inline(always)]
    pub const fn hsclksetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::HsclksetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HsclksetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(260usize),
            )
        }
    }

    #[inline(always)]
    pub const fn hsclksetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::HsclksetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::HsclksetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(260usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ulpssetr(
        &self,
    ) -> &'static crate::common::Reg<self::Ulpssetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ulpssetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(264usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ulpssetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::UlpssetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::UlpssetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(264usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ulpssetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::UlpssetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::UlpssetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(264usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ulpscr(&self) -> &'static crate::common::Reg<self::Ulpscr_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Ulpscr_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(268usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ulpscr_h(
        &self,
    ) -> &'static crate::common::Reg<self::UlpscrH_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::UlpscrH_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(270usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ulpscr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::UlpscrHh_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::UlpscrHh_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(271usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstcr(&self) -> &'static crate::common::Reg<self::Rstcr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Rstcr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(272usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstcr_l(
        &self,
    ) -> &'static crate::common::Reg<self::RstcrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstcrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(272usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstcr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RstcrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstcrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(272usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstcr_h(
        &self,
    ) -> &'static crate::common::Reg<self::RstcrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstcrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(274usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstcr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::RstcrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstcrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(274usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstcr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::RstcrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RstcrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(275usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstsr(&self) -> &'static crate::common::Reg<self::Rstsr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rstsr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(276usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstsr_l(
        &self,
    ) -> &'static crate::common::Reg<self::RstsrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RstsrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(276usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstsr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RstsrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RstsrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(276usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rstsr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::RstsrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RstsrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(277usize),
            )
        }
    }

    #[inline(always)]
    pub const fn dsisetr(
        &self,
    ) -> &'static crate::common::Reg<self::Dsisetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Dsisetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(288usize),
            )
        }
    }

    #[inline(always)]
    pub const fn dsisetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::DsisetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::DsisetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(288usize),
            )
        }
    }

    #[inline(always)]
    pub const fn dsisetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::DsisetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::DsisetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(288usize),
            )
        }
    }

    #[inline(always)]
    pub const fn dsisetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::DsisetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::DsisetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(289usize),
            )
        }
    }

    #[inline(always)]
    pub const fn dsisetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::DsisetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::DsisetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(290usize),
            )
        }
    }

    #[inline(always)]
    pub const fn dsisetr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::DsisetrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::DsisetrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(290usize),
            )
        }
    }

    #[inline(always)]
    pub const fn dsisetr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::DsisetrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::DsisetrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(291usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd0r(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd0R_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd0R_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(352usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd0r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd0RL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd0RL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(352usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd0r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd0RLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd0RLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(352usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd0r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd0RLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd0RLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(353usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd0r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd0RH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd0RH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(354usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd0r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd0RHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd0RHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(354usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd0r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd0RHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd0RHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(355usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd1r(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd1R_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd1R_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(356usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd1r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd1RL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd1RL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(356usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd1r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd1RLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd1RLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(356usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd1r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd1RLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd1RLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(357usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd1r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd1RH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd1RH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(358usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd1r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd1RHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd1RHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(358usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd1r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd1RHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd1RHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(359usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd2r(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd2R_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd2R_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(360usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd2r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd2RL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd2RL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(360usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd2r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd2RLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd2RLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(360usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd2r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd2RLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd2RLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(361usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd2r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd2RH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd2RH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(362usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd2r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd2RHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd2RHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(362usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd2r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd2RHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd2RHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(363usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd3r(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd3R_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd3R_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(364usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd3r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd3RL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd3RL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(364usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd3r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd3RLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd3RLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(364usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd3r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd3RLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd3RLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(365usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd3r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd3RH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd3RH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(366usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd3r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd3RHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd3RHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(366usize),
            )
        }
    }

    #[inline(always)]
    pub const fn txppd3r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Txppd3RHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Txppd3RHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(367usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxsr(&self) -> &'static crate::common::Reg<self::Rxsr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxsr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(512usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxsr_l(&self) -> &'static crate::common::Reg<self::RxsrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxsrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(512usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxsr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RxsrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxsrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(512usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxsr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::RxsrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxsrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(513usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxsr_h(&self) -> &'static crate::common::Reg<self::RxsrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxsrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(514usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxsr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::RxsrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxsrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(514usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxsr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::RxsrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxsrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(515usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxscr(&self) -> &'static crate::common::Reg<self::Rxscr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Rxscr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(516usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxscr_l(
        &self,
    ) -> &'static crate::common::Reg<self::RxscrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxscrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(516usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxscr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RxscrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxscrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(516usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxscr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::RxscrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxscrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(517usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxscr_h(
        &self,
    ) -> &'static crate::common::Reg<self::RxscrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxscrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(518usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxscr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::RxscrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxscrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(518usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxscr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::RxscrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxscrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(519usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxier(&self) -> &'static crate::common::Reg<self::Rxier_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Rxier_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(520usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxier_l(
        &self,
    ) -> &'static crate::common::Reg<self::RxierL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxierL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(520usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxier_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RxierLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxierLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(520usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxier_lh(
        &self,
    ) -> &'static crate::common::Reg<self::RxierLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxierLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(521usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxier_h(
        &self,
    ) -> &'static crate::common::Reg<self::RxierH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxierH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(522usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxier_hl(
        &self,
    ) -> &'static crate::common::Reg<self::RxierHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxierHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(522usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxier_hh(
        &self,
    ) -> &'static crate::common::Reg<self::RxierHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxierHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(523usize),
            )
        }
    }

    #[inline(always)]
    pub const fn presptobtasetr(
        &self,
    ) -> &'static crate::common::Reg<self::Presptobtasetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Presptobtasetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(528usize),
            )
        }
    }

    #[inline(always)]
    pub const fn presptolpsetr(
        &self,
    ) -> &'static crate::common::Reg<self::Presptolpsetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Presptolpsetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(532usize),
            )
        }
    }

    #[inline(always)]
    pub const fn presptolpsetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::PresptolpsetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PresptolpsetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(532usize),
            )
        }
    }

    #[inline(always)]
    pub const fn presptolpsetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::PresptolpsetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PresptolpsetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(534usize),
            )
        }
    }

    #[inline(always)]
    pub const fn presptohssetr(
        &self,
    ) -> &'static crate::common::Reg<self::Presptohssetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Presptohssetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(536usize),
            )
        }
    }

    #[inline(always)]
    pub const fn presptohssetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::PresptohssetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PresptohssetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(536usize),
            )
        }
    }

    #[inline(always)]
    pub const fn presptohssetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::PresptohssetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PresptohssetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(538usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akeplatir(
        &self,
    ) -> &'static crate::common::Reg<self::Akeplatir_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Akeplatir_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(544usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akeplatir_l(
        &self,
    ) -> &'static crate::common::Reg<self::AkeplatirL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkeplatirL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(544usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akeplatir_ll(
        &self,
    ) -> &'static crate::common::Reg<self::AkeplatirLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkeplatirLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(544usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akeplatir_lh(
        &self,
    ) -> &'static crate::common::Reg<self::AkeplatirLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkeplatirLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(545usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akeplatir_h(
        &self,
    ) -> &'static crate::common::Reg<self::AkeplatirH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkeplatirH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(546usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akeplatir_hl(
        &self,
    ) -> &'static crate::common::Reg<self::AkeplatirHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkeplatirHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(546usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepacmsr(
        &self,
    ) -> &'static crate::common::Reg<self::Akepacmsr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Akepacmsr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(548usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepacmsr_l(
        &self,
    ) -> &'static crate::common::Reg<self::AkepacmsrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkepacmsrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(548usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepacmsr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::AkepacmsrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkepacmsrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(548usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepacmsr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::AkepacmsrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkepacmsrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(549usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepacmsr_h(
        &self,
    ) -> &'static crate::common::Reg<self::AkepacmsrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkepacmsrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(550usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepacmsr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::AkepacmsrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::AkepacmsrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(550usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepscr(
        &self,
    ) -> &'static crate::common::Reg<self::Akepscr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Akepscr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(552usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepscr_l(
        &self,
    ) -> &'static crate::common::Reg<self::AkepscrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AkepscrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(552usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepscr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::AkepscrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AkepscrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(552usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepscr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::AkepscrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AkepscrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(553usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepscr_h(
        &self,
    ) -> &'static crate::common::Reg<self::AkepscrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AkepscrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(554usize),
            )
        }
    }

    #[inline(always)]
    pub const fn akepscr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::AkepscrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::AkepscrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(554usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrsscr(
        &self,
    ) -> &'static crate::common::Reg<self::Rxrsscr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Rxrsscr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(564usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrsscr_l(
        &self,
    ) -> &'static crate::common::Reg<self::RxrsscrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxrsscrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(564usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrsscr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RxrsscrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxrsscrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(564usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrsscr_h(
        &self,
    ) -> &'static crate::common::Reg<self::RxrsscrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxrsscrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(566usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrsscr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::RxrsscrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxrsscrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(567usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowsr(
        &self,
    ) -> &'static crate::common::Reg<self::Rxrinfoowsr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxrinfoowsr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(568usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowsr_l(
        &self,
    ) -> &'static crate::common::Reg<self::RxrinfoowsrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxrinfoowsrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(568usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowsr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RxrinfoowsrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxrinfoowsrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(568usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowsr_h(
        &self,
    ) -> &'static crate::common::Reg<self::RxrinfoowsrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxrinfoowsrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(570usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowsr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::RxrinfoowsrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::RxrinfoowsrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(571usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowscr(
        &self,
    ) -> &'static crate::common::Reg<self::Rxrinfoowscr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Rxrinfoowscr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(572usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowscr_l(
        &self,
    ) -> &'static crate::common::Reg<self::RxrinfoowscrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxrinfoowscrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(572usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowscr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::RxrinfoowscrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxrinfoowscrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(572usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowscr_h(
        &self,
    ) -> &'static crate::common::Reg<self::RxrinfoowscrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxrinfoowscrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(574usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrinfoowscr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::RxrinfoowscrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::RxrinfoowscrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(575usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxrssr(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Rxrssr_SPEC, crate::common::R>,
        4,
        0x4,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x240usize))
        }
    }

    #[inline(always)]
    pub const fn rxrssr_l(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::RxrssrL_SPEC, crate::common::R>,
        4,
        0x4,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x240usize))
        }
    }

    #[inline(always)]
    pub const fn rxrssr_ll(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::RxrssrLl_SPEC, crate::common::R>,
        4,
        0x4,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x240usize))
        }
    }

    #[inline(always)]
    pub const fn rxrssr_lh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::RxrssrLh_SPEC, crate::common::R>,
        4,
        0x4,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x241usize))
        }
    }

    #[inline(always)]
    pub const fn rxrssr_h(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::RxrssrH_SPEC, crate::common::R>,
        4,
        0x4,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x242usize))
        }
    }

    #[inline(always)]
    pub const fn rxrssr_hl(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::RxrssrHl_SPEC, crate::common::R>,
        4,
        0x4,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x242usize))
        }
    }

    #[inline(always)]
    pub const fn rxrssr_hh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::RxrssrHh_SPEC, crate::common::R>,
        4,
        0x4,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x243usize))
        }
    }

    #[inline(always)]
    pub const fn rxppd0r(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd0R_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd0R_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(704usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd0r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd0RL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd0RL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(704usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd0r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd0RLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd0RLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(704usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd0r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd0RLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd0RLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(705usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd0r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd0RH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd0RH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(706usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd0r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd0RHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd0RHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(706usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd0r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd0RHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd0RHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(707usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd1r(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd1R_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd1R_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(708usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd1r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd1RL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd1RL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(708usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd1r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd1RLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd1RLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(708usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd1r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd1RLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd1RLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(709usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd1r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd1RH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd1RH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(710usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd1r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd1RHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd1RHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(710usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd1r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd1RHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd1RHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(711usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd2r(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd2R_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd2R_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(712usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd2r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd2RL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd2RL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(712usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd2r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd2RLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd2RLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(712usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd2r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd2RLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd2RLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(713usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd2r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd2RH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd2RH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(714usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd2r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd2RHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd2RHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(714usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd2r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd2RHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd2RHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(715usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd3r(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd3R_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd3R_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(716usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd3r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd3RL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd3RL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(716usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd3r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd3RLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd3RLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(716usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd3r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd3RLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd3RLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(717usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd3r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd3RH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd3RH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(718usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd3r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd3RHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd3RHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(718usize),
            )
        }
    }

    #[inline(always)]
    pub const fn rxppd3r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Rxppd3RHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Rxppd3RHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(719usize),
            )
        }
    }

    #[inline(always)]
    pub const fn hstxtosetr(
        &self,
    ) -> &'static crate::common::Reg<self::Hstxtosetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Hstxtosetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(736usize),
            )
        }
    }

    #[inline(always)]
    pub const fn lrxhtosetr(
        &self,
    ) -> &'static crate::common::Reg<self::Lrxhtosetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Lrxhtosetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(740usize),
            )
        }
    }

    #[inline(always)]
    pub const fn tatosetr(
        &self,
    ) -> &'static crate::common::Reg<self::Tatosetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Tatosetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(744usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrsr(&self) -> &'static crate::common::Reg<self::Ferrsr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Ferrsr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(768usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrsr_l(
        &self,
    ) -> &'static crate::common::Reg<self::FerrsrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::FerrsrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(768usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrsr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::FerrsrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::FerrsrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(768usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrsr_h(
        &self,
    ) -> &'static crate::common::Reg<self::FerrsrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::FerrsrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(770usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrsr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::FerrsrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::FerrsrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(770usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrsr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::FerrsrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::FerrsrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(771usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrscr(
        &self,
    ) -> &'static crate::common::Reg<self::Ferrscr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ferrscr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(772usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrscr_l(
        &self,
    ) -> &'static crate::common::Reg<self::FerrscrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::FerrscrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(772usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrscr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::FerrscrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::FerrscrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(772usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrscr_h(
        &self,
    ) -> &'static crate::common::Reg<self::FerrscrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::FerrscrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(774usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrscr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::FerrscrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::FerrscrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(774usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrier(
        &self,
    ) -> &'static crate::common::Reg<self::Ferrier_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Ferrier_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(776usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrier_l(
        &self,
    ) -> &'static crate::common::Reg<self::FerrierL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::FerrierL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(776usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrier_ll(
        &self,
    ) -> &'static crate::common::Reg<self::FerrierLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::FerrierLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(776usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrier_h(
        &self,
    ) -> &'static crate::common::Reg<self::FerrierH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::FerrierH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(778usize),
            )
        }
    }

    #[inline(always)]
    pub const fn ferrier_hl(
        &self,
    ) -> &'static crate::common::Reg<self::FerrierHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::FerrierHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(778usize),
            )
        }
    }

    #[inline(always)]
    pub const fn clstptsetr(
        &self,
    ) -> &'static crate::common::Reg<self::Clstptsetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Clstptsetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(788usize),
            )
        }
    }

    #[inline(always)]
    pub const fn clstptsetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::ClstptsetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ClstptsetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(788usize),
            )
        }
    }

    #[inline(always)]
    pub const fn clstptsetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::ClstptsetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ClstptsetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(788usize),
            )
        }
    }

    #[inline(always)]
    pub const fn clstptsetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::ClstptsetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ClstptsetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(789usize),
            )
        }
    }

    #[inline(always)]
    pub const fn clstptsetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::ClstptsetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ClstptsetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(790usize),
            )
        }
    }

    #[inline(always)]
    pub const fn clstptsetr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::ClstptsetrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ClstptsetrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(790usize),
            )
        }
    }

    #[inline(always)]
    pub const fn clstptsetr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::ClstptsetrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::ClstptsetrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(791usize),
            )
        }
    }

    #[inline(always)]
    pub const fn lptrnstsetr(
        &self,
    ) -> &'static crate::common::Reg<self::Lptrnstsetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Lptrnstsetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(792usize),
            )
        }
    }

    #[inline(always)]
    pub const fn lptrnstsetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::LptrnstsetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::LptrnstsetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(792usize),
            )
        }
    }

    #[inline(always)]
    pub const fn lptrnstsetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::LptrnstsetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::LptrnstsetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(792usize),
            )
        }
    }

    #[inline(always)]
    pub const fn lptrnstsetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::LptrnstsetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::LptrnstsetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(793usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plsr(&self) -> &'static crate::common::Reg<self::Plsr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Plsr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(800usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plsr_l(&self) -> &'static crate::common::Reg<self::PlsrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PlsrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(800usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plsr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::PlsrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PlsrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(800usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plsr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::PlsrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PlsrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(801usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plsr_h(&self) -> &'static crate::common::Reg<self::PlsrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PlsrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(802usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plsr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::PlsrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::PlsrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(803usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plscr(&self) -> &'static crate::common::Reg<self::Plscr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Plscr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(804usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plscr_l(
        &self,
    ) -> &'static crate::common::Reg<self::PlscrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PlscrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(804usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plscr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::PlscrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PlscrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(805usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plscr_h(
        &self,
    ) -> &'static crate::common::Reg<self::PlscrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PlscrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(806usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plscr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::PlscrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PlscrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(807usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plier(&self) -> &'static crate::common::Reg<self::Plier_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Plier_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(808usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plier_l(
        &self,
    ) -> &'static crate::common::Reg<self::PlierL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PlierL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(808usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plier_lh(
        &self,
    ) -> &'static crate::common::Reg<self::PlierLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PlierLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(809usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plier_h(
        &self,
    ) -> &'static crate::common::Reg<self::PlierH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PlierH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(810usize),
            )
        }
    }

    #[inline(always)]
    pub const fn plier_hh(
        &self,
    ) -> &'static crate::common::Reg<self::PlierHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::PlierHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(811usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmset0r(
        &self,
    ) -> &'static crate::common::Reg<self::Vmset0R_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmset0R_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1024usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmset0r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Vmset0RL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmset0RL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1024usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmset0r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Vmset0RLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmset0RLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1024usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmset0r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Vmset0RLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmset0RLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1025usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmset1r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Vmset1RL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmset1RL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1028usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmset1r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Vmset1RH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Vmset1RH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1030usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmsr(&self) -> &'static crate::common::Reg<self::Vmsr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Vmsr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1040usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmsr_l(&self) -> &'static crate::common::Reg<self::VmsrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::VmsrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1040usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmsr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::VmsrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::VmsrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1040usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmsr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::VmsrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::VmsrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1041usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmsr_h(&self) -> &'static crate::common::Reg<self::VmsrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::VmsrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1042usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmsr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::VmsrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::VmsrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1042usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmsr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::VmsrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::VmsrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1043usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmscr(&self) -> &'static crate::common::Reg<self::Vmscr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmscr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1044usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmscr_l(
        &self,
    ) -> &'static crate::common::Reg<self::VmscrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmscrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1044usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmscr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::VmscrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmscrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1044usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmscr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::VmscrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmscrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1045usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmscr_h(
        &self,
    ) -> &'static crate::common::Reg<self::VmscrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmscrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1046usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmscr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::VmscrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmscrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1046usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmscr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::VmscrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmscrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1047usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmier(&self) -> &'static crate::common::Reg<self::Vmier_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmier_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1048usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmier_l(
        &self,
    ) -> &'static crate::common::Reg<self::VmierL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmierL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1048usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmier_ll(
        &self,
    ) -> &'static crate::common::Reg<self::VmierLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmierLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1048usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmier_lh(
        &self,
    ) -> &'static crate::common::Reg<self::VmierLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmierLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1049usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmier_h(
        &self,
    ) -> &'static crate::common::Reg<self::VmierH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmierH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1050usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmier_hl(
        &self,
    ) -> &'static crate::common::Reg<self::VmierHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmierHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1050usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmier_hh(
        &self,
    ) -> &'static crate::common::Reg<self::VmierHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmierHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1051usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmppsetr(
        &self,
    ) -> &'static crate::common::Reg<self::Vmppsetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmppsetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1056usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmppsetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::VmppsetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmppsetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1056usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmppsetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::VmppsetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmppsetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1056usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmppsetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::VmppsetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmppsetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1057usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmppsetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::VmppsetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmppsetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1058usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmppsetr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::VmppsetrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmppsetrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1058usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvssetr(
        &self,
    ) -> &'static crate::common::Reg<self::Vmvssetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmvssetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1064usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvssetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::VmvssetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvssetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1064usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvssetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::VmvssetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvssetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1064usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvssetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::VmvssetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvssetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1065usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvssetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::VmvssetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvssetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1066usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvssetr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::VmvssetrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvssetrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1066usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvssetr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::VmvssetrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvssetrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1067usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvpsetr(
        &self,
    ) -> &'static crate::common::Reg<self::Vmvpsetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmvpsetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1068usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvpsetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::VmvpsetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvpsetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1068usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvpsetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::VmvpsetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvpsetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1068usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvpsetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::VmvpsetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvpsetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1069usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvpsetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::VmvpsetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvpsetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1070usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvpsetr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::VmvpsetrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvpsetrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1070usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmvpsetr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::VmvpsetrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmvpsetrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1071usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhssetr(
        &self,
    ) -> &'static crate::common::Reg<self::Vmhssetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmhssetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1072usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhssetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::VmhssetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhssetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1072usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhssetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::VmhssetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhssetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1072usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhssetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::VmhssetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhssetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1073usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhssetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::VmhssetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhssetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1074usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhssetr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::VmhssetrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhssetrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1074usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhssetr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::VmhssetrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhssetrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1075usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhpsetr(
        &self,
    ) -> &'static crate::common::Reg<self::Vmhpsetr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Vmhpsetr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1076usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhpsetr_l(
        &self,
    ) -> &'static crate::common::Reg<self::VmhpsetrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhpsetrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1076usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhpsetr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::VmhpsetrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhpsetrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1076usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhpsetr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::VmhpsetrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhpsetrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1077usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhpsetr_h(
        &self,
    ) -> &'static crate::common::Reg<self::VmhpsetrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhpsetrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1078usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhpsetr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::VmhpsetrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhpsetrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1078usize),
            )
        }
    }

    #[inline(always)]
    pub const fn vmhpsetr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::VmhpsetrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::VmhpsetrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1079usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0set0r(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Set0R_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0Set0R_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1472usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0set0r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Set0RL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0Set0RL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1472usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0set0r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Set0RLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0Set0RLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1472usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0set0r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Set0RLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0Set0RLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1473usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0set0r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Set0RH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0Set0RH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1474usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0set0r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Set0RHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0Set0RHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1474usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0set0r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Set0RHh_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Sqch0Set0RHh_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(1475usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0sr(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Sr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch0Sr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1488usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0sr_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0SrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch0SrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1488usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0sr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0SrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch0SrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1488usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0sr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0SrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch0SrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1489usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0sr_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0SrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch0SrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1490usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0sr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0SrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch0SrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1490usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0sr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0SrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch0SrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1491usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0scr(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Scr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0Scr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1492usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0scr_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0ScrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0ScrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1492usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0scr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0ScrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0ScrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1492usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0scr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0ScrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0ScrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1493usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0scr_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0ScrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0ScrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1494usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0scr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0ScrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0ScrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1494usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0scr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0ScrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0ScrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1495usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0ier(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0Ier_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0Ier_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1496usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0ier_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0IerL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0IerL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1496usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0ier_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0IerLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0IerLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1496usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0ier_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0IerLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0IerLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1497usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0ier_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0IerH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0IerH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1498usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0ier_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0IerHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0IerHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1498usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0ier_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch0IerHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch0IerHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1499usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1set0r(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Set0R_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1Set0R_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1536usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1set0r_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Set0RL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1Set0RL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1536usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1set0r_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Set0RLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1Set0RLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1536usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1set0r_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Set0RLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1Set0RLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1537usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1set0r_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Set0RH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1Set0RH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1538usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1set0r_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Set0RHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1Set0RHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1538usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1set0r_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Set0RHh_SPEC, crate::common::W> {
        unsafe {
            crate::common::Reg::<self::Sqch1Set0RHh_SPEC, crate::common::W>::from_ptr(
                self._svd2pac_as_ptr().add(1539usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1sr(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Sr_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch1Sr_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1552usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1sr_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1SrL_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch1SrL_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1552usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1sr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1SrLl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch1SrLl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1552usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1sr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1SrLh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch1SrLh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1553usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1sr_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1SrH_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch1SrH_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1554usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1sr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1SrHl_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch1SrHl_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1554usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1sr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1SrHh_SPEC, crate::common::R> {
        unsafe {
            crate::common::Reg::<self::Sqch1SrHh_SPEC, crate::common::R>::from_ptr(
                self._svd2pac_as_ptr().add(1555usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1scr(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Scr_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1Scr_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1556usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1scr_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1ScrL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1ScrL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1556usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1scr_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1ScrLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1ScrLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1556usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1scr_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1ScrLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1ScrLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1557usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1scr_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1ScrH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1ScrH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1558usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1scr_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1ScrHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1ScrHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1558usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1scr_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1ScrHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1ScrHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1559usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1ier(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1Ier_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1Ier_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1560usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1ier_l(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1IerL_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1IerL_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1560usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1ier_ll(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1IerLl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1IerLl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1560usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1ier_lh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1IerLh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1IerLh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1561usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1ier_h(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1IerH_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1IerH_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1562usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1ier_hl(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1IerHl_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1IerHl_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1562usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch1ier_hh(
        &self,
    ) -> &'static crate::common::Reg<self::Sqch1IerHh_SPEC, crate::common::RW> {
        unsafe {
            crate::common::Reg::<self::Sqch1IerHh_SPEC, crate::common::RW>::from_ptr(
                self._svd2pac_as_ptr().add(1563usize),
            )
        }
    }

    #[inline(always)]
    pub const fn sqch0dscar(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0Dscar_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x780usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscar_l(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscarL_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x780usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscar_ll(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscarLl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x780usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscar_lh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscarLh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x781usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscar_h(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscarH_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x782usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscar_hl(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscarHl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x782usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscar_hh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscarHh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x783usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscbr(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0Dscbr_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x784usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dsccr(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0Dsccr_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x788usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dsccr_l(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DsccrL_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x788usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dsccr_ll(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DsccrLl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x788usize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dsccr_h(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DsccrH_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78ausize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dsccr_hl(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DsccrHl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78ausize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dsccr_hh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DsccrHh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78busize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscdr(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0Dscdr_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78cusize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscdr_l(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscdrL_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78cusize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscdr_ll(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscdrLl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78cusize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscdr_lh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscdrLh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78dusize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscdr_h(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscdrH_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78eusize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscdr_hl(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscdrHl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78eusize))
        }
    }

    #[inline(always)]
    pub const fn sqch0dscdr_hh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch0DscdrHh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x78fusize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscar(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1Dscar_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x800usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscar_l(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscarL_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x800usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscar_ll(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscarLl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x800usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscar_lh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscarLh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x801usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscar_h(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscarH_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x802usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscar_hl(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscarHl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x802usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscar_hh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscarHh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x803usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscbr(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1Dscbr_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x804usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dsccr(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1Dsccr_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x808usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dsccr_l(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DsccrL_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x808usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dsccr_ll(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DsccrLl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x808usize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dsccr_h(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DsccrH_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80ausize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dsccr_hl(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DsccrHl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80ausize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dsccr_hh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DsccrHh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80busize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscdr(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1Dscdr_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80cusize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscdr_l(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscdrL_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80cusize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscdr_ll(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscdrLl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80cusize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscdr_lh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscdrLh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80dusize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscdr_h(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscdrH_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80eusize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscdr_hl(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscdrHl_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80eusize))
        }
    }

    #[inline(always)]
    pub const fn sqch1dscdr_hh(
        &self,
    ) -> &'static crate::common::ClusterRegisterArray<
        crate::common::Reg<self::Sqch1DscdrHh_SPEC, crate::common::RW>,
        8,
        0x10,
    > {
        unsafe {
            crate::common::ClusterRegisterArray::from_ptr(self._svd2pac_as_ptr().add(0x80fusize))
        }
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Isr_SPEC;
impl crate::sealed::RegSpec for Isr_SPEC {
    type DataType = u32;
}

pub type Isr = crate::RegValueT<Isr_SPEC>;

impl Isr {
    #[inline(always)]
    pub fn sq0(
        self,
    ) -> crate::common::RegisterField<0, 0x1, 1, 0, isr::Sq0, isr::Sq0, Isr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0x1,1,0,isr::Sq0,isr::Sq0,Isr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn sq1(
        self,
    ) -> crate::common::RegisterField<4, 0x1, 1, 0, isr::Sq1, isr::Sq1, Isr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<4,0x1,1,0,isr::Sq1,isr::Sq1,Isr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vm(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, isr::Vm, isr::Vm, Isr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<8,0x1,1,0,isr::Vm,isr::Vm,Isr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn rcv(
        self,
    ) -> crate::common::RegisterField<12, 0x1, 1, 0, isr::Rcv, isr::Rcv, Isr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<12,0x1,1,0,isr::Rcv,isr::Rcv,Isr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn ferr(
        self,
    ) -> crate::common::RegisterField<16, 0x1, 1, 0, isr::Ferr, isr::Ferr, Isr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            isr::Ferr,
            isr::Ferr,
            Isr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ppi(
        self,
    ) -> crate::common::RegisterField<20, 0x1, 1, 0, isr::Ppi, isr::Ppi, Isr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<20,0x1,1,0,isr::Ppi,isr::Ppi,Isr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<29, 0x7, 1, 0, u8, u8, Isr_SPEC, crate::common::R> {
        crate::common::RegisterField::<29,0x7,1,0,u8,u8,Isr_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Isr {
    #[inline(always)]
    fn default() -> Isr {
        <crate::RegValueT<Isr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod isr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq0_SPEC;
    pub type Sq0 = crate::EnumBitfieldStruct<u8, Sq0_SPEC>;
    impl Sq0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq1_SPEC;
    pub type Sq1 = crate::EnumBitfieldStruct<u8, Sq1_SPEC>;
    impl Sq1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vm_SPEC;
    pub type Vm = crate::EnumBitfieldStruct<u8, Vm_SPEC>;
    impl Vm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rcv_SPEC;
    pub type Rcv = crate::EnumBitfieldStruct<u8, Rcv_SPEC>;
    impl Rcv {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ferr_SPEC;
    pub type Ferr = crate::EnumBitfieldStruct<u8, Ferr_SPEC>;
    impl Ferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ppi_SPEC;
    pub type Ppi = crate::EnumBitfieldStruct<u8, Ppi_SPEC>;
    impl Ppi {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IsrL_SPEC;
impl crate::sealed::RegSpec for IsrL_SPEC {
    type DataType = u16;
}

pub type IsrL = crate::RegValueT<IsrL_SPEC>;

impl IsrL {
    #[inline(always)]
    pub fn sq0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        isr_l::Sq0,
        isr_l::Sq0,
        IsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            isr_l::Sq0,
            isr_l::Sq0,
            IsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sq1(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        isr_l::Sq1,
        isr_l::Sq1,
        IsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            isr_l::Sq1,
            isr_l::Sq1,
            IsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vm(
        self,
    ) -> crate::common::RegisterField<8, 0x1, 1, 0, isr_l::Vm, isr_l::Vm, IsrL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            isr_l::Vm,
            isr_l::Vm,
            IsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rcv(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        isr_l::Rcv,
        isr_l::Rcv,
        IsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            isr_l::Rcv,
            isr_l::Rcv,
            IsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, u8, IsrL_SPEC, crate::common::R> {
        crate::common::RegisterField::<13,0x7,1,0,u8,u8,IsrL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for IsrL {
    #[inline(always)]
    fn default() -> IsrL {
        <crate::RegValueT<IsrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod isr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq0_SPEC;
    pub type Sq0 = crate::EnumBitfieldStruct<u8, Sq0_SPEC>;
    impl Sq0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq1_SPEC;
    pub type Sq1 = crate::EnumBitfieldStruct<u8, Sq1_SPEC>;
    impl Sq1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vm_SPEC;
    pub type Vm = crate::EnumBitfieldStruct<u8, Vm_SPEC>;
    impl Vm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rcv_SPEC;
    pub type Rcv = crate::EnumBitfieldStruct<u8, Rcv_SPEC>;
    impl Rcv {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IsrLl_SPEC;
impl crate::sealed::RegSpec for IsrLl_SPEC {
    type DataType = u8;
}

pub type IsrLl = crate::RegValueT<IsrLl_SPEC>;

impl IsrLl {
    #[inline(always)]
    pub fn sq0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        isr_ll::Sq0,
        isr_ll::Sq0,
        IsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            isr_ll::Sq0,
            isr_ll::Sq0,
            IsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sq1(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        isr_ll::Sq1,
        isr_ll::Sq1,
        IsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            isr_ll::Sq1,
            isr_ll::Sq1,
            IsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, IsrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,IsrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for IsrLl {
    #[inline(always)]
    fn default() -> IsrLl {
        <crate::RegValueT<IsrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod isr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq0_SPEC;
    pub type Sq0 = crate::EnumBitfieldStruct<u8, Sq0_SPEC>;
    impl Sq0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq1_SPEC;
    pub type Sq1 = crate::EnumBitfieldStruct<u8, Sq1_SPEC>;
    impl Sq1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IsrLh_SPEC;
impl crate::sealed::RegSpec for IsrLh_SPEC {
    type DataType = u8;
}

pub type IsrLh = crate::RegValueT<IsrLh_SPEC>;

impl IsrLh {
    #[inline(always)]
    pub fn vm(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        isr_lh::Vm,
        isr_lh::Vm,
        IsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            isr_lh::Vm,
            isr_lh::Vm,
            IsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rcv(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        isr_lh::Rcv,
        isr_lh::Rcv,
        IsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            isr_lh::Rcv,
            isr_lh::Rcv,
            IsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, IsrLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,IsrLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for IsrLh {
    #[inline(always)]
    fn default() -> IsrLh {
        <crate::RegValueT<IsrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod isr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vm_SPEC;
    pub type Vm = crate::EnumBitfieldStruct<u8, Vm_SPEC>;
    impl Vm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rcv_SPEC;
    pub type Rcv = crate::EnumBitfieldStruct<u8, Rcv_SPEC>;
    impl Rcv {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IsrH_SPEC;
impl crate::sealed::RegSpec for IsrH_SPEC {
    type DataType = u16;
}

pub type IsrH = crate::RegValueT<IsrH_SPEC>;

impl IsrH {
    #[inline(always)]
    pub fn ferr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        isr_h::Ferr,
        isr_h::Ferr,
        IsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            isr_h::Ferr,
            isr_h::Ferr,
            IsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ppi(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        isr_h::Ppi,
        isr_h::Ppi,
        IsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            isr_h::Ppi,
            isr_h::Ppi,
            IsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, u8, IsrH_SPEC, crate::common::R> {
        crate::common::RegisterField::<13,0x7,1,0,u8,u8,IsrH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for IsrH {
    #[inline(always)]
    fn default() -> IsrH {
        <crate::RegValueT<IsrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod isr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ferr_SPEC;
    pub type Ferr = crate::EnumBitfieldStruct<u8, Ferr_SPEC>;
    impl Ferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ppi_SPEC;
    pub type Ppi = crate::EnumBitfieldStruct<u8, Ppi_SPEC>;
    impl Ppi {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IsrHl_SPEC;
impl crate::sealed::RegSpec for IsrHl_SPEC {
    type DataType = u8;
}

pub type IsrHl = crate::RegValueT<IsrHl_SPEC>;

impl IsrHl {
    #[inline(always)]
    pub fn ferr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        isr_hl::Ferr,
        isr_hl::Ferr,
        IsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            isr_hl::Ferr,
            isr_hl::Ferr,
            IsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ppi(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        isr_hl::Ppi,
        isr_hl::Ppi,
        IsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            isr_hl::Ppi,
            isr_hl::Ppi,
            IsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, IsrHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,IsrHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for IsrHl {
    #[inline(always)]
    fn default() -> IsrHl {
        <crate::RegValueT<IsrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod isr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ferr_SPEC;
    pub type Ferr = crate::EnumBitfieldStruct<u8, Ferr_SPEC>;
    impl Ferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ppi_SPEC;
    pub type Ppi = crate::EnumBitfieldStruct<u8, Ppi_SPEC>;
    impl Ppi {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct IsrHh_SPEC;
impl crate::sealed::RegSpec for IsrHh_SPEC {
    type DataType = u8;
}

pub type IsrHh = crate::RegValueT<IsrHh_SPEC>;

impl IsrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, IsrHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,IsrHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for IsrHh {
    #[inline(always)]
    fn default() -> IsrHh {
        <crate::RegValueT<IsrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LinksrL_SPEC;
impl crate::sealed::RegSpec for LinksrL_SPEC {
    type DataType = u16;
}

pub type LinksrL = crate::RegValueT<LinksrL_SPEC>;

impl LinksrL {
    #[inline(always)]
    pub fn sq0run(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        linksr_l::Sq0Run,
        linksr_l::Sq0Run,
        LinksrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            linksr_l::Sq0Run,
            linksr_l::Sq0Run,
            LinksrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sq1run(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        linksr_l::Sq1Run,
        linksr_l::Sq1Run,
        LinksrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            linksr_l::Sq1Run,
            linksr_l::Sq1Run,
            LinksrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vrun(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        linksr_l::Vrun,
        linksr_l::Vrun,
        LinksrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            linksr_l::Vrun,
            linksr_l::Vrun,
            LinksrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hsbusy(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        linksr_l::Hsbusy,
        linksr_l::Hsbusy,
        LinksrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            linksr_l::Hsbusy,
            linksr_l::Hsbusy,
            LinksrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lpbusy(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        linksr_l::Lpbusy,
        linksr_l::Lpbusy,
        LinksrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            linksr_l::Lpbusy,
            linksr_l::Lpbusy,
            LinksrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, LinksrL_SPEC, crate::common::R> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,LinksrL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for LinksrL {
    #[inline(always)]
    fn default() -> LinksrL {
        <crate::RegValueT<LinksrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod linksr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq0Run_SPEC;
    pub type Sq0Run = crate::EnumBitfieldStruct<u8, Sq0Run_SPEC>;
    impl Sq0Run {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq1Run_SPEC;
    pub type Sq1Run = crate::EnumBitfieldStruct<u8, Sq1Run_SPEC>;
    impl Sq1Run {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vrun_SPEC;
    pub type Vrun = crate::EnumBitfieldStruct<u8, Vrun_SPEC>;
    impl Vrun {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsbusy_SPEC;
    pub type Hsbusy = crate::EnumBitfieldStruct<u8, Hsbusy_SPEC>;
    impl Hsbusy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lpbusy_SPEC;
    pub type Lpbusy = crate::EnumBitfieldStruct<u8, Lpbusy_SPEC>;
    impl Lpbusy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LinksrLl_SPEC;
impl crate::sealed::RegSpec for LinksrLl_SPEC {
    type DataType = u8;
}

pub type LinksrLl = crate::RegValueT<LinksrLl_SPEC>;

impl LinksrLl {
    #[inline(always)]
    pub fn sq0run(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        linksr_ll::Sq0Run,
        linksr_ll::Sq0Run,
        LinksrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            linksr_ll::Sq0Run,
            linksr_ll::Sq0Run,
            LinksrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sq1run(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        linksr_ll::Sq1Run,
        linksr_ll::Sq1Run,
        LinksrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            linksr_ll::Sq1Run,
            linksr_ll::Sq1Run,
            LinksrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, LinksrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,LinksrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for LinksrLl {
    #[inline(always)]
    fn default() -> LinksrLl {
        <crate::RegValueT<LinksrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod linksr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq0Run_SPEC;
    pub type Sq0Run = crate::EnumBitfieldStruct<u8, Sq0Run_SPEC>;
    impl Sq0Run {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sq1Run_SPEC;
    pub type Sq1Run = crate::EnumBitfieldStruct<u8, Sq1Run_SPEC>;
    impl Sq1Run {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LinksrLh_SPEC;
impl crate::sealed::RegSpec for LinksrLh_SPEC {
    type DataType = u8;
}

pub type LinksrLh = crate::RegValueT<LinksrLh_SPEC>;

impl LinksrLh {
    #[inline(always)]
    pub fn vrun(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        linksr_lh::Vrun,
        linksr_lh::Vrun,
        LinksrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            linksr_lh::Vrun,
            linksr_lh::Vrun,
            LinksrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hsbusy(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        linksr_lh::Hsbusy,
        linksr_lh::Hsbusy,
        LinksrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            linksr_lh::Hsbusy,
            linksr_lh::Hsbusy,
            LinksrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lpbusy(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        linksr_lh::Lpbusy,
        linksr_lh::Lpbusy,
        LinksrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            linksr_lh::Lpbusy,
            linksr_lh::Lpbusy,
            LinksrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, LinksrLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,LinksrLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for LinksrLh {
    #[inline(always)]
    fn default() -> LinksrLh {
        <crate::RegValueT<LinksrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod linksr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vrun_SPEC;
    pub type Vrun = crate::EnumBitfieldStruct<u8, Vrun_SPEC>;
    impl Vrun {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsbusy_SPEC;
    pub type Hsbusy = crate::EnumBitfieldStruct<u8, Hsbusy_SPEC>;
    impl Hsbusy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lpbusy_SPEC;
    pub type Lpbusy = crate::EnumBitfieldStruct<u8, Lpbusy_SPEC>;
    impl Lpbusy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LinksrH_SPEC;
impl crate::sealed::RegSpec for LinksrH_SPEC {
    type DataType = u16;
}

pub type LinksrH = crate::RegValueT<LinksrH_SPEC>;

impl LinksrH {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, u8, LinksrH_SPEC, crate::common::R> {
        crate::common::RegisterField::<13,0x7,1,0,u8,u8,LinksrH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for LinksrH {
    #[inline(always)]
    fn default() -> LinksrH {
        <crate::RegValueT<LinksrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LinksrHl_SPEC;
impl crate::sealed::RegSpec for LinksrHl_SPEC {
    type DataType = u8;
}

pub type LinksrHl = crate::RegValueT<LinksrHl_SPEC>;

impl LinksrHl {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, LinksrHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,LinksrHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for LinksrHl {
    #[inline(always)]
    fn default() -> LinksrHl {
        <crate::RegValueT<LinksrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LinksrHh_SPEC;
impl crate::sealed::RegSpec for LinksrHh_SPEC {
    type DataType = u8;
}

pub type LinksrHh = crate::RegValueT<LinksrHh_SPEC>;

impl LinksrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, LinksrHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,LinksrHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for LinksrHh {
    #[inline(always)]
    fn default() -> LinksrHh {
        <crate::RegValueT<LinksrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TxsetrL_SPEC;
impl crate::sealed::RegSpec for TxsetrL_SPEC {
    type DataType = u16;
}

pub type TxsetrL = crate::RegValueT<TxsetrL_SPEC>;

impl TxsetrL {
    #[inline(always)]
    pub fn numlane(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x3,
        1,
        0,
        txsetr_l::Numlane,
        txsetr_l::Numlane,
        TxsetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x3,
            1,
            0,
            txsetr_l::Numlane,
            txsetr_l::Numlane,
            TxsetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clen(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        txsetr_l::Clen,
        txsetr_l::Clen,
        TxsetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            txsetr_l::Clen,
            txsetr_l::Clen,
            TxsetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlen(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        txsetr_l::Dlen,
        txsetr_l::Dlen,
        TxsetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            txsetr_l::Dlen,
            txsetr_l::Dlen,
            TxsetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, u8, TxsetrL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<10,0x3f,1,0,u8,u8,TxsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for TxsetrL {
    #[inline(always)]
    fn default() -> TxsetrL {
        <crate::RegValueT<TxsetrL_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod txsetr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Numlane_SPEC;
    pub type Numlane = crate::EnumBitfieldStruct<u8, Numlane_SPEC>;
    impl Numlane {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clen_SPEC;
    pub type Clen = crate::EnumBitfieldStruct<u8, Clen_SPEC>;
    impl Clen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlen_SPEC;
    pub type Dlen = crate::EnumBitfieldStruct<u8, Dlen_SPEC>;
    impl Dlen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TxsetrLl_SPEC;
impl crate::sealed::RegSpec for TxsetrLl_SPEC {
    type DataType = u8;
}

pub type TxsetrLl = crate::RegValueT<TxsetrLl_SPEC>;

impl TxsetrLl {
    #[inline(always)]
    pub fn numlane(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x3,
        1,
        0,
        txsetr_ll::Numlane,
        txsetr_ll::Numlane,
        TxsetrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x3,
            1,
            0,
            txsetr_ll::Numlane,
            txsetr_ll::Numlane,
            TxsetrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, u8, TxsetrLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8,u8,TxsetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for TxsetrLl {
    #[inline(always)]
    fn default() -> TxsetrLl {
        <crate::RegValueT<TxsetrLl_SPEC> as RegisterValue<_>>::new(1)
    }
}
pub mod txsetr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Numlane_SPEC;
    pub type Numlane = crate::EnumBitfieldStruct<u8, Numlane_SPEC>;
    impl Numlane {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TxsetrLh_SPEC;
impl crate::sealed::RegSpec for TxsetrLh_SPEC {
    type DataType = u8;
}

pub type TxsetrLh = crate::RegValueT<TxsetrLh_SPEC>;

impl TxsetrLh {
    #[inline(always)]
    pub fn clen(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        txsetr_lh::Clen,
        txsetr_lh::Clen,
        TxsetrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            txsetr_lh::Clen,
            txsetr_lh::Clen,
            TxsetrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlen(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        txsetr_lh::Dlen,
        txsetr_lh::Dlen,
        TxsetrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            txsetr_lh::Dlen,
            txsetr_lh::Dlen,
            TxsetrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, u8, TxsetrLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<2,0x3f,1,0,u8,u8,TxsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for TxsetrLh {
    #[inline(always)]
    fn default() -> TxsetrLh {
        <crate::RegValueT<TxsetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod txsetr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clen_SPEC;
    pub type Clen = crate::EnumBitfieldStruct<u8, Clen_SPEC>;
    impl Clen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlen_SPEC;
    pub type Dlen = crate::EnumBitfieldStruct<u8, Dlen_SPEC>;
    impl Dlen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TxsetrH_SPEC;
impl crate::sealed::RegSpec for TxsetrH_SPEC {
    type DataType = u16;
}

pub type TxsetrH = crate::RegValueT<TxsetrH_SPEC>;

impl TxsetrH {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3fff, 1, 0, u16, u16, TxsetrH_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<2,0x3fff,1,0,u16,u16,TxsetrH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for TxsetrH {
    #[inline(always)]
    fn default() -> TxsetrH {
        <crate::RegValueT<TxsetrH_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct TxsetrHl_SPEC;
impl crate::sealed::RegSpec for TxsetrHl_SPEC {
    type DataType = u8;
}

pub type TxsetrHl = crate::RegValueT<TxsetrHl_SPEC>;

impl TxsetrHl {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, u8, TxsetrHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<2,0x3f,1,0,u8,u8,TxsetrHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for TxsetrHl {
    #[inline(always)]
    fn default() -> TxsetrHl {
        <crate::RegValueT<TxsetrHl_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Hsclksetr_SPEC;
impl crate::sealed::RegSpec for Hsclksetr_SPEC {
    type DataType = u32;
}

pub type Hsclksetr = crate::RegValueT<Hsclksetr_SPEC>;

impl Hsclksetr {
    #[inline(always)]
    pub fn hsclst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        hsclksetr::Hsclst,
        hsclksetr::Hsclst,
        Hsclksetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            hsclksetr::Hsclst,
            hsclksetr::Hsclst,
            Hsclksetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hsclmd(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        hsclksetr::Hsclmd,
        hsclksetr::Hsclmd,
        Hsclksetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            hsclksetr::Hsclmd,
            hsclksetr::Hsclmd,
            Hsclksetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x3fffffff,
        1,
        0,
        u32,
        u32,
        Hsclksetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x3fffffff,
            1,
            0,
            u32,
            u32,
            Hsclksetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Hsclksetr {
    #[inline(always)]
    fn default() -> Hsclksetr {
        <crate::RegValueT<Hsclksetr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod hsclksetr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsclst_SPEC;
    pub type Hsclst = crate::EnumBitfieldStruct<u8, Hsclst_SPEC>;
    impl Hsclst {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsclmd_SPEC;
    pub type Hsclmd = crate::EnumBitfieldStruct<u8, Hsclmd_SPEC>;
    impl Hsclmd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HsclksetrL_SPEC;
impl crate::sealed::RegSpec for HsclksetrL_SPEC {
    type DataType = u16;
}

pub type HsclksetrL = crate::RegValueT<HsclksetrL_SPEC>;

impl HsclksetrL {
    #[inline(always)]
    pub fn hsclst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        hsclksetr_l::Hsclst,
        hsclksetr_l::Hsclst,
        HsclksetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            hsclksetr_l::Hsclst,
            hsclksetr_l::Hsclst,
            HsclksetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hsclmd(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        hsclksetr_l::Hsclmd,
        hsclksetr_l::Hsclmd,
        HsclksetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            hsclksetr_l::Hsclmd,
            hsclksetr_l::Hsclmd,
            HsclksetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3fff, 1, 0, u16, u16, HsclksetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3fff,1,0,u16,u16,HsclksetrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HsclksetrL {
    #[inline(always)]
    fn default() -> HsclksetrL {
        <crate::RegValueT<HsclksetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod hsclksetr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsclst_SPEC;
    pub type Hsclst = crate::EnumBitfieldStruct<u8, Hsclst_SPEC>;
    impl Hsclst {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsclmd_SPEC;
    pub type Hsclmd = crate::EnumBitfieldStruct<u8, Hsclmd_SPEC>;
    impl Hsclmd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct HsclksetrLl_SPEC;
impl crate::sealed::RegSpec for HsclksetrLl_SPEC {
    type DataType = u8;
}

pub type HsclksetrLl = crate::RegValueT<HsclksetrLl_SPEC>;

impl HsclksetrLl {
    #[inline(always)]
    pub fn hsclst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        hsclksetr_ll::Hsclst,
        hsclksetr_ll::Hsclst,
        HsclksetrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            hsclksetr_ll::Hsclst,
            hsclksetr_ll::Hsclst,
            HsclksetrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hsclmd(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        hsclksetr_ll::Hsclmd,
        hsclksetr_ll::Hsclmd,
        HsclksetrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            hsclksetr_ll::Hsclmd,
            hsclksetr_ll::Hsclmd,
            HsclksetrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, u8, HsclksetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3f,1,0,u8,u8,HsclksetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for HsclksetrLl {
    #[inline(always)]
    fn default() -> HsclksetrLl {
        <crate::RegValueT<HsclksetrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod hsclksetr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsclst_SPEC;
    pub type Hsclst = crate::EnumBitfieldStruct<u8, Hsclst_SPEC>;
    impl Hsclst {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsclmd_SPEC;
    pub type Hsclmd = crate::EnumBitfieldStruct<u8, Hsclmd_SPEC>;
    impl Hsclmd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ulpssetr_SPEC;
impl crate::sealed::RegSpec for Ulpssetr_SPEC {
    type DataType = u32;
}

pub type Ulpssetr = crate::RegValueT<Ulpssetr_SPEC>;

impl Ulpssetr {
    #[inline(always)]
    pub fn wkup(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Ulpssetr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Ulpssetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xffffff, 1, 0, u32, u32, Ulpssetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xffffff,1,0,u32,u32,Ulpssetr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ulpssetr {
    #[inline(always)]
    fn default() -> Ulpssetr {
        <crate::RegValueT<Ulpssetr_SPEC> as RegisterValue<_>>::new(160)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct UlpssetrL_SPEC;
impl crate::sealed::RegSpec for UlpssetrL_SPEC {
    type DataType = u16;
}

pub type UlpssetrL = crate::RegValueT<UlpssetrL_SPEC>;

impl UlpssetrL {
    #[inline(always)]
    pub fn wkup(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, UlpssetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,UlpssetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, UlpssetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,UlpssetrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for UlpssetrL {
    #[inline(always)]
    fn default() -> UlpssetrL {
        <crate::RegValueT<UlpssetrL_SPEC> as RegisterValue<_>>::new(160)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct UlpssetrLl_SPEC;
impl crate::sealed::RegSpec for UlpssetrLl_SPEC {
    type DataType = u8;
}

pub type UlpssetrLl = crate::RegValueT<UlpssetrLl_SPEC>;

impl UlpssetrLl {
    #[inline(always)]
    pub fn wkup(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, UlpssetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,UlpssetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for UlpssetrLl {
    #[inline(always)]
    fn default() -> UlpssetrLl {
        <crate::RegValueT<UlpssetrLl_SPEC> as RegisterValue<_>>::new(160)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ulpscr_SPEC;
impl crate::sealed::RegSpec for Ulpscr_SPEC {
    type DataType = u32;
}

pub type Ulpscr = crate::RegValueT<Ulpscr_SPEC>;

impl Ulpscr {
    #[inline(always)]
    pub fn clent(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        ulpscr::Clent,
        ulpscr::Clent,
        Ulpscr_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            ulpscr::Clent,
            ulpscr::Clent,
            Ulpscr_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clexit(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        ulpscr::Clexit,
        ulpscr::Clexit,
        Ulpscr_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            ulpscr::Clexit,
            ulpscr::Clexit,
            Ulpscr_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlent(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        ulpscr::Dlent,
        ulpscr::Dlent,
        Ulpscr_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            ulpscr::Dlent,
            ulpscr::Dlent,
            Ulpscr_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlexit(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        ulpscr::Dlexit,
        ulpscr::Dlexit,
        Ulpscr_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            ulpscr::Dlexit,
            ulpscr::Dlexit,
            Ulpscr_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, u8, Ulpscr_SPEC, crate::common::W> {
        crate::common::RegisterField::<30,0x3,1,0,u8,u8,Ulpscr_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Ulpscr {
    #[inline(always)]
    fn default() -> Ulpscr {
        <crate::RegValueT<Ulpscr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ulpscr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clent_SPEC;
    pub type Clent = crate::EnumBitfieldStruct<u8, Clent_SPEC>;
    impl Clent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clexit_SPEC;
    pub type Clexit = crate::EnumBitfieldStruct<u8, Clexit_SPEC>;
    impl Clexit {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlent_SPEC;
    pub type Dlent = crate::EnumBitfieldStruct<u8, Dlent_SPEC>;
    impl Dlent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlexit_SPEC;
    pub type Dlexit = crate::EnumBitfieldStruct<u8, Dlexit_SPEC>;
    impl Dlexit {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct UlpscrH_SPEC;
impl crate::sealed::RegSpec for UlpscrH_SPEC {
    type DataType = u16;
}

pub type UlpscrH = crate::RegValueT<UlpscrH_SPEC>;

impl UlpscrH {
    #[inline(always)]
    pub fn clent(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        ulpscr_h::Clent,
        ulpscr_h::Clent,
        UlpscrH_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            ulpscr_h::Clent,
            ulpscr_h::Clent,
            UlpscrH_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clexit(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        ulpscr_h::Clexit,
        ulpscr_h::Clexit,
        UlpscrH_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            ulpscr_h::Clexit,
            ulpscr_h::Clexit,
            UlpscrH_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlent(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        ulpscr_h::Dlent,
        ulpscr_h::Dlent,
        UlpscrH_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            ulpscr_h::Dlent,
            ulpscr_h::Dlent,
            UlpscrH_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlexit(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        ulpscr_h::Dlexit,
        ulpscr_h::Dlexit,
        UlpscrH_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            ulpscr_h::Dlexit,
            ulpscr_h::Dlexit,
            UlpscrH_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, UlpscrH_SPEC, crate::common::W> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,UlpscrH_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for UlpscrH {
    #[inline(always)]
    fn default() -> UlpscrH {
        <crate::RegValueT<UlpscrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ulpscr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clent_SPEC;
    pub type Clent = crate::EnumBitfieldStruct<u8, Clent_SPEC>;
    impl Clent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clexit_SPEC;
    pub type Clexit = crate::EnumBitfieldStruct<u8, Clexit_SPEC>;
    impl Clexit {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlent_SPEC;
    pub type Dlent = crate::EnumBitfieldStruct<u8, Dlent_SPEC>;
    impl Dlent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlexit_SPEC;
    pub type Dlexit = crate::EnumBitfieldStruct<u8, Dlexit_SPEC>;
    impl Dlexit {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct UlpscrHh_SPEC;
impl crate::sealed::RegSpec for UlpscrHh_SPEC {
    type DataType = u8;
}

pub type UlpscrHh = crate::RegValueT<UlpscrHh_SPEC>;

impl UlpscrHh {
    #[inline(always)]
    pub fn clent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ulpscr_hh::Clent,
        ulpscr_hh::Clent,
        UlpscrHh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ulpscr_hh::Clent,
            ulpscr_hh::Clent,
            UlpscrHh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clexit(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ulpscr_hh::Clexit,
        ulpscr_hh::Clexit,
        UlpscrHh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ulpscr_hh::Clexit,
            ulpscr_hh::Clexit,
            UlpscrHh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlent(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ulpscr_hh::Dlent,
        ulpscr_hh::Dlent,
        UlpscrHh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ulpscr_hh::Dlent,
            ulpscr_hh::Dlent,
            UlpscrHh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlexit(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        ulpscr_hh::Dlexit,
        ulpscr_hh::Dlexit,
        UlpscrHh_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            ulpscr_hh::Dlexit,
            ulpscr_hh::Dlexit,
            UlpscrHh_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, UlpscrHh_SPEC, crate::common::W> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,UlpscrHh_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for UlpscrHh {
    #[inline(always)]
    fn default() -> UlpscrHh {
        <crate::RegValueT<UlpscrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ulpscr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clent_SPEC;
    pub type Clent = crate::EnumBitfieldStruct<u8, Clent_SPEC>;
    impl Clent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clexit_SPEC;
    pub type Clexit = crate::EnumBitfieldStruct<u8, Clexit_SPEC>;
    impl Clexit {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlent_SPEC;
    pub type Dlent = crate::EnumBitfieldStruct<u8, Dlent_SPEC>;
    impl Dlent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlexit_SPEC;
    pub type Dlexit = crate::EnumBitfieldStruct<u8, Dlexit_SPEC>;
    impl Dlexit {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rstcr_SPEC;
impl crate::sealed::RegSpec for Rstcr_SPEC {
    type DataType = u32;
}

pub type Rstcr = crate::RegValueT<Rstcr_SPEC>;

impl Rstcr {
    #[inline(always)]
    pub fn swrst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstcr::Swrst,
        rstcr::Swrst,
        Rstcr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstcr::Swrst,
            rstcr::Swrst,
            Rstcr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ftxstp(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        rstcr::Ftxstp,
        rstcr::Ftxstp,
        Rstcr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            rstcr::Ftxstp,
            rstcr::Ftxstp,
            Rstcr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<25, 0x7f, 1, 0, u8, u8, Rstcr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<25,0x7f,1,0,u8,u8,Rstcr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Rstcr {
    #[inline(always)]
    fn default() -> Rstcr {
        <crate::RegValueT<Rstcr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstcr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Swrst_SPEC;
    pub type Swrst = crate::EnumBitfieldStruct<u8, Swrst_SPEC>;
    impl Swrst {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ftxstp_SPEC;
    pub type Ftxstp = crate::EnumBitfieldStruct<u8, Ftxstp_SPEC>;
    impl Ftxstp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstcrL_SPEC;
impl crate::sealed::RegSpec for RstcrL_SPEC {
    type DataType = u16;
}

pub type RstcrL = crate::RegValueT<RstcrL_SPEC>;

impl RstcrL {
    #[inline(always)]
    pub fn swrst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstcr_l::Swrst,
        rstcr_l::Swrst,
        RstcrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstcr_l::Swrst,
            rstcr_l::Swrst,
            RstcrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7fff, 1, 0, u16, u16, RstcrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x7fff,1,0,u16,u16,RstcrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstcrL {
    #[inline(always)]
    fn default() -> RstcrL {
        <crate::RegValueT<RstcrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstcr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Swrst_SPEC;
    pub type Swrst = crate::EnumBitfieldStruct<u8, Swrst_SPEC>;
    impl Swrst {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstcrLl_SPEC;
impl crate::sealed::RegSpec for RstcrLl_SPEC {
    type DataType = u8;
}

pub type RstcrLl = crate::RegValueT<RstcrLl_SPEC>;

impl RstcrLl {
    #[inline(always)]
    pub fn swrst(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstcr_ll::Swrst,
        rstcr_ll::Swrst,
        RstcrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstcr_ll::Swrst,
            rstcr_ll::Swrst,
            RstcrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, u8, RstcrLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8,u8,RstcrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstcrLl {
    #[inline(always)]
    fn default() -> RstcrLl {
        <crate::RegValueT<RstcrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstcr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Swrst_SPEC;
    pub type Swrst = crate::EnumBitfieldStruct<u8, Swrst_SPEC>;
    impl Swrst {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstcrH_SPEC;
impl crate::sealed::RegSpec for RstcrH_SPEC {
    type DataType = u16;
}

pub type RstcrH = crate::RegValueT<RstcrH_SPEC>;

impl RstcrH {
    #[inline(always)]
    pub fn ftxstp(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstcr_h::Ftxstp,
        rstcr_h::Ftxstp,
        RstcrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstcr_h::Ftxstp,
            rstcr_h::Ftxstp,
            RstcrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, u8, RstcrH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8,u8,RstcrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstcrH {
    #[inline(always)]
    fn default() -> RstcrH {
        <crate::RegValueT<RstcrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstcr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ftxstp_SPEC;
    pub type Ftxstp = crate::EnumBitfieldStruct<u8, Ftxstp_SPEC>;
    impl Ftxstp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstcrHl_SPEC;
impl crate::sealed::RegSpec for RstcrHl_SPEC {
    type DataType = u8;
}

pub type RstcrHl = crate::RegValueT<RstcrHl_SPEC>;

impl RstcrHl {
    #[inline(always)]
    pub fn ftxstp(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstcr_hl::Ftxstp,
        rstcr_hl::Ftxstp,
        RstcrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstcr_hl::Ftxstp,
            rstcr_hl::Ftxstp,
            RstcrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, u8, RstcrHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8,u8,RstcrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstcrHl {
    #[inline(always)]
    fn default() -> RstcrHl {
        <crate::RegValueT<RstcrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstcr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ftxstp_SPEC;
    pub type Ftxstp = crate::EnumBitfieldStruct<u8, Ftxstp_SPEC>;
    impl Ftxstp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstcrHh_SPEC;
impl crate::sealed::RegSpec for RstcrHh_SPEC {
    type DataType = u8;
}

pub type RstcrHh = crate::RegValueT<RstcrHh_SPEC>;

impl RstcrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, u8, RstcrHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7f,1,0,u8,u8,RstcrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RstcrHh {
    #[inline(always)]
    fn default() -> RstcrHh {
        <crate::RegValueT<RstcrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rstsr_SPEC;
impl crate::sealed::RegSpec for Rstsr_SPEC {
    type DataType = u32;
}

pub type Rstsr = crate::RegValueT<Rstsr_SPEC>;

impl Rstsr {
    #[inline(always)]
    pub fn rsths(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstsr::Rsths,
        rstsr::Rsths,
        Rstsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstsr::Rsths,
            rstsr::Rsths,
            Rstsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstlp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rstsr::Rstlp,
        rstsr::Rstlp,
        Rstsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rstsr::Rstlp,
            rstsr::Rstlp,
            Rstsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstapb(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rstsr::Rstapb,
        rstsr::Rstapb,
        Rstsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rstsr::Rstapb,
            rstsr::Rstapb,
            Rstsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstaxi(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rstsr::Rstaxi,
        rstsr::Rstaxi,
        Rstsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rstsr::Rstaxi,
            rstsr::Rstaxi,
            Rstsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstv(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rstsr::Rstv,
        rstsr::Rstv,
        Rstsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rstsr::Rstv,
            rstsr::Rstv,
            Rstsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0stp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rstsr::Dl0Stp,
        rstsr::Dl0Stp,
        Rstsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rstsr::Dl0Stp,
            rstsr::Dl0Stp,
            Rstsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1stp(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        rstsr::Dl1Stp,
        rstsr::Dl1Stp,
        Rstsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            rstsr::Dl1Stp,
            rstsr::Dl1Stp,
            Rstsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0dir(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rstsr::Dl0Dir,
        rstsr::Dl0Dir,
        Rstsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rstsr::Dl0Dir,
            rstsr::Dl0Dir,
            Rstsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<16, 0xffff, 1, 0, u16, u16, Rstsr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<16,0xffff,1,0,u16,u16,Rstsr_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rstsr {
    #[inline(always)]
    fn default() -> Rstsr {
        <crate::RegValueT<Rstsr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstsr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsths_SPEC;
    pub type Rsths = crate::EnumBitfieldStruct<u8, Rsths_SPEC>;
    impl Rsths {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstlp_SPEC;
    pub type Rstlp = crate::EnumBitfieldStruct<u8, Rstlp_SPEC>;
    impl Rstlp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstapb_SPEC;
    pub type Rstapb = crate::EnumBitfieldStruct<u8, Rstapb_SPEC>;
    impl Rstapb {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstaxi_SPEC;
    pub type Rstaxi = crate::EnumBitfieldStruct<u8, Rstaxi_SPEC>;
    impl Rstaxi {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstv_SPEC;
    pub type Rstv = crate::EnumBitfieldStruct<u8, Rstv_SPEC>;
    impl Rstv {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Stp_SPEC;
    pub type Dl0Stp = crate::EnumBitfieldStruct<u8, Dl0Stp_SPEC>;
    impl Dl0Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Stp_SPEC;
    pub type Dl1Stp = crate::EnumBitfieldStruct<u8, Dl1Stp_SPEC>;
    impl Dl1Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Dir_SPEC;
    pub type Dl0Dir = crate::EnumBitfieldStruct<u8, Dl0Dir_SPEC>;
    impl Dl0Dir {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstsrL_SPEC;
impl crate::sealed::RegSpec for RstsrL_SPEC {
    type DataType = u16;
}

pub type RstsrL = crate::RegValueT<RstsrL_SPEC>;

impl RstsrL {
    #[inline(always)]
    pub fn rsths(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstsr_l::Rsths,
        rstsr_l::Rsths,
        RstsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstsr_l::Rsths,
            rstsr_l::Rsths,
            RstsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstlp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rstsr_l::Rstlp,
        rstsr_l::Rstlp,
        RstsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rstsr_l::Rstlp,
            rstsr_l::Rstlp,
            RstsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstapb(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rstsr_l::Rstapb,
        rstsr_l::Rstapb,
        RstsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rstsr_l::Rstapb,
            rstsr_l::Rstapb,
            RstsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstaxi(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rstsr_l::Rstaxi,
        rstsr_l::Rstaxi,
        RstsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rstsr_l::Rstaxi,
            rstsr_l::Rstaxi,
            RstsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstv(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rstsr_l::Rstv,
        rstsr_l::Rstv,
        RstsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rstsr_l::Rstv,
            rstsr_l::Rstv,
            RstsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0stp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rstsr_l::Dl0Stp,
        rstsr_l::Dl0Stp,
        RstsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rstsr_l::Dl0Stp,
            rstsr_l::Dl0Stp,
            RstsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1stp(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        rstsr_l::Dl1Stp,
        rstsr_l::Dl1Stp,
        RstsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            rstsr_l::Dl1Stp,
            rstsr_l::Dl1Stp,
            RstsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x1f, 1, 0, u8, u8, RstsrL_SPEC, crate::common::R> {
        crate::common::RegisterField::<10,0x1f,1,0,u8,u8,RstsrL_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn dl0dir(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rstsr_l::Dl0Dir,
        rstsr_l::Dl0Dir,
        RstsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rstsr_l::Dl0Dir,
            rstsr_l::Dl0Dir,
            RstsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RstsrL {
    #[inline(always)]
    fn default() -> RstsrL {
        <crate::RegValueT<RstsrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstsr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsths_SPEC;
    pub type Rsths = crate::EnumBitfieldStruct<u8, Rsths_SPEC>;
    impl Rsths {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstlp_SPEC;
    pub type Rstlp = crate::EnumBitfieldStruct<u8, Rstlp_SPEC>;
    impl Rstlp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstapb_SPEC;
    pub type Rstapb = crate::EnumBitfieldStruct<u8, Rstapb_SPEC>;
    impl Rstapb {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstaxi_SPEC;
    pub type Rstaxi = crate::EnumBitfieldStruct<u8, Rstaxi_SPEC>;
    impl Rstaxi {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstv_SPEC;
    pub type Rstv = crate::EnumBitfieldStruct<u8, Rstv_SPEC>;
    impl Rstv {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Stp_SPEC;
    pub type Dl0Stp = crate::EnumBitfieldStruct<u8, Dl0Stp_SPEC>;
    impl Dl0Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Stp_SPEC;
    pub type Dl1Stp = crate::EnumBitfieldStruct<u8, Dl1Stp_SPEC>;
    impl Dl1Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Dir_SPEC;
    pub type Dl0Dir = crate::EnumBitfieldStruct<u8, Dl0Dir_SPEC>;
    impl Dl0Dir {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstsrLl_SPEC;
impl crate::sealed::RegSpec for RstsrLl_SPEC {
    type DataType = u8;
}

pub type RstsrLl = crate::RegValueT<RstsrLl_SPEC>;

impl RstsrLl {
    #[inline(always)]
    pub fn rsths(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstsr_ll::Rsths,
        rstsr_ll::Rsths,
        RstsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstsr_ll::Rsths,
            rstsr_ll::Rsths,
            RstsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstlp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rstsr_ll::Rstlp,
        rstsr_ll::Rstlp,
        RstsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rstsr_ll::Rstlp,
            rstsr_ll::Rstlp,
            RstsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstapb(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rstsr_ll::Rstapb,
        rstsr_ll::Rstapb,
        RstsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rstsr_ll::Rstapb,
            rstsr_ll::Rstapb,
            RstsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstaxi(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rstsr_ll::Rstaxi,
        rstsr_ll::Rstaxi,
        RstsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rstsr_ll::Rstaxi,
            rstsr_ll::Rstaxi,
            RstsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rstv(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rstsr_ll::Rstv,
        rstsr_ll::Rstv,
        RstsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rstsr_ll::Rstv,
            rstsr_ll::Rstv,
            RstsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, RstsrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,RstsrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RstsrLl {
    #[inline(always)]
    fn default() -> RstsrLl {
        <crate::RegValueT<RstsrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstsr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsths_SPEC;
    pub type Rsths = crate::EnumBitfieldStruct<u8, Rsths_SPEC>;
    impl Rsths {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstlp_SPEC;
    pub type Rstlp = crate::EnumBitfieldStruct<u8, Rstlp_SPEC>;
    impl Rstlp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstapb_SPEC;
    pub type Rstapb = crate::EnumBitfieldStruct<u8, Rstapb_SPEC>;
    impl Rstapb {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstaxi_SPEC;
    pub type Rstaxi = crate::EnumBitfieldStruct<u8, Rstaxi_SPEC>;
    impl Rstaxi {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rstv_SPEC;
    pub type Rstv = crate::EnumBitfieldStruct<u8, Rstv_SPEC>;
    impl Rstv {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RstsrLh_SPEC;
impl crate::sealed::RegSpec for RstsrLh_SPEC {
    type DataType = u8;
}

pub type RstsrLh = crate::RegValueT<RstsrLh_SPEC>;

impl RstsrLh {
    #[inline(always)]
    pub fn dl0stp(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rstsr_lh::Dl0Stp,
        rstsr_lh::Dl0Stp,
        RstsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rstsr_lh::Dl0Stp,
            rstsr_lh::Dl0Stp,
            RstsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1stp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rstsr_lh::Dl1Stp,
        rstsr_lh::Dl1Stp,
        RstsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rstsr_lh::Dl1Stp,
            rstsr_lh::Dl1Stp,
            RstsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x1f, 1, 0, u8, u8, RstsrLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<2,0x1f,1,0,u8,u8,RstsrLh_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn dl0dir(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rstsr_lh::Dl0Dir,
        rstsr_lh::Dl0Dir,
        RstsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rstsr_lh::Dl0Dir,
            rstsr_lh::Dl0Dir,
            RstsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RstsrLh {
    #[inline(always)]
    fn default() -> RstsrLh {
        <crate::RegValueT<RstsrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rstsr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Stp_SPEC;
    pub type Dl0Stp = crate::EnumBitfieldStruct<u8, Dl0Stp_SPEC>;
    impl Dl0Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Stp_SPEC;
    pub type Dl1Stp = crate::EnumBitfieldStruct<u8, Dl1Stp_SPEC>;
    impl Dl1Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Dir_SPEC;
    pub type Dl0Dir = crate::EnumBitfieldStruct<u8, Dl0Dir_SPEC>;
    impl Dl0Dir {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Dsisetr_SPEC;
impl crate::sealed::RegSpec for Dsisetr_SPEC {
    type DataType = u32;
}

pub type Dsisetr = crate::RegValueT<Dsisetr_SPEC>;

impl Dsisetr {
    #[inline(always)]
    pub fn mrpsz(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, Dsisetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,Dsisetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn eccen(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        dsisetr::Eccen,
        dsisetr::Eccen,
        Dsisetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            dsisetr::Eccen,
            dsisetr::Eccen,
            Dsisetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc0crcen(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        dsisetr::Vc0Crcen,
        dsisetr::Vc0Crcen,
        Dsisetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            dsisetr::Vc0Crcen,
            dsisetr::Vc0Crcen,
            Dsisetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc1crcen(
        self,
    ) -> crate::common::RegisterField<
        21,
        0x1,
        1,
        0,
        dsisetr::Vc1Crcen,
        dsisetr::Vc1Crcen,
        Dsisetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            21,
            0x1,
            1,
            0,
            dsisetr::Vc1Crcen,
            dsisetr::Vc1Crcen,
            Dsisetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc2crcen(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        dsisetr::Vc2Crcen,
        dsisetr::Vc2Crcen,
        Dsisetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            dsisetr::Vc2Crcen,
            dsisetr::Vc2Crcen,
            Dsisetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc3crcen(
        self,
    ) -> crate::common::RegisterField<
        23,
        0x1,
        1,
        0,
        dsisetr::Vc3Crcen,
        dsisetr::Vc3Crcen,
        Dsisetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            23,
            0x1,
            1,
            0,
            dsisetr::Vc3Crcen,
            dsisetr::Vc3Crcen,
            Dsisetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0x1f, 1, 0, u8, u8, Dsisetr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0x1f,1,0,u8,u8,Dsisetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn scren(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        dsisetr::Scren,
        dsisetr::Scren,
        Dsisetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            dsisetr::Scren,
            dsisetr::Scren,
            Dsisetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extemd(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        dsisetr::Extemd,
        dsisetr::Extemd,
        Dsisetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            dsisetr::Extemd,
            dsisetr::Extemd,
            Dsisetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eotpen(
        self,
    ) -> crate::common::RegisterField<
        31,
        0x1,
        1,
        0,
        dsisetr::Eotpen,
        dsisetr::Eotpen,
        Dsisetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            31,
            0x1,
            1,
            0,
            dsisetr::Eotpen,
            dsisetr::Eotpen,
            Dsisetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Dsisetr {
    #[inline(always)]
    fn default() -> Dsisetr {
        <crate::RegValueT<Dsisetr_SPEC> as RegisterValue<_>>::new(2163277825)
    }
}
pub mod dsisetr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccen_SPEC;
    pub type Eccen = crate::EnumBitfieldStruct<u8, Eccen_SPEC>;
    impl Eccen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc0Crcen_SPEC;
    pub type Vc0Crcen = crate::EnumBitfieldStruct<u8, Vc0Crcen_SPEC>;
    impl Vc0Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc1Crcen_SPEC;
    pub type Vc1Crcen = crate::EnumBitfieldStruct<u8, Vc1Crcen_SPEC>;
    impl Vc1Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc2Crcen_SPEC;
    pub type Vc2Crcen = crate::EnumBitfieldStruct<u8, Vc2Crcen_SPEC>;
    impl Vc2Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc3Crcen_SPEC;
    pub type Vc3Crcen = crate::EnumBitfieldStruct<u8, Vc3Crcen_SPEC>;
    impl Vc3Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scren_SPEC;
    pub type Scren = crate::EnumBitfieldStruct<u8, Scren_SPEC>;
    impl Scren {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extemd_SPEC;
    pub type Extemd = crate::EnumBitfieldStruct<u8, Extemd_SPEC>;
    impl Extemd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eotpen_SPEC;
    pub type Eotpen = crate::EnumBitfieldStruct<u8, Eotpen_SPEC>;
    impl Eotpen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DsisetrL_SPEC;
impl crate::sealed::RegSpec for DsisetrL_SPEC {
    type DataType = u16;
}

pub type DsisetrL = crate::RegValueT<DsisetrL_SPEC>;

impl DsisetrL {
    #[inline(always)]
    pub fn mrpsz(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, DsisetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,DsisetrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for DsisetrL {
    #[inline(always)]
    fn default() -> DsisetrL {
        <crate::RegValueT<DsisetrL_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DsisetrLl_SPEC;
impl crate::sealed::RegSpec for DsisetrLl_SPEC {
    type DataType = u8;
}

pub type DsisetrLl = crate::RegValueT<DsisetrLl_SPEC>;

impl DsisetrLl {
    #[inline(always)]
    pub fn mrpsz(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, DsisetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,DsisetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for DsisetrLl {
    #[inline(always)]
    fn default() -> DsisetrLl {
        <crate::RegValueT<DsisetrLl_SPEC> as RegisterValue<_>>::new(1)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DsisetrLh_SPEC;
impl crate::sealed::RegSpec for DsisetrLh_SPEC {
    type DataType = u8;
}

pub type DsisetrLh = crate::RegValueT<DsisetrLh_SPEC>;

impl DsisetrLh {
    #[inline(always)]
    pub fn mrpsz(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, DsisetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,DsisetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for DsisetrLh {
    #[inline(always)]
    fn default() -> DsisetrLh {
        <crate::RegValueT<DsisetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DsisetrH_SPEC;
impl crate::sealed::RegSpec for DsisetrH_SPEC {
    type DataType = u16;
}

pub type DsisetrH = crate::RegValueT<DsisetrH_SPEC>;

impl DsisetrH {
    #[inline(always)]
    pub fn eccen(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        dsisetr_h::Eccen,
        dsisetr_h::Eccen,
        DsisetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            dsisetr_h::Eccen,
            dsisetr_h::Eccen,
            DsisetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc0crcen(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        dsisetr_h::Vc0Crcen,
        dsisetr_h::Vc0Crcen,
        DsisetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            dsisetr_h::Vc0Crcen,
            dsisetr_h::Vc0Crcen,
            DsisetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc1crcen(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        dsisetr_h::Vc1Crcen,
        dsisetr_h::Vc1Crcen,
        DsisetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            dsisetr_h::Vc1Crcen,
            dsisetr_h::Vc1Crcen,
            DsisetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc2crcen(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        dsisetr_h::Vc2Crcen,
        dsisetr_h::Vc2Crcen,
        DsisetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            dsisetr_h::Vc2Crcen,
            dsisetr_h::Vc2Crcen,
            DsisetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc3crcen(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        dsisetr_h::Vc3Crcen,
        dsisetr_h::Vc3Crcen,
        DsisetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            dsisetr_h::Vc3Crcen,
            dsisetr_h::Vc3Crcen,
            DsisetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0x1f, 1, 0, u8, u8, DsisetrH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0x1f,1,0,u8,u8,DsisetrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn scren(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        dsisetr_h::Scren,
        dsisetr_h::Scren,
        DsisetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            dsisetr_h::Scren,
            dsisetr_h::Scren,
            DsisetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extemd(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        dsisetr_h::Extemd,
        dsisetr_h::Extemd,
        DsisetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            dsisetr_h::Extemd,
            dsisetr_h::Extemd,
            DsisetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eotpen(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        dsisetr_h::Eotpen,
        dsisetr_h::Eotpen,
        DsisetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            dsisetr_h::Eotpen,
            dsisetr_h::Eotpen,
            DsisetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for DsisetrH {
    #[inline(always)]
    fn default() -> DsisetrH {
        <crate::RegValueT<DsisetrH_SPEC> as RegisterValue<_>>::new(33009)
    }
}
pub mod dsisetr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccen_SPEC;
    pub type Eccen = crate::EnumBitfieldStruct<u8, Eccen_SPEC>;
    impl Eccen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc0Crcen_SPEC;
    pub type Vc0Crcen = crate::EnumBitfieldStruct<u8, Vc0Crcen_SPEC>;
    impl Vc0Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc1Crcen_SPEC;
    pub type Vc1Crcen = crate::EnumBitfieldStruct<u8, Vc1Crcen_SPEC>;
    impl Vc1Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc2Crcen_SPEC;
    pub type Vc2Crcen = crate::EnumBitfieldStruct<u8, Vc2Crcen_SPEC>;
    impl Vc2Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc3Crcen_SPEC;
    pub type Vc3Crcen = crate::EnumBitfieldStruct<u8, Vc3Crcen_SPEC>;
    impl Vc3Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scren_SPEC;
    pub type Scren = crate::EnumBitfieldStruct<u8, Scren_SPEC>;
    impl Scren {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extemd_SPEC;
    pub type Extemd = crate::EnumBitfieldStruct<u8, Extemd_SPEC>;
    impl Extemd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eotpen_SPEC;
    pub type Eotpen = crate::EnumBitfieldStruct<u8, Eotpen_SPEC>;
    impl Eotpen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DsisetrHl_SPEC;
impl crate::sealed::RegSpec for DsisetrHl_SPEC {
    type DataType = u8;
}

pub type DsisetrHl = crate::RegValueT<DsisetrHl_SPEC>;

impl DsisetrHl {
    #[inline(always)]
    pub fn eccen(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        dsisetr_hl::Eccen,
        dsisetr_hl::Eccen,
        DsisetrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            dsisetr_hl::Eccen,
            dsisetr_hl::Eccen,
            DsisetrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7, 1, 0, u8, u8, DsisetrHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<1,0x7,1,0,u8,u8,DsisetrHl_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc0crcen(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        dsisetr_hl::Vc0Crcen,
        dsisetr_hl::Vc0Crcen,
        DsisetrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            dsisetr_hl::Vc0Crcen,
            dsisetr_hl::Vc0Crcen,
            DsisetrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc1crcen(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        dsisetr_hl::Vc1Crcen,
        dsisetr_hl::Vc1Crcen,
        DsisetrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            dsisetr_hl::Vc1Crcen,
            dsisetr_hl::Vc1Crcen,
            DsisetrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc2crcen(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        dsisetr_hl::Vc2Crcen,
        dsisetr_hl::Vc2Crcen,
        DsisetrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            dsisetr_hl::Vc2Crcen,
            dsisetr_hl::Vc2Crcen,
            DsisetrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc3crcen(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        dsisetr_hl::Vc3Crcen,
        dsisetr_hl::Vc3Crcen,
        DsisetrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            dsisetr_hl::Vc3Crcen,
            dsisetr_hl::Vc3Crcen,
            DsisetrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for DsisetrHl {
    #[inline(always)]
    fn default() -> DsisetrHl {
        <crate::RegValueT<DsisetrHl_SPEC> as RegisterValue<_>>::new(241)
    }
}
pub mod dsisetr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccen_SPEC;
    pub type Eccen = crate::EnumBitfieldStruct<u8, Eccen_SPEC>;
    impl Eccen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc0Crcen_SPEC;
    pub type Vc0Crcen = crate::EnumBitfieldStruct<u8, Vc0Crcen_SPEC>;
    impl Vc0Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc1Crcen_SPEC;
    pub type Vc1Crcen = crate::EnumBitfieldStruct<u8, Vc1Crcen_SPEC>;
    impl Vc1Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc2Crcen_SPEC;
    pub type Vc2Crcen = crate::EnumBitfieldStruct<u8, Vc2Crcen_SPEC>;
    impl Vc2Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc3Crcen_SPEC;
    pub type Vc3Crcen = crate::EnumBitfieldStruct<u8, Vc3Crcen_SPEC>;
    impl Vc3Crcen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct DsisetrHh_SPEC;
impl crate::sealed::RegSpec for DsisetrHh_SPEC {
    type DataType = u8;
}

pub type DsisetrHh = crate::RegValueT<DsisetrHh_SPEC>;

impl DsisetrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, u8, DsisetrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1f,1,0,u8,u8,DsisetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn scren(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        dsisetr_hh::Scren,
        dsisetr_hh::Scren,
        DsisetrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            dsisetr_hh::Scren,
            dsisetr_hh::Scren,
            DsisetrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extemd(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        dsisetr_hh::Extemd,
        dsisetr_hh::Extemd,
        DsisetrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            dsisetr_hh::Extemd,
            dsisetr_hh::Extemd,
            DsisetrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eotpen(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        dsisetr_hh::Eotpen,
        dsisetr_hh::Eotpen,
        DsisetrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            dsisetr_hh::Eotpen,
            dsisetr_hh::Eotpen,
            DsisetrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for DsisetrHh {
    #[inline(always)]
    fn default() -> DsisetrHh {
        <crate::RegValueT<DsisetrHh_SPEC> as RegisterValue<_>>::new(128)
    }
}
pub mod dsisetr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Scren_SPEC;
    pub type Scren = crate::EnumBitfieldStruct<u8, Scren_SPEC>;
    impl Scren {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extemd_SPEC;
    pub type Extemd = crate::EnumBitfieldStruct<u8, Extemd_SPEC>;
    impl Extemd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eotpen_SPEC;
    pub type Eotpen = crate::EnumBitfieldStruct<u8, Eotpen_SPEC>;
    impl Eotpen {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd0R_SPEC;
impl crate::sealed::RegSpec for Txppd0R_SPEC {
    type DataType = u32;
}

pub type Txppd0R = crate::RegValueT<Txppd0R_SPEC>;

impl Txppd0R {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd0R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd0R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd0R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd0R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data2(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Txppd0R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Txppd0R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data3(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Txppd0R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Txppd0R_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd0R {
    #[inline(always)]
    fn default() -> Txppd0R {
        <crate::RegValueT<Txppd0R_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd0RL_SPEC;
impl crate::sealed::RegSpec for Txppd0RL_SPEC {
    type DataType = u16;
}

pub type Txppd0RL = crate::RegValueT<Txppd0RL_SPEC>;

impl Txppd0RL {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd0RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd0RL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd0RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd0RL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd0RL {
    #[inline(always)]
    fn default() -> Txppd0RL {
        <crate::RegValueT<Txppd0RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd0RLl_SPEC;
impl crate::sealed::RegSpec for Txppd0RLl_SPEC {
    type DataType = u8;
}

pub type Txppd0RLl = crate::RegValueT<Txppd0RLl_SPEC>;

impl Txppd0RLl {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd0RLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd0RLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd0RLl {
    #[inline(always)]
    fn default() -> Txppd0RLl {
        <crate::RegValueT<Txppd0RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd0RLh_SPEC;
impl crate::sealed::RegSpec for Txppd0RLh_SPEC {
    type DataType = u8;
}

pub type Txppd0RLh = crate::RegValueT<Txppd0RLh_SPEC>;

impl Txppd0RLh {
    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd0RLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd0RLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd0RLh {
    #[inline(always)]
    fn default() -> Txppd0RLh {
        <crate::RegValueT<Txppd0RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd0RH_SPEC;
impl crate::sealed::RegSpec for Txppd0RH_SPEC {
    type DataType = u16;
}

pub type Txppd0RH = crate::RegValueT<Txppd0RH_SPEC>;

impl Txppd0RH {
    #[inline(always)]
    pub fn data2(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd0RH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd0RH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data3(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd0RH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd0RH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd0RH {
    #[inline(always)]
    fn default() -> Txppd0RH {
        <crate::RegValueT<Txppd0RH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd0RHl_SPEC;
impl crate::sealed::RegSpec for Txppd0RHl_SPEC {
    type DataType = u8;
}

pub type Txppd0RHl = crate::RegValueT<Txppd0RHl_SPEC>;

impl Txppd0RHl {
    #[inline(always)]
    pub fn data2(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd0RHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd0RHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd0RHl {
    #[inline(always)]
    fn default() -> Txppd0RHl {
        <crate::RegValueT<Txppd0RHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd0RHh_SPEC;
impl crate::sealed::RegSpec for Txppd0RHh_SPEC {
    type DataType = u8;
}

pub type Txppd0RHh = crate::RegValueT<Txppd0RHh_SPEC>;

impl Txppd0RHh {
    #[inline(always)]
    pub fn data3(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd0RHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd0RHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd0RHh {
    #[inline(always)]
    fn default() -> Txppd0RHh {
        <crate::RegValueT<Txppd0RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd1R_SPEC;
impl crate::sealed::RegSpec for Txppd1R_SPEC {
    type DataType = u32;
}

pub type Txppd1R = crate::RegValueT<Txppd1R_SPEC>;

impl Txppd1R {
    #[inline(always)]
    pub fn data4(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd1R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd1R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data5(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd1R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd1R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data6(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Txppd1R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Txppd1R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data7(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Txppd1R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Txppd1R_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd1R {
    #[inline(always)]
    fn default() -> Txppd1R {
        <crate::RegValueT<Txppd1R_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd1RL_SPEC;
impl crate::sealed::RegSpec for Txppd1RL_SPEC {
    type DataType = u16;
}

pub type Txppd1RL = crate::RegValueT<Txppd1RL_SPEC>;

impl Txppd1RL {
    #[inline(always)]
    pub fn data4(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd1RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd1RL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data5(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd1RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd1RL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd1RL {
    #[inline(always)]
    fn default() -> Txppd1RL {
        <crate::RegValueT<Txppd1RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd1RLl_SPEC;
impl crate::sealed::RegSpec for Txppd1RLl_SPEC {
    type DataType = u8;
}

pub type Txppd1RLl = crate::RegValueT<Txppd1RLl_SPEC>;

impl Txppd1RLl {
    #[inline(always)]
    pub fn data4(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd1RLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd1RLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd1RLl {
    #[inline(always)]
    fn default() -> Txppd1RLl {
        <crate::RegValueT<Txppd1RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd1RLh_SPEC;
impl crate::sealed::RegSpec for Txppd1RLh_SPEC {
    type DataType = u8;
}

pub type Txppd1RLh = crate::RegValueT<Txppd1RLh_SPEC>;

impl Txppd1RLh {
    #[inline(always)]
    pub fn data5(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd1RLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd1RLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd1RLh {
    #[inline(always)]
    fn default() -> Txppd1RLh {
        <crate::RegValueT<Txppd1RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd1RH_SPEC;
impl crate::sealed::RegSpec for Txppd1RH_SPEC {
    type DataType = u16;
}

pub type Txppd1RH = crate::RegValueT<Txppd1RH_SPEC>;

impl Txppd1RH {
    #[inline(always)]
    pub fn data6(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd1RH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd1RH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data7(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd1RH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd1RH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd1RH {
    #[inline(always)]
    fn default() -> Txppd1RH {
        <crate::RegValueT<Txppd1RH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd1RHl_SPEC;
impl crate::sealed::RegSpec for Txppd1RHl_SPEC {
    type DataType = u8;
}

pub type Txppd1RHl = crate::RegValueT<Txppd1RHl_SPEC>;

impl Txppd1RHl {
    #[inline(always)]
    pub fn data6(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd1RHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd1RHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd1RHl {
    #[inline(always)]
    fn default() -> Txppd1RHl {
        <crate::RegValueT<Txppd1RHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd1RHh_SPEC;
impl crate::sealed::RegSpec for Txppd1RHh_SPEC {
    type DataType = u8;
}

pub type Txppd1RHh = crate::RegValueT<Txppd1RHh_SPEC>;

impl Txppd1RHh {
    #[inline(always)]
    pub fn data7(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd1RHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd1RHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd1RHh {
    #[inline(always)]
    fn default() -> Txppd1RHh {
        <crate::RegValueT<Txppd1RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd2R_SPEC;
impl crate::sealed::RegSpec for Txppd2R_SPEC {
    type DataType = u32;
}

pub type Txppd2R = crate::RegValueT<Txppd2R_SPEC>;

impl Txppd2R {
    #[inline(always)]
    pub fn data8(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd2R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd2R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data9(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd2R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd2R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data10(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Txppd2R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Txppd2R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data11(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Txppd2R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Txppd2R_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd2R {
    #[inline(always)]
    fn default() -> Txppd2R {
        <crate::RegValueT<Txppd2R_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd2RL_SPEC;
impl crate::sealed::RegSpec for Txppd2RL_SPEC {
    type DataType = u16;
}

pub type Txppd2RL = crate::RegValueT<Txppd2RL_SPEC>;

impl Txppd2RL {
    #[inline(always)]
    pub fn data8(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd2RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd2RL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data9(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd2RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd2RL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd2RL {
    #[inline(always)]
    fn default() -> Txppd2RL {
        <crate::RegValueT<Txppd2RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd2RLl_SPEC;
impl crate::sealed::RegSpec for Txppd2RLl_SPEC {
    type DataType = u8;
}

pub type Txppd2RLl = crate::RegValueT<Txppd2RLl_SPEC>;

impl Txppd2RLl {
    #[inline(always)]
    pub fn data8(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd2RLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd2RLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd2RLl {
    #[inline(always)]
    fn default() -> Txppd2RLl {
        <crate::RegValueT<Txppd2RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd2RLh_SPEC;
impl crate::sealed::RegSpec for Txppd2RLh_SPEC {
    type DataType = u8;
}

pub type Txppd2RLh = crate::RegValueT<Txppd2RLh_SPEC>;

impl Txppd2RLh {
    #[inline(always)]
    pub fn data9(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd2RLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd2RLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd2RLh {
    #[inline(always)]
    fn default() -> Txppd2RLh {
        <crate::RegValueT<Txppd2RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd2RH_SPEC;
impl crate::sealed::RegSpec for Txppd2RH_SPEC {
    type DataType = u16;
}

pub type Txppd2RH = crate::RegValueT<Txppd2RH_SPEC>;

impl Txppd2RH {
    #[inline(always)]
    pub fn data10(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd2RH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd2RH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data11(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd2RH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd2RH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd2RH {
    #[inline(always)]
    fn default() -> Txppd2RH {
        <crate::RegValueT<Txppd2RH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd2RHl_SPEC;
impl crate::sealed::RegSpec for Txppd2RHl_SPEC {
    type DataType = u8;
}

pub type Txppd2RHl = crate::RegValueT<Txppd2RHl_SPEC>;

impl Txppd2RHl {
    #[inline(always)]
    pub fn data10(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd2RHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd2RHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd2RHl {
    #[inline(always)]
    fn default() -> Txppd2RHl {
        <crate::RegValueT<Txppd2RHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd2RHh_SPEC;
impl crate::sealed::RegSpec for Txppd2RHh_SPEC {
    type DataType = u8;
}

pub type Txppd2RHh = crate::RegValueT<Txppd2RHh_SPEC>;

impl Txppd2RHh {
    #[inline(always)]
    pub fn data11(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd2RHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd2RHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd2RHh {
    #[inline(always)]
    fn default() -> Txppd2RHh {
        <crate::RegValueT<Txppd2RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd3R_SPEC;
impl crate::sealed::RegSpec for Txppd3R_SPEC {
    type DataType = u32;
}

pub type Txppd3R = crate::RegValueT<Txppd3R_SPEC>;

impl Txppd3R {
    #[inline(always)]
    pub fn data12(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd3R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd3R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data13(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd3R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd3R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data14(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Txppd3R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Txppd3R_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data15(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Txppd3R_SPEC, crate::common::RW> {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Txppd3R_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd3R {
    #[inline(always)]
    fn default() -> Txppd3R {
        <crate::RegValueT<Txppd3R_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd3RL_SPEC;
impl crate::sealed::RegSpec for Txppd3RL_SPEC {
    type DataType = u16;
}

pub type Txppd3RL = crate::RegValueT<Txppd3RL_SPEC>;

impl Txppd3RL {
    #[inline(always)]
    pub fn data12(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd3RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd3RL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data13(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd3RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd3RL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd3RL {
    #[inline(always)]
    fn default() -> Txppd3RL {
        <crate::RegValueT<Txppd3RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd3RLl_SPEC;
impl crate::sealed::RegSpec for Txppd3RLl_SPEC {
    type DataType = u8;
}

pub type Txppd3RLl = crate::RegValueT<Txppd3RLl_SPEC>;

impl Txppd3RLl {
    #[inline(always)]
    pub fn data12(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd3RLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd3RLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd3RLl {
    #[inline(always)]
    fn default() -> Txppd3RLl {
        <crate::RegValueT<Txppd3RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd3RLh_SPEC;
impl crate::sealed::RegSpec for Txppd3RLh_SPEC {
    type DataType = u8;
}

pub type Txppd3RLh = crate::RegValueT<Txppd3RLh_SPEC>;

impl Txppd3RLh {
    #[inline(always)]
    pub fn data13(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd3RLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd3RLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd3RLh {
    #[inline(always)]
    fn default() -> Txppd3RLh {
        <crate::RegValueT<Txppd3RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd3RH_SPEC;
impl crate::sealed::RegSpec for Txppd3RH_SPEC {
    type DataType = u16;
}

pub type Txppd3RH = crate::RegValueT<Txppd3RH_SPEC>;

impl Txppd3RH {
    #[inline(always)]
    pub fn data14(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd3RH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd3RH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data15(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Txppd3RH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Txppd3RH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd3RH {
    #[inline(always)]
    fn default() -> Txppd3RH {
        <crate::RegValueT<Txppd3RH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd3RHl_SPEC;
impl crate::sealed::RegSpec for Txppd3RHl_SPEC {
    type DataType = u8;
}

pub type Txppd3RHl = crate::RegValueT<Txppd3RHl_SPEC>;

impl Txppd3RHl {
    #[inline(always)]
    pub fn data14(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd3RHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd3RHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd3RHl {
    #[inline(always)]
    fn default() -> Txppd3RHl {
        <crate::RegValueT<Txppd3RHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Txppd3RHh_SPEC;
impl crate::sealed::RegSpec for Txppd3RHh_SPEC {
    type DataType = u8;
}

pub type Txppd3RHh = crate::RegValueT<Txppd3RHh_SPEC>;

impl Txppd3RHh {
    #[inline(always)]
    pub fn data15(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Txppd3RHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Txppd3RHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Txppd3RHh {
    #[inline(always)]
    fn default() -> Txppd3RHh {
        <crate::RegValueT<Txppd3RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxsr_SPEC;
impl crate::sealed::RegSpec for Rxsr_SPEC {
    type DataType = u32;
}

pub type Rxsr = crate::RegValueT<Rxsr_SPEC>;

impl Rxsr {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxsr::Btarend,
        rxsr::Btarend,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxsr::Btarend,
            rxsr::Btarend,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxsr::Lrxhto,
        rxsr::Lrxhto,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxsr::Lrxhto,
            rxsr::Lrxhto,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxsr::Tato,
        rxsr::Tato,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxsr::Tato,
            rxsr::Tato,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxsr::Rxresp,
        rxsr::Rxresp,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxsr::Rxresp,
            rxsr::Rxresp,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxsr::Rxeotp,
        rxsr::Rxeotp,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxsr::Rxeotp,
            rxsr::Rxeotp,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        rxsr::Rxte,
        rxsr::Rxte,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            rxsr::Rxte,
            rxsr::Rxte,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxsr::Rxack,
        rxsr::Rxack,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxsr::Rxack,
            rxsr::Rxack,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rxsr::Extedet,
        rxsr::Extedet,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rxsr::Extedet,
            rxsr::Extedet,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        rxsr::Mlferr,
        rxsr::Mlferr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            rxsr::Mlferr,
            rxsr::Mlferr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        17,
        0x1,
        1,
        0,
        rxsr::Eccerrm,
        rxsr::Eccerrm,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            17,
            0x1,
            1,
            0,
            rxsr::Eccerrm,
            rxsr::Eccerrm,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        18,
        0x1,
        1,
        0,
        rxsr::Unexerr,
        rxsr::Unexerr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            18,
            0x1,
            1,
            0,
            rxsr::Unexerr,
            rxsr::Unexerr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        rxsr::Wcerr,
        rxsr::Wcerr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            rxsr::Wcerr,
            rxsr::Wcerr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        21,
        0x1,
        1,
        0,
        rxsr::Crcerr,
        rxsr::Crcerr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            21,
            0x1,
            1,
            0,
            rxsr::Crcerr,
            rxsr::Crcerr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        rxsr::Iberr,
        rxsr::Iberr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            rxsr::Iberr,
            rxsr::Iberr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        23,
        0x1,
        1,
        0,
        rxsr::Rxovferr,
        rxsr::Rxovferr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            23,
            0x1,
            1,
            0,
            rxsr::Rxovferr,
            rxsr::Rxovferr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        rxsr::Prtoerr,
        rxsr::Prtoerr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            rxsr::Prtoerr,
            rxsr::Prtoerr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        rxsr::Noreserr,
        rxsr::Noreserr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            rxsr::Noreserr,
            rxsr::Noreserr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        rxsr::Rsizeerr,
        rxsr::Rsizeerr,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            rxsr::Rsizeerr,
            rxsr::Rsizeerr,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        rxsr::Eccerrs,
        rxsr::Eccerrs,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            rxsr::Eccerrs,
            rxsr::Eccerrs,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        rxsr::Rxake,
        rxsr::Rxake,
        Rxsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            rxsr::Rxake,
            rxsr::Rxake,
            Rxsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Rxsr_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<31, 1, 0, Rxsr_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Rxsr {
    #[inline(always)]
    fn default() -> Rxsr {
        <crate::RegValueT<Rxsr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxsr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxsrL_SPEC;
impl crate::sealed::RegSpec for RxsrL_SPEC {
    type DataType = u16;
}

pub type RxsrL = crate::RegValueT<RxsrL_SPEC>;

impl RxsrL {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxsr_l::Btarend,
        rxsr_l::Btarend,
        RxsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxsr_l::Btarend,
            rxsr_l::Btarend,
            RxsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxsr_l::Lrxhto,
        rxsr_l::Lrxhto,
        RxsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxsr_l::Lrxhto,
            rxsr_l::Lrxhto,
            RxsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxsr_l::Tato,
        rxsr_l::Tato,
        RxsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxsr_l::Tato,
            rxsr_l::Tato,
            RxsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxsr_l::Rxresp,
        rxsr_l::Rxresp,
        RxsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxsr_l::Rxresp,
            rxsr_l::Rxresp,
            RxsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxsr_l::Rxeotp,
        rxsr_l::Rxeotp,
        RxsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxsr_l::Rxeotp,
            rxsr_l::Rxeotp,
            RxsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<12, 1, 0, RxsrL_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<12, 1, 0, RxsrL_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        rxsr_l::Rxte,
        rxsr_l::Rxte,
        RxsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            rxsr_l::Rxte,
            rxsr_l::Rxte,
            RxsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxsr_l::Rxack,
        rxsr_l::Rxack,
        RxsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxsr_l::Rxack,
            rxsr_l::Rxack,
            RxsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rxsr_l::Extedet,
        rxsr_l::Extedet,
        RxsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rxsr_l::Extedet,
            rxsr_l::Extedet,
            RxsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxsrL {
    #[inline(always)]
    fn default() -> RxsrL {
        <crate::RegValueT<RxsrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxsr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxsrLl_SPEC;
impl crate::sealed::RegSpec for RxsrLl_SPEC {
    type DataType = u8;
}

pub type RxsrLl = crate::RegValueT<RxsrLl_SPEC>;

impl RxsrLl {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxsr_ll::Btarend,
        rxsr_ll::Btarend,
        RxsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxsr_ll::Btarend,
            rxsr_ll::Btarend,
            RxsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxsr_ll::Lrxhto,
        rxsr_ll::Lrxhto,
        RxsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxsr_ll::Lrxhto,
            rxsr_ll::Lrxhto,
            RxsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxsr_ll::Tato,
        rxsr_ll::Tato,
        RxsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxsr_ll::Tato,
            rxsr_ll::Tato,
            RxsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, RxsrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,RxsrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxsrLl {
    #[inline(always)]
    fn default() -> RxsrLl {
        <crate::RegValueT<RxsrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxsr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxsrLh_SPEC;
impl crate::sealed::RegSpec for RxsrLh_SPEC {
    type DataType = u8;
}

pub type RxsrLh = crate::RegValueT<RxsrLh_SPEC>;

impl RxsrLh {
    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxsr_lh::Rxresp,
        rxsr_lh::Rxresp,
        RxsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxsr_lh::Rxresp,
            rxsr_lh::Rxresp,
            RxsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxsr_lh::Rxeotp,
        rxsr_lh::Rxeotp,
        RxsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxsr_lh::Rxeotp,
            rxsr_lh::Rxeotp,
            RxsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, RxsrLh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<4, 1, 0, RxsrLh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxsr_lh::Rxte,
        rxsr_lh::Rxte,
        RxsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxsr_lh::Rxte,
            rxsr_lh::Rxte,
            RxsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxsr_lh::Rxack,
        rxsr_lh::Rxack,
        RxsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxsr_lh::Rxack,
            rxsr_lh::Rxack,
            RxsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxsr_lh::Extedet,
        rxsr_lh::Extedet,
        RxsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxsr_lh::Extedet,
            rxsr_lh::Extedet,
            RxsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxsrLh {
    #[inline(always)]
    fn default() -> RxsrLh {
        <crate::RegValueT<RxsrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxsr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxsrH_SPEC;
impl crate::sealed::RegSpec for RxsrH_SPEC {
    type DataType = u16;
}

pub type RxsrH = crate::RegValueT<RxsrH_SPEC>;

impl RxsrH {
    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxsr_h::Mlferr,
        rxsr_h::Mlferr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxsr_h::Mlferr,
            rxsr_h::Mlferr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxsr_h::Eccerrm,
        rxsr_h::Eccerrm,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxsr_h::Eccerrm,
            rxsr_h::Eccerrm,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxsr_h::Unexerr,
        rxsr_h::Unexerr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxsr_h::Unexerr,
            rxsr_h::Unexerr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxsr_h::Wcerr,
        rxsr_h::Wcerr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxsr_h::Wcerr,
            rxsr_h::Wcerr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxsr_h::Crcerr,
        rxsr_h::Crcerr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxsr_h::Crcerr,
            rxsr_h::Crcerr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxsr_h::Iberr,
        rxsr_h::Iberr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxsr_h::Iberr,
            rxsr_h::Iberr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxsr_h::Rxovferr,
        rxsr_h::Rxovferr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxsr_h::Rxovferr,
            rxsr_h::Rxovferr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxsr_h::Prtoerr,
        rxsr_h::Prtoerr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxsr_h::Prtoerr,
            rxsr_h::Prtoerr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        rxsr_h::Noreserr,
        rxsr_h::Noreserr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            rxsr_h::Noreserr,
            rxsr_h::Noreserr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxsr_h::Rsizeerr,
        rxsr_h::Rsizeerr,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxsr_h::Rsizeerr,
            rxsr_h::Rsizeerr,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        rxsr_h::Eccerrs,
        rxsr_h::Eccerrs,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            rxsr_h::Eccerrs,
            rxsr_h::Eccerrs,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxsr_h::Rxake,
        rxsr_h::Rxake,
        RxsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxsr_h::Rxake,
            rxsr_h::Rxake,
            RxsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, RxsrH_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15, 1, 0, RxsrH_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for RxsrH {
    #[inline(always)]
    fn default() -> RxsrH {
        <crate::RegValueT<RxsrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxsr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxsrHl_SPEC;
impl crate::sealed::RegSpec for RxsrHl_SPEC {
    type DataType = u8;
}

pub type RxsrHl = crate::RegValueT<RxsrHl_SPEC>;

impl RxsrHl {
    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxsr_hl::Mlferr,
        rxsr_hl::Mlferr,
        RxsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxsr_hl::Mlferr,
            rxsr_hl::Mlferr,
            RxsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxsr_hl::Eccerrm,
        rxsr_hl::Eccerrm,
        RxsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxsr_hl::Eccerrm,
            rxsr_hl::Eccerrm,
            RxsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxsr_hl::Unexerr,
        rxsr_hl::Unexerr,
        RxsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxsr_hl::Unexerr,
            rxsr_hl::Unexerr,
            RxsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<3, 1, 0, RxsrHl_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<3, 1, 0, RxsrHl_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxsr_hl::Wcerr,
        rxsr_hl::Wcerr,
        RxsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxsr_hl::Wcerr,
            rxsr_hl::Wcerr,
            RxsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxsr_hl::Crcerr,
        rxsr_hl::Crcerr,
        RxsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxsr_hl::Crcerr,
            rxsr_hl::Crcerr,
            RxsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxsr_hl::Iberr,
        rxsr_hl::Iberr,
        RxsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxsr_hl::Iberr,
            rxsr_hl::Iberr,
            RxsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxsr_hl::Rxovferr,
        rxsr_hl::Rxovferr,
        RxsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxsr_hl::Rxovferr,
            rxsr_hl::Rxovferr,
            RxsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxsrHl {
    #[inline(always)]
    fn default() -> RxsrHl {
        <crate::RegValueT<RxsrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxsr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxsrHh_SPEC;
impl crate::sealed::RegSpec for RxsrHh_SPEC {
    type DataType = u8;
}

pub type RxsrHh = crate::RegValueT<RxsrHh_SPEC>;

impl RxsrHh {
    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxsr_hh::Prtoerr,
        rxsr_hh::Prtoerr,
        RxsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxsr_hh::Prtoerr,
            rxsr_hh::Prtoerr,
            RxsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxsr_hh::Noreserr,
        rxsr_hh::Noreserr,
        RxsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxsr_hh::Noreserr,
            rxsr_hh::Noreserr,
            RxsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxsr_hh::Rsizeerr,
        rxsr_hh::Rsizeerr,
        RxsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxsr_hh::Rsizeerr,
            rxsr_hh::Rsizeerr,
            RxsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxsr_hh::Eccerrs,
        rxsr_hh::Eccerrs,
        RxsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxsr_hh::Eccerrs,
            rxsr_hh::Eccerrs,
            RxsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxsr_hh::Rxake,
        rxsr_hh::Rxake,
        RxsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxsr_hh::Rxake,
            rxsr_hh::Rxake,
            RxsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, RxsrHh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, RxsrHh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for RxsrHh {
    #[inline(always)]
    fn default() -> RxsrHh {
        <crate::RegValueT<RxsrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxsr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxscr_SPEC;
impl crate::sealed::RegSpec for Rxscr_SPEC {
    type DataType = u32;
}

pub type Rxscr = crate::RegValueT<Rxscr_SPEC>;

impl Rxscr {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxscr::Btarend,
        rxscr::Btarend,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxscr::Btarend,
            rxscr::Btarend,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxscr::Lrxhto,
        rxscr::Lrxhto,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxscr::Lrxhto,
            rxscr::Lrxhto,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxscr::Tato,
        rxscr::Tato,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxscr::Tato,
            rxscr::Tato,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxscr::Rxresp,
        rxscr::Rxresp,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxscr::Rxresp,
            rxscr::Rxresp,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxscr::Rxeotp,
        rxscr::Rxeotp,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxscr::Rxeotp,
            rxscr::Rxeotp,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        rxscr::Rxte,
        rxscr::Rxte,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            rxscr::Rxte,
            rxscr::Rxte,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxscr::Rxack,
        rxscr::Rxack,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxscr::Rxack,
            rxscr::Rxack,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rxscr::Extedet,
        rxscr::Extedet,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rxscr::Extedet,
            rxscr::Extedet,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        rxscr::Mlferr,
        rxscr::Mlferr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            rxscr::Mlferr,
            rxscr::Mlferr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        17,
        0x1,
        1,
        0,
        rxscr::Eccerrm,
        rxscr::Eccerrm,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            17,
            0x1,
            1,
            0,
            rxscr::Eccerrm,
            rxscr::Eccerrm,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        18,
        0x1,
        1,
        0,
        rxscr::Unexerr,
        rxscr::Unexerr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            18,
            0x1,
            1,
            0,
            rxscr::Unexerr,
            rxscr::Unexerr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        rxscr::Wcerr,
        rxscr::Wcerr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            rxscr::Wcerr,
            rxscr::Wcerr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        21,
        0x1,
        1,
        0,
        rxscr::Crcerr,
        rxscr::Crcerr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            21,
            0x1,
            1,
            0,
            rxscr::Crcerr,
            rxscr::Crcerr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        rxscr::Iberr,
        rxscr::Iberr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            rxscr::Iberr,
            rxscr::Iberr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        23,
        0x1,
        1,
        0,
        rxscr::Rxovferr,
        rxscr::Rxovferr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            23,
            0x1,
            1,
            0,
            rxscr::Rxovferr,
            rxscr::Rxovferr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        rxscr::Prtoerr,
        rxscr::Prtoerr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            rxscr::Prtoerr,
            rxscr::Prtoerr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        rxscr::Noreserr,
        rxscr::Noreserr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            rxscr::Noreserr,
            rxscr::Noreserr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        rxscr::Rsizeerr,
        rxscr::Rsizeerr,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            rxscr::Rsizeerr,
            rxscr::Rsizeerr,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        rxscr::Eccerrs,
        rxscr::Eccerrs,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            rxscr::Eccerrs,
            rxscr::Eccerrs,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        rxscr::Rxake,
        rxscr::Rxake,
        Rxscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            rxscr::Rxake,
            rxscr::Rxake,
            Rxscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Rxscr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31, 1, 0, Rxscr_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Rxscr {
    #[inline(always)]
    fn default() -> Rxscr {
        <crate::RegValueT<Rxscr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxscr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxscrL_SPEC;
impl crate::sealed::RegSpec for RxscrL_SPEC {
    type DataType = u16;
}

pub type RxscrL = crate::RegValueT<RxscrL_SPEC>;

impl RxscrL {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxscr_l::Btarend,
        rxscr_l::Btarend,
        RxscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxscr_l::Btarend,
            rxscr_l::Btarend,
            RxscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxscr_l::Lrxhto,
        rxscr_l::Lrxhto,
        RxscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxscr_l::Lrxhto,
            rxscr_l::Lrxhto,
            RxscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxscr_l::Tato,
        rxscr_l::Tato,
        RxscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxscr_l::Tato,
            rxscr_l::Tato,
            RxscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxscr_l::Rxresp,
        rxscr_l::Rxresp,
        RxscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxscr_l::Rxresp,
            rxscr_l::Rxresp,
            RxscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxscr_l::Rxeotp,
        rxscr_l::Rxeotp,
        RxscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxscr_l::Rxeotp,
            rxscr_l::Rxeotp,
            RxscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<12, 1, 0, RxscrL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<12, 1, 0, RxscrL_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        rxscr_l::Rxte,
        rxscr_l::Rxte,
        RxscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            rxscr_l::Rxte,
            rxscr_l::Rxte,
            RxscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxscr_l::Rxack,
        rxscr_l::Rxack,
        RxscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxscr_l::Rxack,
            rxscr_l::Rxack,
            RxscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rxscr_l::Extedet,
        rxscr_l::Extedet,
        RxscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rxscr_l::Extedet,
            rxscr_l::Extedet,
            RxscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxscrL {
    #[inline(always)]
    fn default() -> RxscrL {
        <crate::RegValueT<RxscrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxscr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxscrLl_SPEC;
impl crate::sealed::RegSpec for RxscrLl_SPEC {
    type DataType = u8;
}

pub type RxscrLl = crate::RegValueT<RxscrLl_SPEC>;

impl RxscrLl {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxscr_ll::Btarend,
        rxscr_ll::Btarend,
        RxscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxscr_ll::Btarend,
            rxscr_ll::Btarend,
            RxscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxscr_ll::Lrxhto,
        rxscr_ll::Lrxhto,
        RxscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxscr_ll::Lrxhto,
            rxscr_ll::Lrxhto,
            RxscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxscr_ll::Tato,
        rxscr_ll::Tato,
        RxscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxscr_ll::Tato,
            rxscr_ll::Tato,
            RxscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, RxscrLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,RxscrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RxscrLl {
    #[inline(always)]
    fn default() -> RxscrLl {
        <crate::RegValueT<RxscrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxscr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxscrLh_SPEC;
impl crate::sealed::RegSpec for RxscrLh_SPEC {
    type DataType = u8;
}

pub type RxscrLh = crate::RegValueT<RxscrLh_SPEC>;

impl RxscrLh {
    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxscr_lh::Rxresp,
        rxscr_lh::Rxresp,
        RxscrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxscr_lh::Rxresp,
            rxscr_lh::Rxresp,
            RxscrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxscr_lh::Rxeotp,
        rxscr_lh::Rxeotp,
        RxscrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxscr_lh::Rxeotp,
            rxscr_lh::Rxeotp,
            RxscrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, RxscrLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4, 1, 0, RxscrLh_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxscr_lh::Rxte,
        rxscr_lh::Rxte,
        RxscrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxscr_lh::Rxte,
            rxscr_lh::Rxte,
            RxscrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxscr_lh::Rxack,
        rxscr_lh::Rxack,
        RxscrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxscr_lh::Rxack,
            rxscr_lh::Rxack,
            RxscrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxscr_lh::Extedet,
        rxscr_lh::Extedet,
        RxscrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxscr_lh::Extedet,
            rxscr_lh::Extedet,
            RxscrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxscrLh {
    #[inline(always)]
    fn default() -> RxscrLh {
        <crate::RegValueT<RxscrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxscr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxscrH_SPEC;
impl crate::sealed::RegSpec for RxscrH_SPEC {
    type DataType = u16;
}

pub type RxscrH = crate::RegValueT<RxscrH_SPEC>;

impl RxscrH {
    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxscr_h::Mlferr,
        rxscr_h::Mlferr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxscr_h::Mlferr,
            rxscr_h::Mlferr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxscr_h::Eccerrm,
        rxscr_h::Eccerrm,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxscr_h::Eccerrm,
            rxscr_h::Eccerrm,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxscr_h::Unexerr,
        rxscr_h::Unexerr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxscr_h::Unexerr,
            rxscr_h::Unexerr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxscr_h::Wcerr,
        rxscr_h::Wcerr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxscr_h::Wcerr,
            rxscr_h::Wcerr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxscr_h::Crcerr,
        rxscr_h::Crcerr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxscr_h::Crcerr,
            rxscr_h::Crcerr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxscr_h::Iberr,
        rxscr_h::Iberr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxscr_h::Iberr,
            rxscr_h::Iberr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxscr_h::Rxovferr,
        rxscr_h::Rxovferr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxscr_h::Rxovferr,
            rxscr_h::Rxovferr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxscr_h::Prtoerr,
        rxscr_h::Prtoerr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxscr_h::Prtoerr,
            rxscr_h::Prtoerr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        rxscr_h::Noreserr,
        rxscr_h::Noreserr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            rxscr_h::Noreserr,
            rxscr_h::Noreserr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxscr_h::Rsizeerr,
        rxscr_h::Rsizeerr,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxscr_h::Rsizeerr,
            rxscr_h::Rsizeerr,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        rxscr_h::Eccerrs,
        rxscr_h::Eccerrs,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            rxscr_h::Eccerrs,
            rxscr_h::Eccerrs,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxscr_h::Rxake,
        rxscr_h::Rxake,
        RxscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxscr_h::Rxake,
            rxscr_h::Rxake,
            RxscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, RxscrH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15, 1, 0, RxscrH_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for RxscrH {
    #[inline(always)]
    fn default() -> RxscrH {
        <crate::RegValueT<RxscrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxscr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxscrHl_SPEC;
impl crate::sealed::RegSpec for RxscrHl_SPEC {
    type DataType = u8;
}

pub type RxscrHl = crate::RegValueT<RxscrHl_SPEC>;

impl RxscrHl {
    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxscr_hl::Mlferr,
        rxscr_hl::Mlferr,
        RxscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxscr_hl::Mlferr,
            rxscr_hl::Mlferr,
            RxscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxscr_hl::Eccerrm,
        rxscr_hl::Eccerrm,
        RxscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxscr_hl::Eccerrm,
            rxscr_hl::Eccerrm,
            RxscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxscr_hl::Unexerr,
        rxscr_hl::Unexerr,
        RxscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxscr_hl::Unexerr,
            rxscr_hl::Unexerr,
            RxscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<3, 1, 0, RxscrHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<3, 1, 0, RxscrHl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxscr_hl::Wcerr,
        rxscr_hl::Wcerr,
        RxscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxscr_hl::Wcerr,
            rxscr_hl::Wcerr,
            RxscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxscr_hl::Crcerr,
        rxscr_hl::Crcerr,
        RxscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxscr_hl::Crcerr,
            rxscr_hl::Crcerr,
            RxscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxscr_hl::Iberr,
        rxscr_hl::Iberr,
        RxscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxscr_hl::Iberr,
            rxscr_hl::Iberr,
            RxscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxscr_hl::Rxovferr,
        rxscr_hl::Rxovferr,
        RxscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxscr_hl::Rxovferr,
            rxscr_hl::Rxovferr,
            RxscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxscrHl {
    #[inline(always)]
    fn default() -> RxscrHl {
        <crate::RegValueT<RxscrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxscr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxscrHh_SPEC;
impl crate::sealed::RegSpec for RxscrHh_SPEC {
    type DataType = u8;
}

pub type RxscrHh = crate::RegValueT<RxscrHh_SPEC>;

impl RxscrHh {
    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxscr_hh::Prtoerr,
        rxscr_hh::Prtoerr,
        RxscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxscr_hh::Prtoerr,
            rxscr_hh::Prtoerr,
            RxscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxscr_hh::Noreserr,
        rxscr_hh::Noreserr,
        RxscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxscr_hh::Noreserr,
            rxscr_hh::Noreserr,
            RxscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxscr_hh::Rsizeerr,
        rxscr_hh::Rsizeerr,
        RxscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxscr_hh::Rsizeerr,
            rxscr_hh::Rsizeerr,
            RxscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxscr_hh::Eccerrs,
        rxscr_hh::Eccerrs,
        RxscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxscr_hh::Eccerrs,
            rxscr_hh::Eccerrs,
            RxscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxscr_hh::Rxake,
        rxscr_hh::Rxake,
        RxscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxscr_hh::Rxake,
            rxscr_hh::Rxake,
            RxscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, RxscrHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, RxscrHh_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for RxscrHh {
    #[inline(always)]
    fn default() -> RxscrHh {
        <crate::RegValueT<RxscrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxscr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxier_SPEC;
impl crate::sealed::RegSpec for Rxier_SPEC {
    type DataType = u32;
}

pub type Rxier = crate::RegValueT<Rxier_SPEC>;

impl Rxier {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxier::Btarend,
        rxier::Btarend,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxier::Btarend,
            rxier::Btarend,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxier::Lrxhto,
        rxier::Lrxhto,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxier::Lrxhto,
            rxier::Lrxhto,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxier::Tato,
        rxier::Tato,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxier::Tato,
            rxier::Tato,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxier::Rxresp,
        rxier::Rxresp,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxier::Rxresp,
            rxier::Rxresp,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxier::Rxeotp,
        rxier::Rxeotp,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxier::Rxeotp,
            rxier::Rxeotp,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        rxier::Rxte,
        rxier::Rxte,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            rxier::Rxte,
            rxier::Rxte,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxier::Rxack,
        rxier::Rxack,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxier::Rxack,
            rxier::Rxack,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rxier::Extedet,
        rxier::Extedet,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rxier::Extedet,
            rxier::Extedet,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        rxier::Mlferr,
        rxier::Mlferr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            rxier::Mlferr,
            rxier::Mlferr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        17,
        0x1,
        1,
        0,
        rxier::Eccerrm,
        rxier::Eccerrm,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            17,
            0x1,
            1,
            0,
            rxier::Eccerrm,
            rxier::Eccerrm,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        18,
        0x1,
        1,
        0,
        rxier::Unexerr,
        rxier::Unexerr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            18,
            0x1,
            1,
            0,
            rxier::Unexerr,
            rxier::Unexerr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        rxier::Wcerr,
        rxier::Wcerr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            rxier::Wcerr,
            rxier::Wcerr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        21,
        0x1,
        1,
        0,
        rxier::Crcerr,
        rxier::Crcerr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            21,
            0x1,
            1,
            0,
            rxier::Crcerr,
            rxier::Crcerr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        rxier::Iberr,
        rxier::Iberr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            rxier::Iberr,
            rxier::Iberr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        23,
        0x1,
        1,
        0,
        rxier::Rxovferr,
        rxier::Rxovferr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            23,
            0x1,
            1,
            0,
            rxier::Rxovferr,
            rxier::Rxovferr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        rxier::Prtoerr,
        rxier::Prtoerr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            rxier::Prtoerr,
            rxier::Prtoerr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        rxier::Noreserr,
        rxier::Noreserr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            rxier::Noreserr,
            rxier::Noreserr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        rxier::Rsizeerr,
        rxier::Rsizeerr,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            rxier::Rsizeerr,
            rxier::Rsizeerr,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        rxier::Eccerrs,
        rxier::Eccerrs,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            rxier::Eccerrs,
            rxier::Eccerrs,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        rxier::Rxake,
        rxier::Rxake,
        Rxier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            rxier::Rxake,
            rxier::Rxake,
            Rxier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Rxier_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31, 1, 0, Rxier_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Rxier {
    #[inline(always)]
    fn default() -> Rxier {
        <crate::RegValueT<Rxier_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxier {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxierL_SPEC;
impl crate::sealed::RegSpec for RxierL_SPEC {
    type DataType = u16;
}

pub type RxierL = crate::RegValueT<RxierL_SPEC>;

impl RxierL {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxier_l::Btarend,
        rxier_l::Btarend,
        RxierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxier_l::Btarend,
            rxier_l::Btarend,
            RxierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxier_l::Lrxhto,
        rxier_l::Lrxhto,
        RxierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxier_l::Lrxhto,
            rxier_l::Lrxhto,
            RxierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxier_l::Tato,
        rxier_l::Tato,
        RxierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxier_l::Tato,
            rxier_l::Tato,
            RxierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxier_l::Rxresp,
        rxier_l::Rxresp,
        RxierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxier_l::Rxresp,
            rxier_l::Rxresp,
            RxierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxier_l::Rxeotp,
        rxier_l::Rxeotp,
        RxierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxier_l::Rxeotp,
            rxier_l::Rxeotp,
            RxierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<12, 1, 0, RxierL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<12, 1, 0, RxierL_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        rxier_l::Rxte,
        rxier_l::Rxte,
        RxierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            rxier_l::Rxte,
            rxier_l::Rxte,
            RxierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxier_l::Rxack,
        rxier_l::Rxack,
        RxierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxier_l::Rxack,
            rxier_l::Rxack,
            RxierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rxier_l::Extedet,
        rxier_l::Extedet,
        RxierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rxier_l::Extedet,
            rxier_l::Extedet,
            RxierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxierL {
    #[inline(always)]
    fn default() -> RxierL {
        <crate::RegValueT<RxierL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxier_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxierLl_SPEC;
impl crate::sealed::RegSpec for RxierLl_SPEC {
    type DataType = u8;
}

pub type RxierLl = crate::RegValueT<RxierLl_SPEC>;

impl RxierLl {
    #[inline(always)]
    pub fn btarend(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxier_ll::Btarend,
        rxier_ll::Btarend,
        RxierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxier_ll::Btarend,
            rxier_ll::Btarend,
            RxierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxier_ll::Lrxhto,
        rxier_ll::Lrxhto,
        RxierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxier_ll::Lrxhto,
            rxier_ll::Lrxhto,
            RxierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxier_ll::Tato,
        rxier_ll::Tato,
        RxierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxier_ll::Tato,
            rxier_ll::Tato,
            RxierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, RxierLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,RxierLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RxierLl {
    #[inline(always)]
    fn default() -> RxierLl {
        <crate::RegValueT<RxierLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxier_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Btarend_SPEC;
    pub type Btarend = crate::EnumBitfieldStruct<u8, Btarend_SPEC>;
    impl Btarend {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxierLh_SPEC;
impl crate::sealed::RegSpec for RxierLh_SPEC {
    type DataType = u8;
}

pub type RxierLh = crate::RegValueT<RxierLh_SPEC>;

impl RxierLh {
    #[inline(always)]
    pub fn rxresp(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxier_lh::Rxresp,
        rxier_lh::Rxresp,
        RxierLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxier_lh::Rxresp,
            rxier_lh::Rxresp,
            RxierLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxeotp(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxier_lh::Rxeotp,
        rxier_lh::Rxeotp,
        RxierLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxier_lh::Rxeotp,
            rxier_lh::Rxeotp,
            RxierLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<4, 1, 0, RxierLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<4, 1, 0, RxierLh_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn rxte(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxier_lh::Rxte,
        rxier_lh::Rxte,
        RxierLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxier_lh::Rxte,
            rxier_lh::Rxte,
            RxierLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxack(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxier_lh::Rxack,
        rxier_lh::Rxack,
        RxierLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxier_lh::Rxack,
            rxier_lh::Rxack,
            RxierLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn extedet(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxier_lh::Extedet,
        rxier_lh::Extedet,
        RxierLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxier_lh::Extedet,
            rxier_lh::Extedet,
            RxierLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxierLh {
    #[inline(always)]
    fn default() -> RxierLh {
        <crate::RegValueT<RxierLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxier_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxresp_SPEC;
    pub type Rxresp = crate::EnumBitfieldStruct<u8, Rxresp_SPEC>;
    impl Rxresp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxeotp_SPEC;
    pub type Rxeotp = crate::EnumBitfieldStruct<u8, Rxeotp_SPEC>;
    impl Rxeotp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxte_SPEC;
    pub type Rxte = crate::EnumBitfieldStruct<u8, Rxte_SPEC>;
    impl Rxte {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxack_SPEC;
    pub type Rxack = crate::EnumBitfieldStruct<u8, Rxack_SPEC>;
    impl Rxack {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Extedet_SPEC;
    pub type Extedet = crate::EnumBitfieldStruct<u8, Extedet_SPEC>;
    impl Extedet {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxierH_SPEC;
impl crate::sealed::RegSpec for RxierH_SPEC {
    type DataType = u16;
}

pub type RxierH = crate::RegValueT<RxierH_SPEC>;

impl RxierH {
    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxier_h::Mlferr,
        rxier_h::Mlferr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxier_h::Mlferr,
            rxier_h::Mlferr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxier_h::Eccerrm,
        rxier_h::Eccerrm,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxier_h::Eccerrm,
            rxier_h::Eccerrm,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxier_h::Unexerr,
        rxier_h::Unexerr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxier_h::Unexerr,
            rxier_h::Unexerr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxier_h::Wcerr,
        rxier_h::Wcerr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxier_h::Wcerr,
            rxier_h::Wcerr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxier_h::Crcerr,
        rxier_h::Crcerr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxier_h::Crcerr,
            rxier_h::Crcerr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxier_h::Iberr,
        rxier_h::Iberr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxier_h::Iberr,
            rxier_h::Iberr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxier_h::Rxovferr,
        rxier_h::Rxovferr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxier_h::Rxovferr,
            rxier_h::Rxovferr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxier_h::Prtoerr,
        rxier_h::Prtoerr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxier_h::Prtoerr,
            rxier_h::Prtoerr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        rxier_h::Noreserr,
        rxier_h::Noreserr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            rxier_h::Noreserr,
            rxier_h::Noreserr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxier_h::Rsizeerr,
        rxier_h::Rsizeerr,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxier_h::Rsizeerr,
            rxier_h::Rsizeerr,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        rxier_h::Eccerrs,
        rxier_h::Eccerrs,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            rxier_h::Eccerrs,
            rxier_h::Eccerrs,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxier_h::Rxake,
        rxier_h::Rxake,
        RxierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxier_h::Rxake,
            rxier_h::Rxake,
            RxierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, RxierH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15, 1, 0, RxierH_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for RxierH {
    #[inline(always)]
    fn default() -> RxierH {
        <crate::RegValueT<RxierH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxier_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxierHl_SPEC;
impl crate::sealed::RegSpec for RxierHl_SPEC {
    type DataType = u8;
}

pub type RxierHl = crate::RegValueT<RxierHl_SPEC>;

impl RxierHl {
    #[inline(always)]
    pub fn mlferr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxier_hl::Mlferr,
        rxier_hl::Mlferr,
        RxierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxier_hl::Mlferr,
            rxier_hl::Mlferr,
            RxierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrm(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxier_hl::Eccerrm,
        rxier_hl::Eccerrm,
        RxierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxier_hl::Eccerrm,
            rxier_hl::Eccerrm,
            RxierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn unexerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxier_hl::Unexerr,
        rxier_hl::Unexerr,
        RxierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxier_hl::Unexerr,
            rxier_hl::Unexerr,
            RxierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<3, 1, 0, RxierHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<3, 1, 0, RxierHl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn wcerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxier_hl::Wcerr,
        rxier_hl::Wcerr,
        RxierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxier_hl::Wcerr,
            rxier_hl::Wcerr,
            RxierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn crcerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxier_hl::Crcerr,
        rxier_hl::Crcerr,
        RxierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxier_hl::Crcerr,
            rxier_hl::Crcerr,
            RxierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn iberr(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxier_hl::Iberr,
        rxier_hl::Iberr,
        RxierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxier_hl::Iberr,
            rxier_hl::Iberr,
            RxierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxovferr(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxier_hl::Rxovferr,
        rxier_hl::Rxovferr,
        RxierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxier_hl::Rxovferr,
            rxier_hl::Rxovferr,
            RxierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxierHl {
    #[inline(always)]
    fn default() -> RxierHl {
        <crate::RegValueT<RxierHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxier_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Mlferr_SPEC;
    pub type Mlferr = crate::EnumBitfieldStruct<u8, Mlferr_SPEC>;
    impl Mlferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrm_SPEC;
    pub type Eccerrm = crate::EnumBitfieldStruct<u8, Eccerrm_SPEC>;
    impl Eccerrm {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Unexerr_SPEC;
    pub type Unexerr = crate::EnumBitfieldStruct<u8, Unexerr_SPEC>;
    impl Unexerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Wcerr_SPEC;
    pub type Wcerr = crate::EnumBitfieldStruct<u8, Wcerr_SPEC>;
    impl Wcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Crcerr_SPEC;
    pub type Crcerr = crate::EnumBitfieldStruct<u8, Crcerr_SPEC>;
    impl Crcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Iberr_SPEC;
    pub type Iberr = crate::EnumBitfieldStruct<u8, Iberr_SPEC>;
    impl Iberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxovferr_SPEC;
    pub type Rxovferr = crate::EnumBitfieldStruct<u8, Rxovferr_SPEC>;
    impl Rxovferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxierHh_SPEC;
impl crate::sealed::RegSpec for RxierHh_SPEC {
    type DataType = u8;
}

pub type RxierHh = crate::RegValueT<RxierHh_SPEC>;

impl RxierHh {
    #[inline(always)]
    pub fn prtoerr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxier_hh::Prtoerr,
        rxier_hh::Prtoerr,
        RxierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxier_hh::Prtoerr,
            rxier_hh::Prtoerr,
            RxierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn noreserr(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxier_hh::Noreserr,
        rxier_hh::Noreserr,
        RxierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxier_hh::Noreserr,
            rxier_hh::Noreserr,
            RxierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rsizeerr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxier_hh::Rsizeerr,
        rxier_hh::Rsizeerr,
        RxierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxier_hh::Rsizeerr,
            rxier_hh::Rsizeerr,
            RxierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn eccerrs(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxier_hh::Eccerrs,
        rxier_hh::Eccerrs,
        RxierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxier_hh::Eccerrs,
            rxier_hh::Eccerrs,
            RxierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxier_hh::Rxake,
        rxier_hh::Rxake,
        RxierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxier_hh::Rxake,
            rxier_hh::Rxake,
            RxierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, RxierHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, RxierHh_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for RxierHh {
    #[inline(always)]
    fn default() -> RxierHh {
        <crate::RegValueT<RxierHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxier_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Prtoerr_SPEC;
    pub type Prtoerr = crate::EnumBitfieldStruct<u8, Prtoerr_SPEC>;
    impl Prtoerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Noreserr_SPEC;
    pub type Noreserr = crate::EnumBitfieldStruct<u8, Noreserr_SPEC>;
    impl Noreserr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rsizeerr_SPEC;
    pub type Rsizeerr = crate::EnumBitfieldStruct<u8, Rsizeerr_SPEC>;
    impl Rsizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Eccerrs_SPEC;
    pub type Eccerrs = crate::EnumBitfieldStruct<u8, Eccerrs_SPEC>;
    impl Eccerrs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Presptobtasetr_SPEC;
impl crate::sealed::RegSpec for Presptobtasetr_SPEC {
    type DataType = u32;
}

pub type Presptobtasetr = crate::RegValueT<Presptobtasetr_SPEC>;

impl Presptobtasetr {
    #[inline(always)]
    pub fn prtbta(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffffffff,
        1,
        0,
        u32,
        u32,
        Presptobtasetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffffffff,
            1,
            0,
            u32,
            u32,
            Presptobtasetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Presptobtasetr {
    #[inline(always)]
    fn default() -> Presptobtasetr {
        <crate::RegValueT<Presptobtasetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Presptolpsetr_SPEC;
impl crate::sealed::RegSpec for Presptolpsetr_SPEC {
    type DataType = u32;
}

pub type Presptolpsetr = crate::RegValueT<Presptolpsetr_SPEC>;

impl Presptolpsetr {
    #[inline(always)]
    pub fn lpwto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffff,
        1,
        0,
        u16,
        u16,
        Presptolpsetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffff,
            1,
            0,
            u16,
            u16,
            Presptolpsetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lprto(
        self,
    ) -> crate::common::RegisterField<
        16,
        0xffff,
        1,
        0,
        u16,
        u16,
        Presptolpsetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0xffff,
            1,
            0,
            u16,
            u16,
            Presptolpsetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Presptolpsetr {
    #[inline(always)]
    fn default() -> Presptolpsetr {
        <crate::RegValueT<Presptolpsetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PresptolpsetrL_SPEC;
impl crate::sealed::RegSpec for PresptolpsetrL_SPEC {
    type DataType = u16;
}

pub type PresptolpsetrL = crate::RegValueT<PresptolpsetrL_SPEC>;

impl PresptolpsetrL {
    #[inline(always)]
    pub fn lpwto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffff,
        1,
        0,
        u16,
        u16,
        PresptolpsetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffff,
            1,
            0,
            u16,
            u16,
            PresptolpsetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for PresptolpsetrL {
    #[inline(always)]
    fn default() -> PresptolpsetrL {
        <crate::RegValueT<PresptolpsetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PresptolpsetrH_SPEC;
impl crate::sealed::RegSpec for PresptolpsetrH_SPEC {
    type DataType = u16;
}

pub type PresptolpsetrH = crate::RegValueT<PresptolpsetrH_SPEC>;

impl PresptolpsetrH {
    #[inline(always)]
    pub fn lprto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffff,
        1,
        0,
        u16,
        u16,
        PresptolpsetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffff,
            1,
            0,
            u16,
            u16,
            PresptolpsetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for PresptolpsetrH {
    #[inline(always)]
    fn default() -> PresptolpsetrH {
        <crate::RegValueT<PresptolpsetrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Presptohssetr_SPEC;
impl crate::sealed::RegSpec for Presptohssetr_SPEC {
    type DataType = u32;
}

pub type Presptohssetr = crate::RegValueT<Presptohssetr_SPEC>;

impl Presptohssetr {
    #[inline(always)]
    pub fn hswto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffff,
        1,
        0,
        u16,
        u16,
        Presptohssetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffff,
            1,
            0,
            u16,
            u16,
            Presptohssetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hsrto(
        self,
    ) -> crate::common::RegisterField<
        16,
        0xffff,
        1,
        0,
        u16,
        u16,
        Presptohssetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0xffff,
            1,
            0,
            u16,
            u16,
            Presptohssetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Presptohssetr {
    #[inline(always)]
    fn default() -> Presptohssetr {
        <crate::RegValueT<Presptohssetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PresptohssetrL_SPEC;
impl crate::sealed::RegSpec for PresptohssetrL_SPEC {
    type DataType = u16;
}

pub type PresptohssetrL = crate::RegValueT<PresptohssetrL_SPEC>;

impl PresptohssetrL {
    #[inline(always)]
    pub fn hswto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffff,
        1,
        0,
        u16,
        u16,
        PresptohssetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffff,
            1,
            0,
            u16,
            u16,
            PresptohssetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for PresptohssetrL {
    #[inline(always)]
    fn default() -> PresptohssetrL {
        <crate::RegValueT<PresptohssetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PresptohssetrH_SPEC;
impl crate::sealed::RegSpec for PresptohssetrH_SPEC {
    type DataType = u16;
}

pub type PresptohssetrH = crate::RegValueT<PresptohssetrH_SPEC>;

impl PresptohssetrH {
    #[inline(always)]
    pub fn hsrto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffff,
        1,
        0,
        u16,
        u16,
        PresptohssetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffff,
            1,
            0,
            u16,
            u16,
            PresptohssetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for PresptohssetrH {
    #[inline(always)]
    fn default() -> PresptohssetrH {
        <crate::RegValueT<PresptohssetrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Akeplatir_SPEC;
impl crate::sealed::RegSpec for Akeplatir_SPEC {
    type DataType = u32;
}

pub type Akeplatir = crate::RegValueT<Akeplatir_SPEC>;

impl Akeplatir {
    #[inline(always)]
    pub fn erep(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, Akeplatir_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,Akeplatir_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<
        16,
        0xf,
        1,
        0,
        akeplatir::Vc,
        akeplatir::Vc,
        Akeplatir_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            16,
            0xf,
            1,
            0,
            akeplatir::Vc,
            akeplatir::Vc,
            Akeplatir_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<20, 0xfff, 1, 0, u16, u16, Akeplatir_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<20,0xfff,1,0,u16,u16,Akeplatir_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Akeplatir {
    #[inline(always)]
    fn default() -> Akeplatir {
        <crate::RegValueT<Akeplatir_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akeplatir {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc_SPEC;
    pub type Vc = crate::EnumBitfieldStruct<u8, Vc_SPEC>;
    impl Vc {
        pub const _0000: Self = Self::new(0);

        pub const _0001: Self = Self::new(1);

        pub const _0010: Self = Self::new(2);

        pub const _0100: Self = Self::new(4);

        pub const _1000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkeplatirL_SPEC;
impl crate::sealed::RegSpec for AkeplatirL_SPEC {
    type DataType = u16;
}

pub type AkeplatirL = crate::RegValueT<AkeplatirL_SPEC>;

impl AkeplatirL {
    #[inline(always)]
    pub fn erep(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, AkeplatirL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,AkeplatirL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkeplatirL {
    #[inline(always)]
    fn default() -> AkeplatirL {
        <crate::RegValueT<AkeplatirL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkeplatirLl_SPEC;
impl crate::sealed::RegSpec for AkeplatirLl_SPEC {
    type DataType = u8;
}

pub type AkeplatirLl = crate::RegValueT<AkeplatirLl_SPEC>;

impl AkeplatirLl {
    #[inline(always)]
    pub fn erep(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, AkeplatirLl_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,AkeplatirLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkeplatirLl {
    #[inline(always)]
    fn default() -> AkeplatirLl {
        <crate::RegValueT<AkeplatirLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkeplatirLh_SPEC;
impl crate::sealed::RegSpec for AkeplatirLh_SPEC {
    type DataType = u8;
}

pub type AkeplatirLh = crate::RegValueT<AkeplatirLh_SPEC>;

impl AkeplatirLh {
    #[inline(always)]
    pub fn erep(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, AkeplatirLh_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,AkeplatirLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkeplatirLh {
    #[inline(always)]
    fn default() -> AkeplatirLh {
        <crate::RegValueT<AkeplatirLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkeplatirH_SPEC;
impl crate::sealed::RegSpec for AkeplatirH_SPEC {
    type DataType = u16;
}

pub type AkeplatirH = crate::RegValueT<AkeplatirH_SPEC>;

impl AkeplatirH {
    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xf,
        1,
        0,
        akeplatir_h::Vc,
        akeplatir_h::Vc,
        AkeplatirH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0xf,
            1,
            0,
            akeplatir_h::Vc,
            akeplatir_h::Vc,
            AkeplatirH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, u16, AkeplatirH_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<4,0xfff,1,0,u16,u16,AkeplatirH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkeplatirH {
    #[inline(always)]
    fn default() -> AkeplatirH {
        <crate::RegValueT<AkeplatirH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akeplatir_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc_SPEC;
    pub type Vc = crate::EnumBitfieldStruct<u8, Vc_SPEC>;
    impl Vc {
        pub const _0000: Self = Self::new(0);

        pub const _0001: Self = Self::new(1);

        pub const _0010: Self = Self::new(2);

        pub const _0100: Self = Self::new(4);

        pub const _1000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkeplatirHl_SPEC;
impl crate::sealed::RegSpec for AkeplatirHl_SPEC {
    type DataType = u8;
}

pub type AkeplatirHl = crate::RegValueT<AkeplatirHl_SPEC>;

impl AkeplatirHl {
    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xf,
        1,
        0,
        akeplatir_hl::Vc,
        akeplatir_hl::Vc,
        AkeplatirHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0xf,
            1,
            0,
            akeplatir_hl::Vc,
            akeplatir_hl::Vc,
            AkeplatirHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, AkeplatirHl_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,AkeplatirHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkeplatirHl {
    #[inline(always)]
    fn default() -> AkeplatirHl {
        <crate::RegValueT<AkeplatirHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akeplatir_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vc_SPEC;
    pub type Vc = crate::EnumBitfieldStruct<u8, Vc_SPEC>;
    impl Vc {
        pub const _0000: Self = Self::new(0);

        pub const _0001: Self = Self::new(1);

        pub const _0010: Self = Self::new(2);

        pub const _0100: Self = Self::new(4);

        pub const _1000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Akepacmsr_SPEC;
impl crate::sealed::RegSpec for Akepacmsr_SPEC {
    type DataType = u32;
}

pub type Akepacmsr = crate::RegValueT<Akepacmsr_SPEC>;

impl Akepacmsr {
    #[inline(always)]
    pub fn aerep(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, Akepacmsr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,Akepacmsr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn avc0(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        akepacmsr::Avc0,
        akepacmsr::Avc0,
        Akepacmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            akepacmsr::Avc0,
            akepacmsr::Avc0,
            Akepacmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc1(
        self,
    ) -> crate::common::RegisterField<
        17,
        0x1,
        1,
        0,
        akepacmsr::Avc1,
        akepacmsr::Avc1,
        Akepacmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            17,
            0x1,
            1,
            0,
            akepacmsr::Avc1,
            akepacmsr::Avc1,
            Akepacmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc2(
        self,
    ) -> crate::common::RegisterField<
        18,
        0x1,
        1,
        0,
        akepacmsr::Avc2,
        akepacmsr::Avc2,
        Akepacmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            18,
            0x1,
            1,
            0,
            akepacmsr::Avc2,
            akepacmsr::Avc2,
            Akepacmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc3(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        akepacmsr::Avc3,
        akepacmsr::Avc3,
        Akepacmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            akepacmsr::Avc3,
            akepacmsr::Avc3,
            Akepacmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<20, 0xfff, 1, 0, u16, u16, Akepacmsr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<20,0xfff,1,0,u16,u16,Akepacmsr_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Akepacmsr {
    #[inline(always)]
    fn default() -> Akepacmsr {
        <crate::RegValueT<Akepacmsr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepacmsr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc0_SPEC;
    pub type Avc0 = crate::EnumBitfieldStruct<u8, Avc0_SPEC>;
    impl Avc0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc1_SPEC;
    pub type Avc1 = crate::EnumBitfieldStruct<u8, Avc1_SPEC>;
    impl Avc1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc2_SPEC;
    pub type Avc2 = crate::EnumBitfieldStruct<u8, Avc2_SPEC>;
    impl Avc2 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc3_SPEC;
    pub type Avc3 = crate::EnumBitfieldStruct<u8, Avc3_SPEC>;
    impl Avc3 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepacmsrL_SPEC;
impl crate::sealed::RegSpec for AkepacmsrL_SPEC {
    type DataType = u16;
}

pub type AkepacmsrL = crate::RegValueT<AkepacmsrL_SPEC>;

impl AkepacmsrL {
    #[inline(always)]
    pub fn aerep(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, AkepacmsrL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,AkepacmsrL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkepacmsrL {
    #[inline(always)]
    fn default() -> AkepacmsrL {
        <crate::RegValueT<AkepacmsrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepacmsrLl_SPEC;
impl crate::sealed::RegSpec for AkepacmsrLl_SPEC {
    type DataType = u8;
}

pub type AkepacmsrLl = crate::RegValueT<AkepacmsrLl_SPEC>;

impl AkepacmsrLl {
    #[inline(always)]
    pub fn aerep(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, AkepacmsrLl_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,AkepacmsrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkepacmsrLl {
    #[inline(always)]
    fn default() -> AkepacmsrLl {
        <crate::RegValueT<AkepacmsrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepacmsrLh_SPEC;
impl crate::sealed::RegSpec for AkepacmsrLh_SPEC {
    type DataType = u8;
}

pub type AkepacmsrLh = crate::RegValueT<AkepacmsrLh_SPEC>;

impl AkepacmsrLh {
    #[inline(always)]
    pub fn aerep(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, AkepacmsrLh_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,AkepacmsrLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkepacmsrLh {
    #[inline(always)]
    fn default() -> AkepacmsrLh {
        <crate::RegValueT<AkepacmsrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepacmsrH_SPEC;
impl crate::sealed::RegSpec for AkepacmsrH_SPEC {
    type DataType = u16;
}

pub type AkepacmsrH = crate::RegValueT<AkepacmsrH_SPEC>;

impl AkepacmsrH {
    #[inline(always)]
    pub fn avc0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        akepacmsr_h::Avc0,
        akepacmsr_h::Avc0,
        AkepacmsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            akepacmsr_h::Avc0,
            akepacmsr_h::Avc0,
            AkepacmsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc1(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        akepacmsr_h::Avc1,
        akepacmsr_h::Avc1,
        AkepacmsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            akepacmsr_h::Avc1,
            akepacmsr_h::Avc1,
            AkepacmsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc2(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        akepacmsr_h::Avc2,
        akepacmsr_h::Avc2,
        AkepacmsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            akepacmsr_h::Avc2,
            akepacmsr_h::Avc2,
            AkepacmsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc3(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        akepacmsr_h::Avc3,
        akepacmsr_h::Avc3,
        AkepacmsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            akepacmsr_h::Avc3,
            akepacmsr_h::Avc3,
            AkepacmsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, u16, AkepacmsrH_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<4,0xfff,1,0,u16,u16,AkepacmsrH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkepacmsrH {
    #[inline(always)]
    fn default() -> AkepacmsrH {
        <crate::RegValueT<AkepacmsrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepacmsr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc0_SPEC;
    pub type Avc0 = crate::EnumBitfieldStruct<u8, Avc0_SPEC>;
    impl Avc0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc1_SPEC;
    pub type Avc1 = crate::EnumBitfieldStruct<u8, Avc1_SPEC>;
    impl Avc1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc2_SPEC;
    pub type Avc2 = crate::EnumBitfieldStruct<u8, Avc2_SPEC>;
    impl Avc2 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc3_SPEC;
    pub type Avc3 = crate::EnumBitfieldStruct<u8, Avc3_SPEC>;
    impl Avc3 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepacmsrHl_SPEC;
impl crate::sealed::RegSpec for AkepacmsrHl_SPEC {
    type DataType = u8;
}

pub type AkepacmsrHl = crate::RegValueT<AkepacmsrHl_SPEC>;

impl AkepacmsrHl {
    #[inline(always)]
    pub fn avc0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        akepacmsr_hl::Avc0,
        akepacmsr_hl::Avc0,
        AkepacmsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            akepacmsr_hl::Avc0,
            akepacmsr_hl::Avc0,
            AkepacmsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc1(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        akepacmsr_hl::Avc1,
        akepacmsr_hl::Avc1,
        AkepacmsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            akepacmsr_hl::Avc1,
            akepacmsr_hl::Avc1,
            AkepacmsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc2(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        akepacmsr_hl::Avc2,
        akepacmsr_hl::Avc2,
        AkepacmsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            akepacmsr_hl::Avc2,
            akepacmsr_hl::Avc2,
            AkepacmsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc3(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        akepacmsr_hl::Avc3,
        akepacmsr_hl::Avc3,
        AkepacmsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            akepacmsr_hl::Avc3,
            akepacmsr_hl::Avc3,
            AkepacmsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, AkepacmsrHl_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,AkepacmsrHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for AkepacmsrHl {
    #[inline(always)]
    fn default() -> AkepacmsrHl {
        <crate::RegValueT<AkepacmsrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepacmsr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc0_SPEC;
    pub type Avc0 = crate::EnumBitfieldStruct<u8, Avc0_SPEC>;
    impl Avc0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc1_SPEC;
    pub type Avc1 = crate::EnumBitfieldStruct<u8, Avc1_SPEC>;
    impl Avc1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc2_SPEC;
    pub type Avc2 = crate::EnumBitfieldStruct<u8, Avc2_SPEC>;
    impl Avc2 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc3_SPEC;
    pub type Avc3 = crate::EnumBitfieldStruct<u8, Avc3_SPEC>;
    impl Avc3 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Akepscr_SPEC;
impl crate::sealed::RegSpec for Akepscr_SPEC {
    type DataType = u32;
}

pub type Akepscr = crate::RegValueT<Akepscr_SPEC>;

impl Akepscr {
    #[inline(always)]
    pub fn aerep(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffff,
        1,
        0,
        akepscr::Aerep,
        akepscr::Aerep,
        Akepscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffff,
            1,
            0,
            akepscr::Aerep,
            akepscr::Aerep,
            Akepscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc0(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        akepscr::Avc0,
        akepscr::Avc0,
        Akepscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            akepscr::Avc0,
            akepscr::Avc0,
            Akepscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc1(
        self,
    ) -> crate::common::RegisterField<
        17,
        0x1,
        1,
        0,
        akepscr::Avc1,
        akepscr::Avc1,
        Akepscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            17,
            0x1,
            1,
            0,
            akepscr::Avc1,
            akepscr::Avc1,
            Akepscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc2(
        self,
    ) -> crate::common::RegisterField<
        18,
        0x1,
        1,
        0,
        akepscr::Avc2,
        akepscr::Avc2,
        Akepscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            18,
            0x1,
            1,
            0,
            akepscr::Avc2,
            akepscr::Avc2,
            Akepscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc3(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        akepscr::Avc3,
        akepscr::Avc3,
        Akepscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            akepscr::Avc3,
            akepscr::Avc3,
            Akepscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<20, 0xfff, 1, 0, u16, u16, Akepscr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<20,0xfff,1,0,u16,u16,Akepscr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Akepscr {
    #[inline(always)]
    fn default() -> Akepscr {
        <crate::RegValueT<Akepscr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepscr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aerep_SPEC;
    pub type Aerep = crate::EnumBitfieldStruct<u8, Aerep_SPEC>;
    impl Aerep {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc0_SPEC;
    pub type Avc0 = crate::EnumBitfieldStruct<u8, Avc0_SPEC>;
    impl Avc0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc1_SPEC;
    pub type Avc1 = crate::EnumBitfieldStruct<u8, Avc1_SPEC>;
    impl Avc1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc2_SPEC;
    pub type Avc2 = crate::EnumBitfieldStruct<u8, Avc2_SPEC>;
    impl Avc2 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc3_SPEC;
    pub type Avc3 = crate::EnumBitfieldStruct<u8, Avc3_SPEC>;
    impl Avc3 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepscrL_SPEC;
impl crate::sealed::RegSpec for AkepscrL_SPEC {
    type DataType = u16;
}

pub type AkepscrL = crate::RegValueT<AkepscrL_SPEC>;

impl AkepscrL {
    #[inline(always)]
    pub fn aerep(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffff,
        1,
        0,
        akepscr_l::Aerep,
        akepscr_l::Aerep,
        AkepscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffff,
            1,
            0,
            akepscr_l::Aerep,
            akepscr_l::Aerep,
            AkepscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for AkepscrL {
    #[inline(always)]
    fn default() -> AkepscrL {
        <crate::RegValueT<AkepscrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepscr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aerep_SPEC;
    pub type Aerep = crate::EnumBitfieldStruct<u8, Aerep_SPEC>;
    impl Aerep {
        pub const _0: Self = Self::new(0);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepscrLl_SPEC;
impl crate::sealed::RegSpec for AkepscrLl_SPEC {
    type DataType = u8;
}

pub type AkepscrLl = crate::RegValueT<AkepscrLl_SPEC>;

impl AkepscrLl {
    #[inline(always)]
    pub fn aerep(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        akepscr_ll::Aerep,
        akepscr_ll::Aerep,
        AkepscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            akepscr_ll::Aerep,
            akepscr_ll::Aerep,
            AkepscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for AkepscrLl {
    #[inline(always)]
    fn default() -> AkepscrLl {
        <crate::RegValueT<AkepscrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepscr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aerep_SPEC;
    pub type Aerep = crate::EnumBitfieldStruct<u8, Aerep_SPEC>;
    impl Aerep {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepscrLh_SPEC;
impl crate::sealed::RegSpec for AkepscrLh_SPEC {
    type DataType = u8;
}

pub type AkepscrLh = crate::RegValueT<AkepscrLh_SPEC>;

impl AkepscrLh {
    #[inline(always)]
    pub fn aerep(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        akepscr_lh::Aerep,
        akepscr_lh::Aerep,
        AkepscrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            akepscr_lh::Aerep,
            akepscr_lh::Aerep,
            AkepscrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for AkepscrLh {
    #[inline(always)]
    fn default() -> AkepscrLh {
        <crate::RegValueT<AkepscrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepscr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aerep_SPEC;
    pub type Aerep = crate::EnumBitfieldStruct<u8, Aerep_SPEC>;
    impl Aerep {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepscrH_SPEC;
impl crate::sealed::RegSpec for AkepscrH_SPEC {
    type DataType = u16;
}

pub type AkepscrH = crate::RegValueT<AkepscrH_SPEC>;

impl AkepscrH {
    #[inline(always)]
    pub fn avc0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        akepscr_h::Avc0,
        akepscr_h::Avc0,
        AkepscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            akepscr_h::Avc0,
            akepscr_h::Avc0,
            AkepscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc1(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        akepscr_h::Avc1,
        akepscr_h::Avc1,
        AkepscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            akepscr_h::Avc1,
            akepscr_h::Avc1,
            AkepscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc2(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        akepscr_h::Avc2,
        akepscr_h::Avc2,
        AkepscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            akepscr_h::Avc2,
            akepscr_h::Avc2,
            AkepscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc3(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        akepscr_h::Avc3,
        akepscr_h::Avc3,
        AkepscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            akepscr_h::Avc3,
            akepscr_h::Avc3,
            AkepscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, u16, AkepscrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xfff,1,0,u16,u16,AkepscrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AkepscrH {
    #[inline(always)]
    fn default() -> AkepscrH {
        <crate::RegValueT<AkepscrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepscr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc0_SPEC;
    pub type Avc0 = crate::EnumBitfieldStruct<u8, Avc0_SPEC>;
    impl Avc0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc1_SPEC;
    pub type Avc1 = crate::EnumBitfieldStruct<u8, Avc1_SPEC>;
    impl Avc1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc2_SPEC;
    pub type Avc2 = crate::EnumBitfieldStruct<u8, Avc2_SPEC>;
    impl Avc2 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc3_SPEC;
    pub type Avc3 = crate::EnumBitfieldStruct<u8, Avc3_SPEC>;
    impl Avc3 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct AkepscrHl_SPEC;
impl crate::sealed::RegSpec for AkepscrHl_SPEC {
    type DataType = u8;
}

pub type AkepscrHl = crate::RegValueT<AkepscrHl_SPEC>;

impl AkepscrHl {
    #[inline(always)]
    pub fn avc0(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        akepscr_hl::Avc0,
        akepscr_hl::Avc0,
        AkepscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            akepscr_hl::Avc0,
            akepscr_hl::Avc0,
            AkepscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc1(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        akepscr_hl::Avc1,
        akepscr_hl::Avc1,
        AkepscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            akepscr_hl::Avc1,
            akepscr_hl::Avc1,
            AkepscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc2(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        akepscr_hl::Avc2,
        akepscr_hl::Avc2,
        AkepscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            akepscr_hl::Avc2,
            akepscr_hl::Avc2,
            AkepscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn avc3(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        akepscr_hl::Avc3,
        akepscr_hl::Avc3,
        AkepscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            akepscr_hl::Avc3,
            akepscr_hl::Avc3,
            AkepscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, AkepscrHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,AkepscrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for AkepscrHl {
    #[inline(always)]
    fn default() -> AkepscrHl {
        <crate::RegValueT<AkepscrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod akepscr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc0_SPEC;
    pub type Avc0 = crate::EnumBitfieldStruct<u8, Avc0_SPEC>;
    impl Avc0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc1_SPEC;
    pub type Avc1 = crate::EnumBitfieldStruct<u8, Avc1_SPEC>;
    impl Avc1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc2_SPEC;
    pub type Avc2 = crate::EnumBitfieldStruct<u8, Avc2_SPEC>;
    impl Avc2 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Avc3_SPEC;
    pub type Avc3 = crate::EnumBitfieldStruct<u8, Avc3_SPEC>;
    impl Avc3 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxrsscr_SPEC;
impl crate::sealed::RegSpec for Rxrsscr_SPEC {
    type DataType = u32;
}

pub type Rxrsscr = crate::RegValueT<Rxrsscr_SPEC>;

impl Rxrsscr {
    #[inline(always)]
    pub fn slt0vld(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrsscr::Slt0Vld,
        rxrsscr::Slt0Vld,
        Rxrsscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrsscr::Slt0Vld,
            rxrsscr::Slt0Vld,
            Rxrsscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt1vld(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrsscr::Slt1Vld,
        rxrsscr::Slt1Vld,
        Rxrsscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrsscr::Slt1Vld,
            rxrsscr::Slt1Vld,
            Rxrsscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt2vld(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrsscr::Slt2Vld,
        rxrsscr::Slt2Vld,
        Rxrsscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrsscr::Slt2Vld,
            rxrsscr::Slt2Vld,
            Rxrsscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt3vld(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrsscr::Slt3Vld,
        rxrsscr::Slt3Vld,
        Rxrsscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrsscr::Slt3Vld,
            rxrsscr::Slt3Vld,
            Rxrsscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<25, 0x7f, 1, 0, u8, u8, Rxrsscr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<25,0x7f,1,0,u8,u8,Rxrsscr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxrsscr {
    #[inline(always)]
    fn default() -> Rxrsscr {
        <crate::RegValueT<Rxrsscr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrsscr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt0Vld_SPEC;
    pub type Slt0Vld = crate::EnumBitfieldStruct<u8, Slt0Vld_SPEC>;
    impl Slt0Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt1Vld_SPEC;
    pub type Slt1Vld = crate::EnumBitfieldStruct<u8, Slt1Vld_SPEC>;
    impl Slt1Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt2Vld_SPEC;
    pub type Slt2Vld = crate::EnumBitfieldStruct<u8, Slt2Vld_SPEC>;
    impl Slt2Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt3Vld_SPEC;
    pub type Slt3Vld = crate::EnumBitfieldStruct<u8, Slt3Vld_SPEC>;
    impl Slt3Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrsscrL_SPEC;
impl crate::sealed::RegSpec for RxrsscrL_SPEC {
    type DataType = u16;
}

pub type RxrsscrL = crate::RegValueT<RxrsscrL_SPEC>;

impl RxrsscrL {
    #[inline(always)]
    pub fn slt0vld(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrsscr_l::Slt0Vld,
        rxrsscr_l::Slt0Vld,
        RxrsscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrsscr_l::Slt0Vld,
            rxrsscr_l::Slt0Vld,
            RxrsscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt1vld(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrsscr_l::Slt1Vld,
        rxrsscr_l::Slt1Vld,
        RxrsscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrsscr_l::Slt1Vld,
            rxrsscr_l::Slt1Vld,
            RxrsscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt2vld(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrsscr_l::Slt2Vld,
        rxrsscr_l::Slt2Vld,
        RxrsscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrsscr_l::Slt2Vld,
            rxrsscr_l::Slt2Vld,
            RxrsscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt3vld(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrsscr_l::Slt3Vld,
        rxrsscr_l::Slt3Vld,
        RxrsscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrsscr_l::Slt3Vld,
            rxrsscr_l::Slt3Vld,
            RxrsscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, u16, RxrsscrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xfff,1,0,u16,u16,RxrsscrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrsscrL {
    #[inline(always)]
    fn default() -> RxrsscrL {
        <crate::RegValueT<RxrsscrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrsscr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt0Vld_SPEC;
    pub type Slt0Vld = crate::EnumBitfieldStruct<u8, Slt0Vld_SPEC>;
    impl Slt0Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt1Vld_SPEC;
    pub type Slt1Vld = crate::EnumBitfieldStruct<u8, Slt1Vld_SPEC>;
    impl Slt1Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt2Vld_SPEC;
    pub type Slt2Vld = crate::EnumBitfieldStruct<u8, Slt2Vld_SPEC>;
    impl Slt2Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt3Vld_SPEC;
    pub type Slt3Vld = crate::EnumBitfieldStruct<u8, Slt3Vld_SPEC>;
    impl Slt3Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrsscrLl_SPEC;
impl crate::sealed::RegSpec for RxrsscrLl_SPEC {
    type DataType = u8;
}

pub type RxrsscrLl = crate::RegValueT<RxrsscrLl_SPEC>;

impl RxrsscrLl {
    #[inline(always)]
    pub fn slt0vld(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrsscr_ll::Slt0Vld,
        rxrsscr_ll::Slt0Vld,
        RxrsscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrsscr_ll::Slt0Vld,
            rxrsscr_ll::Slt0Vld,
            RxrsscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt1vld(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrsscr_ll::Slt1Vld,
        rxrsscr_ll::Slt1Vld,
        RxrsscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrsscr_ll::Slt1Vld,
            rxrsscr_ll::Slt1Vld,
            RxrsscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt2vld(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrsscr_ll::Slt2Vld,
        rxrsscr_ll::Slt2Vld,
        RxrsscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrsscr_ll::Slt2Vld,
            rxrsscr_ll::Slt2Vld,
            RxrsscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn slt3vld(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrsscr_ll::Slt3Vld,
        rxrsscr_ll::Slt3Vld,
        RxrsscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrsscr_ll::Slt3Vld,
            rxrsscr_ll::Slt3Vld,
            RxrsscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, RxrsscrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,RxrsscrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrsscrLl {
    #[inline(always)]
    fn default() -> RxrsscrLl {
        <crate::RegValueT<RxrsscrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrsscr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt0Vld_SPEC;
    pub type Slt0Vld = crate::EnumBitfieldStruct<u8, Slt0Vld_SPEC>;
    impl Slt0Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt1Vld_SPEC;
    pub type Slt1Vld = crate::EnumBitfieldStruct<u8, Slt1Vld_SPEC>;
    impl Slt1Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt2Vld_SPEC;
    pub type Slt2Vld = crate::EnumBitfieldStruct<u8, Slt2Vld_SPEC>;
    impl Slt2Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Slt3Vld_SPEC;
    pub type Slt3Vld = crate::EnumBitfieldStruct<u8, Slt3Vld_SPEC>;
    impl Slt3Vld {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrsscrH_SPEC;
impl crate::sealed::RegSpec for RxrsscrH_SPEC {
    type DataType = u16;
}

pub type RxrsscrH = crate::RegValueT<RxrsscrH_SPEC>;

impl RxrsscrH {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, u8, RxrsscrH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<9,0x7f,1,0,u8,u8,RxrsscrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrsscrH {
    #[inline(always)]
    fn default() -> RxrsscrH {
        <crate::RegValueT<RxrsscrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrsscrHh_SPEC;
impl crate::sealed::RegSpec for RxrsscrHh_SPEC {
    type DataType = u8;
}

pub type RxrsscrHh = crate::RegValueT<RxrsscrHh_SPEC>;

impl RxrsscrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, u8, RxrsscrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x7f,1,0,u8,u8,RxrsscrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrsscrHh {
    #[inline(always)]
    fn default() -> RxrsscrHh {
        <crate::RegValueT<RxrsscrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxrinfoowsr_SPEC;
impl crate::sealed::RegSpec for Rxrinfoowsr_SPEC {
    type DataType = u32;
}

pub type Rxrinfoowsr = crate::RegValueT<Rxrinfoowsr_SPEC>;

impl Rxrinfoowsr {
    #[inline(always)]
    pub fn sl0ow(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrinfoowsr::Sl0Ow,
        rxrinfoowsr::Sl0Ow,
        Rxrinfoowsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrinfoowsr::Sl0Ow,
            rxrinfoowsr::Sl0Ow,
            Rxrinfoowsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl1ow(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrinfoowsr::Sl1Ow,
        rxrinfoowsr::Sl1Ow,
        Rxrinfoowsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrinfoowsr::Sl1Ow,
            rxrinfoowsr::Sl1Ow,
            Rxrinfoowsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl2ow(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrinfoowsr::Sl2Ow,
        rxrinfoowsr::Sl2Ow,
        Rxrinfoowsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrinfoowsr::Sl2Ow,
            rxrinfoowsr::Sl2Ow,
            Rxrinfoowsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl3ow(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrinfoowsr::Sl3Ow,
        rxrinfoowsr::Sl3Ow,
        Rxrinfoowsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrinfoowsr::Sl3Ow,
            rxrinfoowsr::Sl3Ow,
            Rxrinfoowsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<25, 0x7f, 1, 0, u8, u8, Rxrinfoowsr_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<25,0x7f,1,0,u8,u8,Rxrinfoowsr_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxrinfoowsr {
    #[inline(always)]
    fn default() -> Rxrinfoowsr {
        <crate::RegValueT<Rxrinfoowsr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrinfoowsr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl0Ow_SPEC;
    pub type Sl0Ow = crate::EnumBitfieldStruct<u8, Sl0Ow_SPEC>;
    impl Sl0Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl1Ow_SPEC;
    pub type Sl1Ow = crate::EnumBitfieldStruct<u8, Sl1Ow_SPEC>;
    impl Sl1Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl2Ow_SPEC;
    pub type Sl2Ow = crate::EnumBitfieldStruct<u8, Sl2Ow_SPEC>;
    impl Sl2Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl3Ow_SPEC;
    pub type Sl3Ow = crate::EnumBitfieldStruct<u8, Sl3Ow_SPEC>;
    impl Sl3Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrinfoowsrL_SPEC;
impl crate::sealed::RegSpec for RxrinfoowsrL_SPEC {
    type DataType = u16;
}

pub type RxrinfoowsrL = crate::RegValueT<RxrinfoowsrL_SPEC>;

impl RxrinfoowsrL {
    #[inline(always)]
    pub fn sl0ow(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrinfoowsr_l::Sl0Ow,
        rxrinfoowsr_l::Sl0Ow,
        RxrinfoowsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrinfoowsr_l::Sl0Ow,
            rxrinfoowsr_l::Sl0Ow,
            RxrinfoowsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl1ow(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrinfoowsr_l::Sl1Ow,
        rxrinfoowsr_l::Sl1Ow,
        RxrinfoowsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrinfoowsr_l::Sl1Ow,
            rxrinfoowsr_l::Sl1Ow,
            RxrinfoowsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl2ow(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrinfoowsr_l::Sl2Ow,
        rxrinfoowsr_l::Sl2Ow,
        RxrinfoowsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrinfoowsr_l::Sl2Ow,
            rxrinfoowsr_l::Sl2Ow,
            RxrinfoowsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl3ow(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrinfoowsr_l::Sl3Ow,
        rxrinfoowsr_l::Sl3Ow,
        RxrinfoowsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrinfoowsr_l::Sl3Ow,
            rxrinfoowsr_l::Sl3Ow,
            RxrinfoowsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, u16, RxrinfoowsrL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<4,0xfff,1,0,u16,u16,RxrinfoowsrL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrinfoowsrL {
    #[inline(always)]
    fn default() -> RxrinfoowsrL {
        <crate::RegValueT<RxrinfoowsrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrinfoowsr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl0Ow_SPEC;
    pub type Sl0Ow = crate::EnumBitfieldStruct<u8, Sl0Ow_SPEC>;
    impl Sl0Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl1Ow_SPEC;
    pub type Sl1Ow = crate::EnumBitfieldStruct<u8, Sl1Ow_SPEC>;
    impl Sl1Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl2Ow_SPEC;
    pub type Sl2Ow = crate::EnumBitfieldStruct<u8, Sl2Ow_SPEC>;
    impl Sl2Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl3Ow_SPEC;
    pub type Sl3Ow = crate::EnumBitfieldStruct<u8, Sl3Ow_SPEC>;
    impl Sl3Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrinfoowsrLl_SPEC;
impl crate::sealed::RegSpec for RxrinfoowsrLl_SPEC {
    type DataType = u8;
}

pub type RxrinfoowsrLl = crate::RegValueT<RxrinfoowsrLl_SPEC>;

impl RxrinfoowsrLl {
    #[inline(always)]
    pub fn sl0ow(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrinfoowsr_ll::Sl0Ow,
        rxrinfoowsr_ll::Sl0Ow,
        RxrinfoowsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrinfoowsr_ll::Sl0Ow,
            rxrinfoowsr_ll::Sl0Ow,
            RxrinfoowsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl1ow(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrinfoowsr_ll::Sl1Ow,
        rxrinfoowsr_ll::Sl1Ow,
        RxrinfoowsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrinfoowsr_ll::Sl1Ow,
            rxrinfoowsr_ll::Sl1Ow,
            RxrinfoowsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl2ow(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrinfoowsr_ll::Sl2Ow,
        rxrinfoowsr_ll::Sl2Ow,
        RxrinfoowsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrinfoowsr_ll::Sl2Ow,
            rxrinfoowsr_ll::Sl2Ow,
            RxrinfoowsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl3ow(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrinfoowsr_ll::Sl3Ow,
        rxrinfoowsr_ll::Sl3Ow,
        RxrinfoowsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrinfoowsr_ll::Sl3Ow,
            rxrinfoowsr_ll::Sl3Ow,
            RxrinfoowsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, RxrinfoowsrLl_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,RxrinfoowsrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrinfoowsrLl {
    #[inline(always)]
    fn default() -> RxrinfoowsrLl {
        <crate::RegValueT<RxrinfoowsrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrinfoowsr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl0Ow_SPEC;
    pub type Sl0Ow = crate::EnumBitfieldStruct<u8, Sl0Ow_SPEC>;
    impl Sl0Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl1Ow_SPEC;
    pub type Sl1Ow = crate::EnumBitfieldStruct<u8, Sl1Ow_SPEC>;
    impl Sl1Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl2Ow_SPEC;
    pub type Sl2Ow = crate::EnumBitfieldStruct<u8, Sl2Ow_SPEC>;
    impl Sl2Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl3Ow_SPEC;
    pub type Sl3Ow = crate::EnumBitfieldStruct<u8, Sl3Ow_SPEC>;
    impl Sl3Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrinfoowsrH_SPEC;
impl crate::sealed::RegSpec for RxrinfoowsrH_SPEC {
    type DataType = u16;
}

pub type RxrinfoowsrH = crate::RegValueT<RxrinfoowsrH_SPEC>;

impl RxrinfoowsrH {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, u8, RxrinfoowsrH_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<9,0x7f,1,0,u8,u8,RxrinfoowsrH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrinfoowsrH {
    #[inline(always)]
    fn default() -> RxrinfoowsrH {
        <crate::RegValueT<RxrinfoowsrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrinfoowsrHh_SPEC;
impl crate::sealed::RegSpec for RxrinfoowsrHh_SPEC {
    type DataType = u8;
}

pub type RxrinfoowsrHh = crate::RegValueT<RxrinfoowsrHh_SPEC>;

impl RxrinfoowsrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, u8, RxrinfoowsrHh_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<1,0x7f,1,0,u8,u8,RxrinfoowsrHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrinfoowsrHh {
    #[inline(always)]
    fn default() -> RxrinfoowsrHh {
        <crate::RegValueT<RxrinfoowsrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxrinfoowscr_SPEC;
impl crate::sealed::RegSpec for Rxrinfoowscr_SPEC {
    type DataType = u32;
}

pub type Rxrinfoowscr = crate::RegValueT<Rxrinfoowscr_SPEC>;

impl Rxrinfoowscr {
    #[inline(always)]
    pub fn sl0ow(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrinfoowscr::Sl0Ow,
        rxrinfoowscr::Sl0Ow,
        Rxrinfoowscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrinfoowscr::Sl0Ow,
            rxrinfoowscr::Sl0Ow,
            Rxrinfoowscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl1ow(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrinfoowscr::Sl1Ow,
        rxrinfoowscr::Sl1Ow,
        Rxrinfoowscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrinfoowscr::Sl1Ow,
            rxrinfoowscr::Sl1Ow,
            Rxrinfoowscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl2ow(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrinfoowscr::Sl2Ow,
        rxrinfoowscr::Sl2Ow,
        Rxrinfoowscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrinfoowscr::Sl2Ow,
            rxrinfoowscr::Sl2Ow,
            Rxrinfoowscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl3ow(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrinfoowscr::Sl3Ow,
        rxrinfoowscr::Sl3Ow,
        Rxrinfoowscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrinfoowscr::Sl3Ow,
            rxrinfoowscr::Sl3Ow,
            Rxrinfoowscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<25, 0x7f, 1, 0, u8, u8, Rxrinfoowscr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<25,0x7f,1,0,u8,u8,Rxrinfoowscr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxrinfoowscr {
    #[inline(always)]
    fn default() -> Rxrinfoowscr {
        <crate::RegValueT<Rxrinfoowscr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrinfoowscr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl0Ow_SPEC;
    pub type Sl0Ow = crate::EnumBitfieldStruct<u8, Sl0Ow_SPEC>;
    impl Sl0Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl1Ow_SPEC;
    pub type Sl1Ow = crate::EnumBitfieldStruct<u8, Sl1Ow_SPEC>;
    impl Sl1Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl2Ow_SPEC;
    pub type Sl2Ow = crate::EnumBitfieldStruct<u8, Sl2Ow_SPEC>;
    impl Sl2Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl3Ow_SPEC;
    pub type Sl3Ow = crate::EnumBitfieldStruct<u8, Sl3Ow_SPEC>;
    impl Sl3Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrinfoowscrL_SPEC;
impl crate::sealed::RegSpec for RxrinfoowscrL_SPEC {
    type DataType = u16;
}

pub type RxrinfoowscrL = crate::RegValueT<RxrinfoowscrL_SPEC>;

impl RxrinfoowscrL {
    #[inline(always)]
    pub fn sl0ow(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrinfoowscr_l::Sl0Ow,
        rxrinfoowscr_l::Sl0Ow,
        RxrinfoowscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrinfoowscr_l::Sl0Ow,
            rxrinfoowscr_l::Sl0Ow,
            RxrinfoowscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl1ow(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrinfoowscr_l::Sl1Ow,
        rxrinfoowscr_l::Sl1Ow,
        RxrinfoowscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrinfoowscr_l::Sl1Ow,
            rxrinfoowscr_l::Sl1Ow,
            RxrinfoowscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl2ow(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrinfoowscr_l::Sl2Ow,
        rxrinfoowscr_l::Sl2Ow,
        RxrinfoowscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrinfoowscr_l::Sl2Ow,
            rxrinfoowscr_l::Sl2Ow,
            RxrinfoowscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl3ow(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrinfoowscr_l::Sl3Ow,
        rxrinfoowscr_l::Sl3Ow,
        RxrinfoowscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrinfoowscr_l::Sl3Ow,
            rxrinfoowscr_l::Sl3Ow,
            RxrinfoowscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xfff, 1, 0, u16, u16, RxrinfoowscrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            4,
            0xfff,
            1,
            0,
            u16,
            u16,
            RxrinfoowscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxrinfoowscrL {
    #[inline(always)]
    fn default() -> RxrinfoowscrL {
        <crate::RegValueT<RxrinfoowscrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrinfoowscr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl0Ow_SPEC;
    pub type Sl0Ow = crate::EnumBitfieldStruct<u8, Sl0Ow_SPEC>;
    impl Sl0Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl1Ow_SPEC;
    pub type Sl1Ow = crate::EnumBitfieldStruct<u8, Sl1Ow_SPEC>;
    impl Sl1Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl2Ow_SPEC;
    pub type Sl2Ow = crate::EnumBitfieldStruct<u8, Sl2Ow_SPEC>;
    impl Sl2Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl3Ow_SPEC;
    pub type Sl3Ow = crate::EnumBitfieldStruct<u8, Sl3Ow_SPEC>;
    impl Sl3Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrinfoowscrLl_SPEC;
impl crate::sealed::RegSpec for RxrinfoowscrLl_SPEC {
    type DataType = u8;
}

pub type RxrinfoowscrLl = crate::RegValueT<RxrinfoowscrLl_SPEC>;

impl RxrinfoowscrLl {
    #[inline(always)]
    pub fn sl0ow(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrinfoowscr_ll::Sl0Ow,
        rxrinfoowscr_ll::Sl0Ow,
        RxrinfoowscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrinfoowscr_ll::Sl0Ow,
            rxrinfoowscr_ll::Sl0Ow,
            RxrinfoowscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl1ow(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrinfoowscr_ll::Sl1Ow,
        rxrinfoowscr_ll::Sl1Ow,
        RxrinfoowscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrinfoowscr_ll::Sl1Ow,
            rxrinfoowscr_ll::Sl1Ow,
            RxrinfoowscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl2ow(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrinfoowscr_ll::Sl2Ow,
        rxrinfoowscr_ll::Sl2Ow,
        RxrinfoowscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrinfoowscr_ll::Sl2Ow,
            rxrinfoowscr_ll::Sl2Ow,
            RxrinfoowscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sl3ow(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrinfoowscr_ll::Sl3Ow,
        rxrinfoowscr_ll::Sl3Ow,
        RxrinfoowscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrinfoowscr_ll::Sl3Ow,
            rxrinfoowscr_ll::Sl3Ow,
            RxrinfoowscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, RxrinfoowscrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,RxrinfoowscrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrinfoowscrLl {
    #[inline(always)]
    fn default() -> RxrinfoowscrLl {
        <crate::RegValueT<RxrinfoowscrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrinfoowscr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl0Ow_SPEC;
    pub type Sl0Ow = crate::EnumBitfieldStruct<u8, Sl0Ow_SPEC>;
    impl Sl0Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl1Ow_SPEC;
    pub type Sl1Ow = crate::EnumBitfieldStruct<u8, Sl1Ow_SPEC>;
    impl Sl1Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl2Ow_SPEC;
    pub type Sl2Ow = crate::EnumBitfieldStruct<u8, Sl2Ow_SPEC>;
    impl Sl2Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sl3Ow_SPEC;
    pub type Sl3Ow = crate::EnumBitfieldStruct<u8, Sl3Ow_SPEC>;
    impl Sl3Ow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrinfoowscrH_SPEC;
impl crate::sealed::RegSpec for RxrinfoowscrH_SPEC {
    type DataType = u16;
}

pub type RxrinfoowscrH = crate::RegValueT<RxrinfoowscrH_SPEC>;

impl RxrinfoowscrH {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, u8, RxrinfoowscrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<9,0x7f,1,0,u8,u8,RxrinfoowscrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrinfoowscrH {
    #[inline(always)]
    fn default() -> RxrinfoowscrH {
        <crate::RegValueT<RxrinfoowscrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrinfoowscrHh_SPEC;
impl crate::sealed::RegSpec for RxrinfoowscrHh_SPEC {
    type DataType = u8;
}

pub type RxrinfoowscrHh = crate::RegValueT<RxrinfoowscrHh_SPEC>;

impl RxrinfoowscrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, u8, RxrinfoowscrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x7f,1,0,u8,u8,RxrinfoowscrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrinfoowscrHh {
    #[inline(always)]
    fn default() -> RxrinfoowscrHh {
        <crate::RegValueT<RxrinfoowscrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxrssr_SPEC;
impl crate::sealed::RegSpec for Rxrssr_SPEC {
    type DataType = u32;
}

pub type Rxrssr = crate::RegValueT<Rxrssr_SPEC>;

impl Rxrssr {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxrssr_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxrssr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxrssr_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxrssr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<16, 0x3f, 1, 0, u8, u8, Rxrssr_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0x3f,1,0,u8,u8,Rxrssr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, u8, Rxrssr_SPEC, crate::common::R> {
        crate::common::RegisterField::<22,0x3,1,0,u8,u8,Rxrssr_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        rxrssr::Fmt,
        rxrssr::Fmt,
        Rxrssr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            rxrssr::Fmt,
            rxrssr::Fmt,
            Rxrssr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxsuc(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        rxrssr::Rxsuc,
        rxrssr::Rxsuc,
        Rxrssr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            rxrssr::Rxsuc,
            rxrssr::Rxsuc,
            Rxrssr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        rxrssr::Rxferr,
        rxrssr::Rxferr,
        Rxrssr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            rxrssr::Rxferr,
            rxrssr::Rxferr,
            Rxrssr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        rxrssr::Rxfail,
        rxrssr::Rxfail,
        Rxrssr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            rxrssr::Rxfail,
            rxrssr::Rxfail,
            Rxrssr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        rxrssr::Rxpfail,
        rxrssr::Rxpfail,
        Rxrssr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            rxrssr::Rxpfail,
            rxrssr::Rxpfail,
            Rxrssr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcerr(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        rxrssr::Rxcerr,
        rxrssr::Rxcerr,
        Rxrssr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            rxrssr::Rxcerr,
            rxrssr::Rxcerr,
            Rxrssr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        rxrssr::Rxake,
        rxrssr::Rxake,
        Rxrssr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            rxrssr::Rxake,
            rxrssr::Rxake,
            Rxrssr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn infoow(
        self,
    ) -> crate::common::RegisterField<
        31,
        0x1,
        1,
        0,
        rxrssr::Infoow,
        rxrssr::Infoow,
        Rxrssr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            31,
            0x1,
            1,
            0,
            rxrssr::Infoow,
            rxrssr::Infoow,
            Rxrssr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Rxrssr {
    #[inline(always)]
    fn default() -> Rxrssr {
        <crate::RegValueT<Rxrssr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrssr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxsuc_SPEC;
    pub type Rxsuc = crate::EnumBitfieldStruct<u8, Rxsuc_SPEC>;
    impl Rxsuc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcerr_SPEC;
    pub type Rxcerr = crate::EnumBitfieldStruct<u8, Rxcerr_SPEC>;
    impl Rxcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Infoow_SPEC;
    pub type Infoow = crate::EnumBitfieldStruct<u8, Infoow_SPEC>;
    impl Infoow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrssrL_SPEC;
impl crate::sealed::RegSpec for RxrssrL_SPEC {
    type DataType = u16;
}

pub type RxrssrL = crate::RegValueT<RxrssrL_SPEC>;

impl RxrssrL {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, RxrssrL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,RxrssrL_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, RxrssrL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,RxrssrL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrssrL {
    #[inline(always)]
    fn default() -> RxrssrL {
        <crate::RegValueT<RxrssrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrssrLl_SPEC;
impl crate::sealed::RegSpec for RxrssrLl_SPEC {
    type DataType = u8;
}

pub type RxrssrLl = crate::RegValueT<RxrssrLl_SPEC>;

impl RxrssrLl {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, RxrssrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,RxrssrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrssrLl {
    #[inline(always)]
    fn default() -> RxrssrLl {
        <crate::RegValueT<RxrssrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrssrLh_SPEC;
impl crate::sealed::RegSpec for RxrssrLh_SPEC {
    type DataType = u8;
}

pub type RxrssrLh = crate::RegValueT<RxrssrLh_SPEC>;

impl RxrssrLh {
    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, RxrssrLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,RxrssrLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrssrLh {
    #[inline(always)]
    fn default() -> RxrssrLh {
        <crate::RegValueT<RxrssrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrssrH_SPEC;
impl crate::sealed::RegSpec for RxrssrH_SPEC {
    type DataType = u16;
}

pub type RxrssrH = crate::RegValueT<RxrssrH_SPEC>;

impl RxrssrH {
    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, u8, RxrssrH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x3f,1,0,u8,u8,RxrssrH_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, RxrssrH_SPEC, crate::common::R> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,RxrssrH_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        rxrssr_h::Fmt,
        rxrssr_h::Fmt,
        RxrssrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            rxrssr_h::Fmt,
            rxrssr_h::Fmt,
            RxrssrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxsuc(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        rxrssr_h::Rxsuc,
        rxrssr_h::Rxsuc,
        RxrssrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            rxrssr_h::Rxsuc,
            rxrssr_h::Rxsuc,
            RxrssrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        rxrssr_h::Rxferr,
        rxrssr_h::Rxferr,
        RxrssrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            rxrssr_h::Rxferr,
            rxrssr_h::Rxferr,
            RxrssrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        rxrssr_h::Rxfail,
        rxrssr_h::Rxfail,
        RxrssrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            rxrssr_h::Rxfail,
            rxrssr_h::Rxfail,
            RxrssrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        rxrssr_h::Rxpfail,
        rxrssr_h::Rxpfail,
        RxrssrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            rxrssr_h::Rxpfail,
            rxrssr_h::Rxpfail,
            RxrssrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcerr(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        rxrssr_h::Rxcerr,
        rxrssr_h::Rxcerr,
        RxrssrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            rxrssr_h::Rxcerr,
            rxrssr_h::Rxcerr,
            RxrssrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        rxrssr_h::Rxake,
        rxrssr_h::Rxake,
        RxrssrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            rxrssr_h::Rxake,
            rxrssr_h::Rxake,
            RxrssrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn infoow(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        rxrssr_h::Infoow,
        rxrssr_h::Infoow,
        RxrssrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            rxrssr_h::Infoow,
            rxrssr_h::Infoow,
            RxrssrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxrssrH {
    #[inline(always)]
    fn default() -> RxrssrH {
        <crate::RegValueT<RxrssrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrssr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxsuc_SPEC;
    pub type Rxsuc = crate::EnumBitfieldStruct<u8, Rxsuc_SPEC>;
    impl Rxsuc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcerr_SPEC;
    pub type Rxcerr = crate::EnumBitfieldStruct<u8, Rxcerr_SPEC>;
    impl Rxcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Infoow_SPEC;
    pub type Infoow = crate::EnumBitfieldStruct<u8, Infoow_SPEC>;
    impl Infoow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrssrHl_SPEC;
impl crate::sealed::RegSpec for RxrssrHl_SPEC {
    type DataType = u8;
}

pub type RxrssrHl = crate::RegValueT<RxrssrHl_SPEC>;

impl RxrssrHl {
    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, u8, RxrssrHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0x3f,1,0,u8,u8,RxrssrHl_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, RxrssrHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,RxrssrHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for RxrssrHl {
    #[inline(always)]
    fn default() -> RxrssrHl {
        <crate::RegValueT<RxrssrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct RxrssrHh_SPEC;
impl crate::sealed::RegSpec for RxrssrHh_SPEC {
    type DataType = u8;
}

pub type RxrssrHh = crate::RegValueT<RxrssrHh_SPEC>;

impl RxrssrHh {
    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        rxrssr_hh::Fmt,
        rxrssr_hh::Fmt,
        RxrssrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            rxrssr_hh::Fmt,
            rxrssr_hh::Fmt,
            RxrssrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxsuc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        rxrssr_hh::Rxsuc,
        rxrssr_hh::Rxsuc,
        RxrssrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            rxrssr_hh::Rxsuc,
            rxrssr_hh::Rxsuc,
            RxrssrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        rxrssr_hh::Rxferr,
        rxrssr_hh::Rxferr,
        RxrssrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            rxrssr_hh::Rxferr,
            rxrssr_hh::Rxferr,
            RxrssrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        rxrssr_hh::Rxfail,
        rxrssr_hh::Rxfail,
        RxrssrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            rxrssr_hh::Rxfail,
            rxrssr_hh::Rxfail,
            RxrssrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        rxrssr_hh::Rxpfail,
        rxrssr_hh::Rxpfail,
        RxrssrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            rxrssr_hh::Rxpfail,
            rxrssr_hh::Rxpfail,
            RxrssrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        rxrssr_hh::Rxcerr,
        rxrssr_hh::Rxcerr,
        RxrssrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            rxrssr_hh::Rxcerr,
            rxrssr_hh::Rxcerr,
            RxrssrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        rxrssr_hh::Rxake,
        rxrssr_hh::Rxake,
        RxrssrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            rxrssr_hh::Rxake,
            rxrssr_hh::Rxake,
            RxrssrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn infoow(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        rxrssr_hh::Infoow,
        rxrssr_hh::Infoow,
        RxrssrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            rxrssr_hh::Infoow,
            rxrssr_hh::Infoow,
            RxrssrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for RxrssrHh {
    #[inline(always)]
    fn default() -> RxrssrHh {
        <crate::RegValueT<RxrssrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod rxrssr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxsuc_SPEC;
    pub type Rxsuc = crate::EnumBitfieldStruct<u8, Rxsuc_SPEC>;
    impl Rxsuc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcerr_SPEC;
    pub type Rxcerr = crate::EnumBitfieldStruct<u8, Rxcerr_SPEC>;
    impl Rxcerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Infoow_SPEC;
    pub type Infoow = crate::EnumBitfieldStruct<u8, Infoow_SPEC>;
    impl Infoow {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd0R_SPEC;
impl crate::sealed::RegSpec for Rxppd0R_SPEC {
    type DataType = u32;
}

pub type Rxppd0R = crate::RegValueT<Rxppd0R_SPEC>;

impl Rxppd0R {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd0R_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd0R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd0R_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd0R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data2(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Rxppd0R_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Rxppd0R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data3(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Rxppd0R_SPEC, crate::common::R> {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Rxppd0R_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd0R {
    #[inline(always)]
    fn default() -> Rxppd0R {
        <crate::RegValueT<Rxppd0R_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd0RL_SPEC;
impl crate::sealed::RegSpec for Rxppd0RL_SPEC {
    type DataType = u16;
}

pub type Rxppd0RL = crate::RegValueT<Rxppd0RL_SPEC>;

impl Rxppd0RL {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd0RL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd0RL_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd0RL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd0RL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd0RL {
    #[inline(always)]
    fn default() -> Rxppd0RL {
        <crate::RegValueT<Rxppd0RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd0RLl_SPEC;
impl crate::sealed::RegSpec for Rxppd0RLl_SPEC {
    type DataType = u8;
}

pub type Rxppd0RLl = crate::RegValueT<Rxppd0RLl_SPEC>;

impl Rxppd0RLl {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd0RLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd0RLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd0RLl {
    #[inline(always)]
    fn default() -> Rxppd0RLl {
        <crate::RegValueT<Rxppd0RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd0RLh_SPEC;
impl crate::sealed::RegSpec for Rxppd0RLh_SPEC {
    type DataType = u8;
}

pub type Rxppd0RLh = crate::RegValueT<Rxppd0RLh_SPEC>;

impl Rxppd0RLh {
    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd0RLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd0RLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd0RLh {
    #[inline(always)]
    fn default() -> Rxppd0RLh {
        <crate::RegValueT<Rxppd0RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd0RH_SPEC;
impl crate::sealed::RegSpec for Rxppd0RH_SPEC {
    type DataType = u16;
}

pub type Rxppd0RH = crate::RegValueT<Rxppd0RH_SPEC>;

impl Rxppd0RH {
    #[inline(always)]
    pub fn data2(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd0RH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd0RH_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data3(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd0RH_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd0RH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd0RH {
    #[inline(always)]
    fn default() -> Rxppd0RH {
        <crate::RegValueT<Rxppd0RH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd0RHl_SPEC;
impl crate::sealed::RegSpec for Rxppd0RHl_SPEC {
    type DataType = u8;
}

pub type Rxppd0RHl = crate::RegValueT<Rxppd0RHl_SPEC>;

impl Rxppd0RHl {
    #[inline(always)]
    pub fn data2(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd0RHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd0RHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd0RHl {
    #[inline(always)]
    fn default() -> Rxppd0RHl {
        <crate::RegValueT<Rxppd0RHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd0RHh_SPEC;
impl crate::sealed::RegSpec for Rxppd0RHh_SPEC {
    type DataType = u8;
}

pub type Rxppd0RHh = crate::RegValueT<Rxppd0RHh_SPEC>;

impl Rxppd0RHh {
    #[inline(always)]
    pub fn data3(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd0RHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd0RHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd0RHh {
    #[inline(always)]
    fn default() -> Rxppd0RHh {
        <crate::RegValueT<Rxppd0RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd1R_SPEC;
impl crate::sealed::RegSpec for Rxppd1R_SPEC {
    type DataType = u32;
}

pub type Rxppd1R = crate::RegValueT<Rxppd1R_SPEC>;

impl Rxppd1R {
    #[inline(always)]
    pub fn data4(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd1R_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd1R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data5(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd1R_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd1R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data6(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Rxppd1R_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Rxppd1R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data7(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Rxppd1R_SPEC, crate::common::R> {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Rxppd1R_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd1R {
    #[inline(always)]
    fn default() -> Rxppd1R {
        <crate::RegValueT<Rxppd1R_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd1RL_SPEC;
impl crate::sealed::RegSpec for Rxppd1RL_SPEC {
    type DataType = u16;
}

pub type Rxppd1RL = crate::RegValueT<Rxppd1RL_SPEC>;

impl Rxppd1RL {
    #[inline(always)]
    pub fn data4(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd1RL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd1RL_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data5(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd1RL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd1RL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd1RL {
    #[inline(always)]
    fn default() -> Rxppd1RL {
        <crate::RegValueT<Rxppd1RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd1RLl_SPEC;
impl crate::sealed::RegSpec for Rxppd1RLl_SPEC {
    type DataType = u8;
}

pub type Rxppd1RLl = crate::RegValueT<Rxppd1RLl_SPEC>;

impl Rxppd1RLl {
    #[inline(always)]
    pub fn data4(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd1RLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd1RLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd1RLl {
    #[inline(always)]
    fn default() -> Rxppd1RLl {
        <crate::RegValueT<Rxppd1RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd1RLh_SPEC;
impl crate::sealed::RegSpec for Rxppd1RLh_SPEC {
    type DataType = u8;
}

pub type Rxppd1RLh = crate::RegValueT<Rxppd1RLh_SPEC>;

impl Rxppd1RLh {
    #[inline(always)]
    pub fn data5(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd1RLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd1RLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd1RLh {
    #[inline(always)]
    fn default() -> Rxppd1RLh {
        <crate::RegValueT<Rxppd1RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd1RH_SPEC;
impl crate::sealed::RegSpec for Rxppd1RH_SPEC {
    type DataType = u16;
}

pub type Rxppd1RH = crate::RegValueT<Rxppd1RH_SPEC>;

impl Rxppd1RH {
    #[inline(always)]
    pub fn data6(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd1RH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd1RH_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data7(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd1RH_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd1RH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd1RH {
    #[inline(always)]
    fn default() -> Rxppd1RH {
        <crate::RegValueT<Rxppd1RH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd1RHl_SPEC;
impl crate::sealed::RegSpec for Rxppd1RHl_SPEC {
    type DataType = u8;
}

pub type Rxppd1RHl = crate::RegValueT<Rxppd1RHl_SPEC>;

impl Rxppd1RHl {
    #[inline(always)]
    pub fn data6(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd1RHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd1RHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd1RHl {
    #[inline(always)]
    fn default() -> Rxppd1RHl {
        <crate::RegValueT<Rxppd1RHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd1RHh_SPEC;
impl crate::sealed::RegSpec for Rxppd1RHh_SPEC {
    type DataType = u8;
}

pub type Rxppd1RHh = crate::RegValueT<Rxppd1RHh_SPEC>;

impl Rxppd1RHh {
    #[inline(always)]
    pub fn data7(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd1RHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd1RHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd1RHh {
    #[inline(always)]
    fn default() -> Rxppd1RHh {
        <crate::RegValueT<Rxppd1RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd2R_SPEC;
impl crate::sealed::RegSpec for Rxppd2R_SPEC {
    type DataType = u32;
}

pub type Rxppd2R = crate::RegValueT<Rxppd2R_SPEC>;

impl Rxppd2R {
    #[inline(always)]
    pub fn data8(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd2R_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd2R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data9(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd2R_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd2R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data10(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Rxppd2R_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Rxppd2R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data11(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Rxppd2R_SPEC, crate::common::R> {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Rxppd2R_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd2R {
    #[inline(always)]
    fn default() -> Rxppd2R {
        <crate::RegValueT<Rxppd2R_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd2RL_SPEC;
impl crate::sealed::RegSpec for Rxppd2RL_SPEC {
    type DataType = u16;
}

pub type Rxppd2RL = crate::RegValueT<Rxppd2RL_SPEC>;

impl Rxppd2RL {
    #[inline(always)]
    pub fn data8(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd2RL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd2RL_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data9(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd2RL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd2RL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd2RL {
    #[inline(always)]
    fn default() -> Rxppd2RL {
        <crate::RegValueT<Rxppd2RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd2RLl_SPEC;
impl crate::sealed::RegSpec for Rxppd2RLl_SPEC {
    type DataType = u8;
}

pub type Rxppd2RLl = crate::RegValueT<Rxppd2RLl_SPEC>;

impl Rxppd2RLl {
    #[inline(always)]
    pub fn data8(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd2RLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd2RLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd2RLl {
    #[inline(always)]
    fn default() -> Rxppd2RLl {
        <crate::RegValueT<Rxppd2RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd2RLh_SPEC;
impl crate::sealed::RegSpec for Rxppd2RLh_SPEC {
    type DataType = u8;
}

pub type Rxppd2RLh = crate::RegValueT<Rxppd2RLh_SPEC>;

impl Rxppd2RLh {
    #[inline(always)]
    pub fn data9(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd2RLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd2RLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd2RLh {
    #[inline(always)]
    fn default() -> Rxppd2RLh {
        <crate::RegValueT<Rxppd2RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd2RH_SPEC;
impl crate::sealed::RegSpec for Rxppd2RH_SPEC {
    type DataType = u16;
}

pub type Rxppd2RH = crate::RegValueT<Rxppd2RH_SPEC>;

impl Rxppd2RH {
    #[inline(always)]
    pub fn data10(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd2RH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd2RH_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data11(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd2RH_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd2RH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd2RH {
    #[inline(always)]
    fn default() -> Rxppd2RH {
        <crate::RegValueT<Rxppd2RH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd2RHl_SPEC;
impl crate::sealed::RegSpec for Rxppd2RHl_SPEC {
    type DataType = u8;
}

pub type Rxppd2RHl = crate::RegValueT<Rxppd2RHl_SPEC>;

impl Rxppd2RHl {
    #[inline(always)]
    pub fn data10(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd2RHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd2RHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd2RHl {
    #[inline(always)]
    fn default() -> Rxppd2RHl {
        <crate::RegValueT<Rxppd2RHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd2RHh_SPEC;
impl crate::sealed::RegSpec for Rxppd2RHh_SPEC {
    type DataType = u8;
}

pub type Rxppd2RHh = crate::RegValueT<Rxppd2RHh_SPEC>;

impl Rxppd2RHh {
    #[inline(always)]
    pub fn data11(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd2RHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd2RHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd2RHh {
    #[inline(always)]
    fn default() -> Rxppd2RHh {
        <crate::RegValueT<Rxppd2RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd3R_SPEC;
impl crate::sealed::RegSpec for Rxppd3R_SPEC {
    type DataType = u32;
}

pub type Rxppd3R = crate::RegValueT<Rxppd3R_SPEC>;

impl Rxppd3R {
    #[inline(always)]
    pub fn data12(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd3R_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd3R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data13(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd3R_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd3R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data14(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Rxppd3R_SPEC, crate::common::R> {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Rxppd3R_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data15(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Rxppd3R_SPEC, crate::common::R> {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Rxppd3R_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd3R {
    #[inline(always)]
    fn default() -> Rxppd3R {
        <crate::RegValueT<Rxppd3R_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd3RL_SPEC;
impl crate::sealed::RegSpec for Rxppd3RL_SPEC {
    type DataType = u16;
}

pub type Rxppd3RL = crate::RegValueT<Rxppd3RL_SPEC>;

impl Rxppd3RL {
    #[inline(always)]
    pub fn data12(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd3RL_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd3RL_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data13(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd3RL_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd3RL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd3RL {
    #[inline(always)]
    fn default() -> Rxppd3RL {
        <crate::RegValueT<Rxppd3RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd3RLl_SPEC;
impl crate::sealed::RegSpec for Rxppd3RLl_SPEC {
    type DataType = u8;
}

pub type Rxppd3RLl = crate::RegValueT<Rxppd3RLl_SPEC>;

impl Rxppd3RLl {
    #[inline(always)]
    pub fn data12(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd3RLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd3RLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd3RLl {
    #[inline(always)]
    fn default() -> Rxppd3RLl {
        <crate::RegValueT<Rxppd3RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd3RLh_SPEC;
impl crate::sealed::RegSpec for Rxppd3RLh_SPEC {
    type DataType = u8;
}

pub type Rxppd3RLh = crate::RegValueT<Rxppd3RLh_SPEC>;

impl Rxppd3RLh {
    #[inline(always)]
    pub fn data13(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd3RLh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd3RLh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd3RLh {
    #[inline(always)]
    fn default() -> Rxppd3RLh {
        <crate::RegValueT<Rxppd3RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd3RH_SPEC;
impl crate::sealed::RegSpec for Rxppd3RH_SPEC {
    type DataType = u16;
}

pub type Rxppd3RH = crate::RegValueT<Rxppd3RH_SPEC>;

impl Rxppd3RH {
    #[inline(always)]
    pub fn data14(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd3RH_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd3RH_SPEC,crate::common::R>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data15(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Rxppd3RH_SPEC, crate::common::R> {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Rxppd3RH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd3RH {
    #[inline(always)]
    fn default() -> Rxppd3RH {
        <crate::RegValueT<Rxppd3RH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd3RHl_SPEC;
impl crate::sealed::RegSpec for Rxppd3RHl_SPEC {
    type DataType = u8;
}

pub type Rxppd3RHl = crate::RegValueT<Rxppd3RHl_SPEC>;

impl Rxppd3RHl {
    #[inline(always)]
    pub fn data14(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd3RHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd3RHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd3RHl {
    #[inline(always)]
    fn default() -> Rxppd3RHl {
        <crate::RegValueT<Rxppd3RHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Rxppd3RHh_SPEC;
impl crate::sealed::RegSpec for Rxppd3RHh_SPEC {
    type DataType = u8;
}

pub type Rxppd3RHh = crate::RegValueT<Rxppd3RHh_SPEC>;

impl Rxppd3RHh {
    #[inline(always)]
    pub fn data15(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Rxppd3RHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Rxppd3RHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Rxppd3RHh {
    #[inline(always)]
    fn default() -> Rxppd3RHh {
        <crate::RegValueT<Rxppd3RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Hstxtosetr_SPEC;
impl crate::sealed::RegSpec for Hstxtosetr_SPEC {
    type DataType = u32;
}

pub type Hstxtosetr = crate::RegValueT<Hstxtosetr_SPEC>;

impl Hstxtosetr {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffffffff,
        1,
        0,
        u32,
        u32,
        Hstxtosetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffffffff,
            1,
            0,
            u32,
            u32,
            Hstxtosetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Hstxtosetr {
    #[inline(always)]
    fn default() -> Hstxtosetr {
        <crate::RegValueT<Hstxtosetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Lrxhtosetr_SPEC;
impl crate::sealed::RegSpec for Lrxhtosetr_SPEC {
    type DataType = u32;
}

pub type Lrxhtosetr = crate::RegValueT<Lrxhtosetr_SPEC>;

impl Lrxhtosetr {
    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffffffff,
        1,
        0,
        u32,
        u32,
        Lrxhtosetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffffffff,
            1,
            0,
            u32,
            u32,
            Lrxhtosetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Lrxhtosetr {
    #[inline(always)]
    fn default() -> Lrxhtosetr {
        <crate::RegValueT<Lrxhtosetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Tatosetr_SPEC;
impl crate::sealed::RegSpec for Tatosetr_SPEC {
    type DataType = u32;
}

pub type Tatosetr = crate::RegValueT<Tatosetr_SPEC>;

impl Tatosetr {
    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<0, 0xffffffff, 1, 0, u32, u32, Tatosetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<
            0,
            0xffffffff,
            1,
            0,
            u32,
            u32,
            Tatosetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Tatosetr {
    #[inline(always)]
    fn default() -> Tatosetr {
        <crate::RegValueT<Tatosetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ferrsr_SPEC;
impl crate::sealed::RegSpec for Ferrsr_SPEC {
    type DataType = u32;
}

pub type Ferrsr = crate::RegValueT<Ferrsr_SPEC>;

impl Ferrsr {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrsr::Htxto,
        ferrsr::Htxto,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrsr::Htxto,
            ferrsr::Htxto,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrsr::Lrxhto,
        ferrsr::Lrxhto,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrsr::Lrxhto,
            ferrsr::Lrxhto,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrsr::Tato,
        ferrsr::Tato,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrsr::Tato,
            ferrsr::Tato,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        ferrsr::Escent,
        ferrsr::Escent,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            ferrsr::Escent,
            ferrsr::Escent,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        17,
        0x1,
        1,
        0,
        ferrsr::Syncesc,
        ferrsr::Syncesc,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            17,
            0x1,
            1,
            0,
            ferrsr::Syncesc,
            ferrsr::Syncesc,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        18,
        0x1,
        1,
        0,
        ferrsr::Ctrl,
        ferrsr::Ctrl,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            18,
            0x1,
            1,
            0,
            ferrsr::Ctrl,
            ferrsr::Ctrl,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        ferrsr::Clp0,
        ferrsr::Clp0,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            ferrsr::Clp0,
            ferrsr::Clp0,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        ferrsr::Clp1,
        ferrsr::Clp1,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            ferrsr::Clp1,
            ferrsr::Clp1,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0s(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        ferrsr::Clp0S,
        ferrsr::Clp0S,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            ferrsr::Clp0S,
            ferrsr::Clp0S,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1s(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        ferrsr::Clp1S,
        ferrsr::Clp1S,
        Ferrsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            ferrsr::Clp1S,
            ferrsr::Clp1S,
            Ferrsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<29, 0x7, 1, 0, u8, u8, Ferrsr_SPEC, crate::common::R> {
        crate::common::RegisterField::<29,0x7,1,0,u8,u8,Ferrsr_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Ferrsr {
    #[inline(always)]
    fn default() -> Ferrsr {
        <crate::RegValueT<Ferrsr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrsr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0S_SPEC;
    pub type Clp0S = crate::EnumBitfieldStruct<u8, Clp0S_SPEC>;
    impl Clp0S {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1S_SPEC;
    pub type Clp1S = crate::EnumBitfieldStruct<u8, Clp1S_SPEC>;
    impl Clp1S {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrsrL_SPEC;
impl crate::sealed::RegSpec for FerrsrL_SPEC {
    type DataType = u16;
}

pub type FerrsrL = crate::RegValueT<FerrsrL_SPEC>;

impl FerrsrL {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrsr_l::Htxto,
        ferrsr_l::Htxto,
        FerrsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrsr_l::Htxto,
            ferrsr_l::Htxto,
            FerrsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrsr_l::Lrxhto,
        ferrsr_l::Lrxhto,
        FerrsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrsr_l::Lrxhto,
            ferrsr_l::Lrxhto,
            FerrsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrsr_l::Tato,
        ferrsr_l::Tato,
        FerrsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrsr_l::Tato,
            ferrsr_l::Tato,
            FerrsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, u16, FerrsrL_SPEC, crate::common::R>
    {
        crate::common::RegisterField::<3,0x1fff,1,0,u16,u16,FerrsrL_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrsrL {
    #[inline(always)]
    fn default() -> FerrsrL {
        <crate::RegValueT<FerrsrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrsr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrsrLl_SPEC;
impl crate::sealed::RegSpec for FerrsrLl_SPEC {
    type DataType = u8;
}

pub type FerrsrLl = crate::RegValueT<FerrsrLl_SPEC>;

impl FerrsrLl {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrsr_ll::Htxto,
        ferrsr_ll::Htxto,
        FerrsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrsr_ll::Htxto,
            ferrsr_ll::Htxto,
            FerrsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrsr_ll::Lrxhto,
        ferrsr_ll::Lrxhto,
        FerrsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrsr_ll::Lrxhto,
            ferrsr_ll::Lrxhto,
            FerrsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrsr_ll::Tato,
        ferrsr_ll::Tato,
        FerrsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrsr_ll::Tato,
            ferrsr_ll::Tato,
            FerrsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, FerrsrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,FerrsrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrsrLl {
    #[inline(always)]
    fn default() -> FerrsrLl {
        <crate::RegValueT<FerrsrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrsr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrsrH_SPEC;
impl crate::sealed::RegSpec for FerrsrH_SPEC {
    type DataType = u16;
}

pub type FerrsrH = crate::RegValueT<FerrsrH_SPEC>;

impl FerrsrH {
    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrsr_h::Escent,
        ferrsr_h::Escent,
        FerrsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrsr_h::Escent,
            ferrsr_h::Escent,
            FerrsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrsr_h::Syncesc,
        ferrsr_h::Syncesc,
        FerrsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrsr_h::Syncesc,
            ferrsr_h::Syncesc,
            FerrsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrsr_h::Ctrl,
        ferrsr_h::Ctrl,
        FerrsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrsr_h::Ctrl,
            ferrsr_h::Ctrl,
            FerrsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ferrsr_h::Clp0,
        ferrsr_h::Clp0,
        FerrsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ferrsr_h::Clp0,
            ferrsr_h::Clp0,
            FerrsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ferrsr_h::Clp1,
        ferrsr_h::Clp1,
        FerrsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ferrsr_h::Clp1,
            ferrsr_h::Clp1,
            FerrsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0s(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        ferrsr_h::Clp0S,
        ferrsr_h::Clp0S,
        FerrsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            ferrsr_h::Clp0S,
            ferrsr_h::Clp0S,
            FerrsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1s(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        ferrsr_h::Clp1S,
        ferrsr_h::Clp1S,
        FerrsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            ferrsr_h::Clp1S,
            ferrsr_h::Clp1S,
            FerrsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, u8, FerrsrH_SPEC, crate::common::R> {
        crate::common::RegisterField::<13,0x7,1,0,u8,u8,FerrsrH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrsrH {
    #[inline(always)]
    fn default() -> FerrsrH {
        <crate::RegValueT<FerrsrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrsr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0S_SPEC;
    pub type Clp0S = crate::EnumBitfieldStruct<u8, Clp0S_SPEC>;
    impl Clp0S {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1S_SPEC;
    pub type Clp1S = crate::EnumBitfieldStruct<u8, Clp1S_SPEC>;
    impl Clp1S {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrsrHl_SPEC;
impl crate::sealed::RegSpec for FerrsrHl_SPEC {
    type DataType = u8;
}

pub type FerrsrHl = crate::RegValueT<FerrsrHl_SPEC>;

impl FerrsrHl {
    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrsr_hl::Escent,
        ferrsr_hl::Escent,
        FerrsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrsr_hl::Escent,
            ferrsr_hl::Escent,
            FerrsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrsr_hl::Syncesc,
        ferrsr_hl::Syncesc,
        FerrsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrsr_hl::Syncesc,
            ferrsr_hl::Syncesc,
            FerrsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrsr_hl::Ctrl,
        ferrsr_hl::Ctrl,
        FerrsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrsr_hl::Ctrl,
            ferrsr_hl::Ctrl,
            FerrsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ferrsr_hl::Clp0,
        ferrsr_hl::Clp0,
        FerrsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ferrsr_hl::Clp0,
            ferrsr_hl::Clp0,
            FerrsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ferrsr_hl::Clp1,
        ferrsr_hl::Clp1,
        FerrsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ferrsr_hl::Clp1,
            ferrsr_hl::Clp1,
            FerrsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, FerrsrHl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,FerrsrHl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrsrHl {
    #[inline(always)]
    fn default() -> FerrsrHl {
        <crate::RegValueT<FerrsrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrsr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrsrHh_SPEC;
impl crate::sealed::RegSpec for FerrsrHh_SPEC {
    type DataType = u8;
}

pub type FerrsrHh = crate::RegValueT<FerrsrHh_SPEC>;

impl FerrsrHh {
    #[inline(always)]
    pub fn clp0s(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ferrsr_hh::Clp0S,
        ferrsr_hh::Clp0S,
        FerrsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ferrsr_hh::Clp0S,
            ferrsr_hh::Clp0S,
            FerrsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1s(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ferrsr_hh::Clp1S,
        ferrsr_hh::Clp1S,
        FerrsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ferrsr_hh::Clp1S,
            ferrsr_hh::Clp1S,
            FerrsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, FerrsrHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,FerrsrHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrsrHh {
    #[inline(always)]
    fn default() -> FerrsrHh {
        <crate::RegValueT<FerrsrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrsr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0S_SPEC;
    pub type Clp0S = crate::EnumBitfieldStruct<u8, Clp0S_SPEC>;
    impl Clp0S {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1S_SPEC;
    pub type Clp1S = crate::EnumBitfieldStruct<u8, Clp1S_SPEC>;
    impl Clp1S {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ferrscr_SPEC;
impl crate::sealed::RegSpec for Ferrscr_SPEC {
    type DataType = u32;
}

pub type Ferrscr = crate::RegValueT<Ferrscr_SPEC>;

impl Ferrscr {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrscr::Htxto,
        ferrscr::Htxto,
        Ferrscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrscr::Htxto,
            ferrscr::Htxto,
            Ferrscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrscr::Lrxhto,
        ferrscr::Lrxhto,
        Ferrscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrscr::Lrxhto,
            ferrscr::Lrxhto,
            Ferrscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrscr::Tato,
        ferrscr::Tato,
        Ferrscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrscr::Tato,
            ferrscr::Tato,
            Ferrscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        ferrscr::Escent,
        ferrscr::Escent,
        Ferrscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            ferrscr::Escent,
            ferrscr::Escent,
            Ferrscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        17,
        0x1,
        1,
        0,
        ferrscr::Syncesc,
        ferrscr::Syncesc,
        Ferrscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            17,
            0x1,
            1,
            0,
            ferrscr::Syncesc,
            ferrscr::Syncesc,
            Ferrscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        18,
        0x1,
        1,
        0,
        ferrscr::Ctrl,
        ferrscr::Ctrl,
        Ferrscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            18,
            0x1,
            1,
            0,
            ferrscr::Ctrl,
            ferrscr::Ctrl,
            Ferrscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        ferrscr::Clp0,
        ferrscr::Clp0,
        Ferrscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            ferrscr::Clp0,
            ferrscr::Clp0,
            Ferrscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        ferrscr::Clp1,
        ferrscr::Clp1,
        Ferrscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            ferrscr::Clp1,
            ferrscr::Clp1,
            Ferrscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<21, 0x7ff, 1, 0, u16, u16, Ferrscr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<21,0x7ff,1,0,u16,u16,Ferrscr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ferrscr {
    #[inline(always)]
    fn default() -> Ferrscr {
        <crate::RegValueT<Ferrscr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrscr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrscrL_SPEC;
impl crate::sealed::RegSpec for FerrscrL_SPEC {
    type DataType = u16;
}

pub type FerrscrL = crate::RegValueT<FerrscrL_SPEC>;

impl FerrscrL {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrscr_l::Htxto,
        ferrscr_l::Htxto,
        FerrscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrscr_l::Htxto,
            ferrscr_l::Htxto,
            FerrscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrscr_l::Lrxhto,
        ferrscr_l::Lrxhto,
        FerrscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrscr_l::Lrxhto,
            ferrscr_l::Lrxhto,
            FerrscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrscr_l::Tato,
        ferrscr_l::Tato,
        FerrscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrscr_l::Tato,
            ferrscr_l::Tato,
            FerrscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, u16, FerrscrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fff,1,0,u16,u16,FerrscrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrscrL {
    #[inline(always)]
    fn default() -> FerrscrL {
        <crate::RegValueT<FerrscrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrscr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrscrLl_SPEC;
impl crate::sealed::RegSpec for FerrscrLl_SPEC {
    type DataType = u8;
}

pub type FerrscrLl = crate::RegValueT<FerrscrLl_SPEC>;

impl FerrscrLl {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrscr_ll::Htxto,
        ferrscr_ll::Htxto,
        FerrscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrscr_ll::Htxto,
            ferrscr_ll::Htxto,
            FerrscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrscr_ll::Lrxhto,
        ferrscr_ll::Lrxhto,
        FerrscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrscr_ll::Lrxhto,
            ferrscr_ll::Lrxhto,
            FerrscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrscr_ll::Tato,
        ferrscr_ll::Tato,
        FerrscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrscr_ll::Tato,
            ferrscr_ll::Tato,
            FerrscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, FerrscrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,FerrscrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrscrLl {
    #[inline(always)]
    fn default() -> FerrscrLl {
        <crate::RegValueT<FerrscrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrscr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrscrH_SPEC;
impl crate::sealed::RegSpec for FerrscrH_SPEC {
    type DataType = u16;
}

pub type FerrscrH = crate::RegValueT<FerrscrH_SPEC>;

impl FerrscrH {
    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrscr_h::Escent,
        ferrscr_h::Escent,
        FerrscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrscr_h::Escent,
            ferrscr_h::Escent,
            FerrscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrscr_h::Syncesc,
        ferrscr_h::Syncesc,
        FerrscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrscr_h::Syncesc,
            ferrscr_h::Syncesc,
            FerrscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrscr_h::Ctrl,
        ferrscr_h::Ctrl,
        FerrscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrscr_h::Ctrl,
            ferrscr_h::Ctrl,
            FerrscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ferrscr_h::Clp0,
        ferrscr_h::Clp0,
        FerrscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ferrscr_h::Clp0,
            ferrscr_h::Clp0,
            FerrscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ferrscr_h::Clp1,
        ferrscr_h::Clp1,
        FerrscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ferrscr_h::Clp1,
            ferrscr_h::Clp1,
            FerrscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ff, 1, 0, u16, u16, FerrscrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7ff,1,0,u16,u16,FerrscrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrscrH {
    #[inline(always)]
    fn default() -> FerrscrH {
        <crate::RegValueT<FerrscrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrscr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrscrHl_SPEC;
impl crate::sealed::RegSpec for FerrscrHl_SPEC {
    type DataType = u8;
}

pub type FerrscrHl = crate::RegValueT<FerrscrHl_SPEC>;

impl FerrscrHl {
    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrscr_hl::Escent,
        ferrscr_hl::Escent,
        FerrscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrscr_hl::Escent,
            ferrscr_hl::Escent,
            FerrscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrscr_hl::Syncesc,
        ferrscr_hl::Syncesc,
        FerrscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrscr_hl::Syncesc,
            ferrscr_hl::Syncesc,
            FerrscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrscr_hl::Ctrl,
        ferrscr_hl::Ctrl,
        FerrscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrscr_hl::Ctrl,
            ferrscr_hl::Ctrl,
            FerrscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ferrscr_hl::Clp0,
        ferrscr_hl::Clp0,
        FerrscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ferrscr_hl::Clp0,
            ferrscr_hl::Clp0,
            FerrscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ferrscr_hl::Clp1,
        ferrscr_hl::Clp1,
        FerrscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ferrscr_hl::Clp1,
            ferrscr_hl::Clp1,
            FerrscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, FerrscrHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,FerrscrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrscrHl {
    #[inline(always)]
    fn default() -> FerrscrHl {
        <crate::RegValueT<FerrscrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrscr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Ferrier_SPEC;
impl crate::sealed::RegSpec for Ferrier_SPEC {
    type DataType = u32;
}

pub type Ferrier = crate::RegValueT<Ferrier_SPEC>;

impl Ferrier {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrier::Htxto,
        ferrier::Htxto,
        Ferrier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrier::Htxto,
            ferrier::Htxto,
            Ferrier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrier::Lrxhto,
        ferrier::Lrxhto,
        Ferrier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrier::Lrxhto,
            ferrier::Lrxhto,
            Ferrier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrier::Tato,
        ferrier::Tato,
        Ferrier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrier::Tato,
            ferrier::Tato,
            Ferrier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        ferrier::Escent,
        ferrier::Escent,
        Ferrier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            ferrier::Escent,
            ferrier::Escent,
            Ferrier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        17,
        0x1,
        1,
        0,
        ferrier::Syncesc,
        ferrier::Syncesc,
        Ferrier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            17,
            0x1,
            1,
            0,
            ferrier::Syncesc,
            ferrier::Syncesc,
            Ferrier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        18,
        0x1,
        1,
        0,
        ferrier::Ctrl,
        ferrier::Ctrl,
        Ferrier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            18,
            0x1,
            1,
            0,
            ferrier::Ctrl,
            ferrier::Ctrl,
            Ferrier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        ferrier::Clp0,
        ferrier::Clp0,
        Ferrier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            ferrier::Clp0,
            ferrier::Clp0,
            Ferrier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        ferrier::Clp1,
        ferrier::Clp1,
        Ferrier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            ferrier::Clp1,
            ferrier::Clp1,
            Ferrier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<21, 0x7ff, 1, 0, u16, u16, Ferrier_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<21,0x7ff,1,0,u16,u16,Ferrier_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Ferrier {
    #[inline(always)]
    fn default() -> Ferrier {
        <crate::RegValueT<Ferrier_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrier {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrierL_SPEC;
impl crate::sealed::RegSpec for FerrierL_SPEC {
    type DataType = u16;
}

pub type FerrierL = crate::RegValueT<FerrierL_SPEC>;

impl FerrierL {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrier_l::Htxto,
        ferrier_l::Htxto,
        FerrierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrier_l::Htxto,
            ferrier_l::Htxto,
            FerrierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrier_l::Lrxhto,
        ferrier_l::Lrxhto,
        FerrierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrier_l::Lrxhto,
            ferrier_l::Lrxhto,
            FerrierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrier_l::Tato,
        ferrier_l::Tato,
        FerrierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrier_l::Tato,
            ferrier_l::Tato,
            FerrierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, u16, FerrierL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fff,1,0,u16,u16,FerrierL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrierL {
    #[inline(always)]
    fn default() -> FerrierL {
        <crate::RegValueT<FerrierL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrier_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrierLl_SPEC;
impl crate::sealed::RegSpec for FerrierLl_SPEC {
    type DataType = u8;
}

pub type FerrierLl = crate::RegValueT<FerrierLl_SPEC>;

impl FerrierLl {
    #[inline(always)]
    pub fn htxto(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrier_ll::Htxto,
        ferrier_ll::Htxto,
        FerrierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrier_ll::Htxto,
            ferrier_ll::Htxto,
            FerrierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn lrxhto(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrier_ll::Lrxhto,
        ferrier_ll::Lrxhto,
        FerrierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrier_ll::Lrxhto,
            ferrier_ll::Lrxhto,
            FerrierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn tato(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrier_ll::Tato,
        ferrier_ll::Tato,
        FerrierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrier_ll::Tato,
            ferrier_ll::Tato,
            FerrierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, FerrierLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,FerrierLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrierLl {
    #[inline(always)]
    fn default() -> FerrierLl {
        <crate::RegValueT<FerrierLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrier_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Htxto_SPEC;
    pub type Htxto = crate::EnumBitfieldStruct<u8, Htxto_SPEC>;
    impl Htxto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Lrxhto_SPEC;
    pub type Lrxhto = crate::EnumBitfieldStruct<u8, Lrxhto_SPEC>;
    impl Lrxhto {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Tato_SPEC;
    pub type Tato = crate::EnumBitfieldStruct<u8, Tato_SPEC>;
    impl Tato {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrierH_SPEC;
impl crate::sealed::RegSpec for FerrierH_SPEC {
    type DataType = u16;
}

pub type FerrierH = crate::RegValueT<FerrierH_SPEC>;

impl FerrierH {
    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrier_h::Escent,
        ferrier_h::Escent,
        FerrierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrier_h::Escent,
            ferrier_h::Escent,
            FerrierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrier_h::Syncesc,
        ferrier_h::Syncesc,
        FerrierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrier_h::Syncesc,
            ferrier_h::Syncesc,
            FerrierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrier_h::Ctrl,
        ferrier_h::Ctrl,
        FerrierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrier_h::Ctrl,
            ferrier_h::Ctrl,
            FerrierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ferrier_h::Clp0,
        ferrier_h::Clp0,
        FerrierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ferrier_h::Clp0,
            ferrier_h::Clp0,
            FerrierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ferrier_h::Clp1,
        ferrier_h::Clp1,
        FerrierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ferrier_h::Clp1,
            ferrier_h::Clp1,
            FerrierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7ff, 1, 0, u16, u16, FerrierH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7ff,1,0,u16,u16,FerrierH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrierH {
    #[inline(always)]
    fn default() -> FerrierH {
        <crate::RegValueT<FerrierH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrier_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct FerrierHl_SPEC;
impl crate::sealed::RegSpec for FerrierHl_SPEC {
    type DataType = u8;
}

pub type FerrierHl = crate::RegValueT<FerrierHl_SPEC>;

impl FerrierHl {
    #[inline(always)]
    pub fn escent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        ferrier_hl::Escent,
        ferrier_hl::Escent,
        FerrierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            ferrier_hl::Escent,
            ferrier_hl::Escent,
            FerrierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn syncesc(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        ferrier_hl::Syncesc,
        ferrier_hl::Syncesc,
        FerrierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            ferrier_hl::Syncesc,
            ferrier_hl::Syncesc,
            FerrierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn ctrl(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        ferrier_hl::Ctrl,
        ferrier_hl::Ctrl,
        FerrierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            ferrier_hl::Ctrl,
            ferrier_hl::Ctrl,
            FerrierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp0(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        ferrier_hl::Clp0,
        ferrier_hl::Clp0,
        FerrierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            ferrier_hl::Clp0,
            ferrier_hl::Clp0,
            FerrierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clp1(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        ferrier_hl::Clp1,
        ferrier_hl::Clp1,
        FerrierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            ferrier_hl::Clp1,
            ferrier_hl::Clp1,
            FerrierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, FerrierHl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,FerrierHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for FerrierHl {
    #[inline(always)]
    fn default() -> FerrierHl {
        <crate::RegValueT<FerrierHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod ferrier_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Escent_SPEC;
    pub type Escent = crate::EnumBitfieldStruct<u8, Escent_SPEC>;
    impl Escent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Syncesc_SPEC;
    pub type Syncesc = crate::EnumBitfieldStruct<u8, Syncesc_SPEC>;
    impl Syncesc {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Ctrl_SPEC;
    pub type Ctrl = crate::EnumBitfieldStruct<u8, Ctrl_SPEC>;
    impl Ctrl {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp0_SPEC;
    pub type Clp0 = crate::EnumBitfieldStruct<u8, Clp0_SPEC>;
    impl Clp0 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clp1_SPEC;
    pub type Clp1 = crate::EnumBitfieldStruct<u8, Clp1_SPEC>;
    impl Clp1 {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Clstptsetr_SPEC;
impl crate::sealed::RegSpec for Clstptsetr_SPEC {
    type DataType = u32;
}

pub type Clstptsetr = crate::RegValueT<Clstptsetr_SPEC>;

impl Clstptsetr {
    #[inline(always)]
    pub fn clkstpt(
        self,
    ) -> crate::common::RegisterField<2, 0x3ff, 1, 0, u16, u16, Clstptsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3ff,1,0,u16,u16,Clstptsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, u8, Clstptsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<12,0xf,1,0,u8,u8,Clstptsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn clkbfht(
        self,
    ) -> crate::common::RegisterField<16, 0xff, 1, 0, u8, u8, Clstptsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0xff,1,0,u8,u8,Clstptsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn clkkpt(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Clstptsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Clstptsetr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Clstptsetr {
    #[inline(always)]
    fn default() -> Clstptsetr {
        <crate::RegValueT<Clstptsetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ClstptsetrL_SPEC;
impl crate::sealed::RegSpec for ClstptsetrL_SPEC {
    type DataType = u16;
}

pub type ClstptsetrL = crate::RegValueT<ClstptsetrL_SPEC>;

impl ClstptsetrL {
    #[inline(always)]
    pub fn clkstpt(
        self,
    ) -> crate::common::RegisterField<2, 0x3ff, 1, 0, u16, u16, ClstptsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3ff,1,0,u16,u16,ClstptsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<12, 0xf, 1, 0, u8, u8, ClstptsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<12,0xf,1,0,u8,u8,ClstptsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ClstptsetrL {
    #[inline(always)]
    fn default() -> ClstptsetrL {
        <crate::RegValueT<ClstptsetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ClstptsetrLl_SPEC;
impl crate::sealed::RegSpec for ClstptsetrLl_SPEC {
    type DataType = u8;
}

pub type ClstptsetrLl = crate::RegValueT<ClstptsetrLl_SPEC>;

impl ClstptsetrLl {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, u8, ClstptsetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3,1,0,u8,u8,ClstptsetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn clkstpt(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, u8, ClstptsetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3f,1,0,u8,u8,ClstptsetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ClstptsetrLl {
    #[inline(always)]
    fn default() -> ClstptsetrLl {
        <crate::RegValueT<ClstptsetrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ClstptsetrLh_SPEC;
impl crate::sealed::RegSpec for ClstptsetrLh_SPEC {
    type DataType = u8;
}

pub type ClstptsetrLh = crate::RegValueT<ClstptsetrLh_SPEC>;

impl ClstptsetrLh {
    #[inline(always)]
    pub fn clkstpt(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, u8, ClstptsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xf,1,0,u8,u8,ClstptsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, ClstptsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,ClstptsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ClstptsetrLh {
    #[inline(always)]
    fn default() -> ClstptsetrLh {
        <crate::RegValueT<ClstptsetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ClstptsetrH_SPEC;
impl crate::sealed::RegSpec for ClstptsetrH_SPEC {
    type DataType = u16;
}

pub type ClstptsetrH = crate::RegValueT<ClstptsetrH_SPEC>;

impl ClstptsetrH {
    #[inline(always)]
    pub fn clkbfht(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, ClstptsetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,ClstptsetrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn clkkpt(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, ClstptsetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,ClstptsetrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ClstptsetrH {
    #[inline(always)]
    fn default() -> ClstptsetrH {
        <crate::RegValueT<ClstptsetrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ClstptsetrHl_SPEC;
impl crate::sealed::RegSpec for ClstptsetrHl_SPEC {
    type DataType = u8;
}

pub type ClstptsetrHl = crate::RegValueT<ClstptsetrHl_SPEC>;

impl ClstptsetrHl {
    #[inline(always)]
    pub fn clkbfht(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, ClstptsetrHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,ClstptsetrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ClstptsetrHl {
    #[inline(always)]
    fn default() -> ClstptsetrHl {
        <crate::RegValueT<ClstptsetrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct ClstptsetrHh_SPEC;
impl crate::sealed::RegSpec for ClstptsetrHh_SPEC {
    type DataType = u8;
}

pub type ClstptsetrHh = crate::RegValueT<ClstptsetrHh_SPEC>;

impl ClstptsetrHh {
    #[inline(always)]
    pub fn clkkpt(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, ClstptsetrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,ClstptsetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for ClstptsetrHh {
    #[inline(always)]
    fn default() -> ClstptsetrHh {
        <crate::RegValueT<ClstptsetrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Lptrnstsetr_SPEC;
impl crate::sealed::RegSpec for Lptrnstsetr_SPEC {
    type DataType = u32;
}

pub type Lptrnstsetr = crate::RegValueT<Lptrnstsetr_SPEC>;

impl Lptrnstsetr {
    #[inline(always)]
    pub fn golpbkt(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, u16, Lptrnstsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3ff,1,0,u16,u16,Lptrnstsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x3fffff,
        1,
        0,
        u32,
        u32,
        Lptrnstsetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x3fffff,
            1,
            0,
            u32,
            u32,
            Lptrnstsetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Lptrnstsetr {
    #[inline(always)]
    fn default() -> Lptrnstsetr {
        <crate::RegValueT<Lptrnstsetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LptrnstsetrL_SPEC;
impl crate::sealed::RegSpec for LptrnstsetrL_SPEC {
    type DataType = u16;
}

pub type LptrnstsetrL = crate::RegValueT<LptrnstsetrL_SPEC>;

impl LptrnstsetrL {
    #[inline(always)]
    pub fn golpbkt(
        self,
    ) -> crate::common::RegisterField<0, 0x3ff, 1, 0, u16, u16, LptrnstsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3ff,1,0,u16,u16,LptrnstsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<10, 0x3f, 1, 0, u8, u8, LptrnstsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<10,0x3f,1,0,u8,u8,LptrnstsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for LptrnstsetrL {
    #[inline(always)]
    fn default() -> LptrnstsetrL {
        <crate::RegValueT<LptrnstsetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LptrnstsetrLl_SPEC;
impl crate::sealed::RegSpec for LptrnstsetrLl_SPEC {
    type DataType = u8;
}

pub type LptrnstsetrLl = crate::RegValueT<LptrnstsetrLl_SPEC>;

impl LptrnstsetrLl {
    #[inline(always)]
    pub fn golpbkt(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, LptrnstsetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,LptrnstsetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for LptrnstsetrLl {
    #[inline(always)]
    fn default() -> LptrnstsetrLl {
        <crate::RegValueT<LptrnstsetrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct LptrnstsetrLh_SPEC;
impl crate::sealed::RegSpec for LptrnstsetrLh_SPEC {
    type DataType = u8;
}

pub type LptrnstsetrLh = crate::RegValueT<LptrnstsetrLh_SPEC>;

impl LptrnstsetrLh {
    #[inline(always)]
    pub fn golpbkt(
        self,
    ) -> crate::common::RegisterField<0, 0x3, 1, 0, u8, u8, LptrnstsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3,1,0,u8,u8,LptrnstsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<2, 0x3f, 1, 0, u8, u8, LptrnstsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0x3f,1,0,u8,u8,LptrnstsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for LptrnstsetrLh {
    #[inline(always)]
    fn default() -> LptrnstsetrLh {
        <crate::RegValueT<LptrnstsetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Plsr_SPEC;
impl crate::sealed::RegSpec for Plsr_SPEC {
    type DataType = u32;
}

pub type Plsr = crate::RegValueT<Plsr_SPEC>;

impl Plsr {
    #[inline(always)]
    pub fn cluan(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        plsr::Cluan,
        plsr::Cluan,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            plsr::Cluan,
            plsr::Cluan,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clstp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        plsr::Clstp,
        plsr::Clstp,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            plsr::Clstp,
            plsr::Clstp,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rle(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        plsr::Dl0Rle,
        plsr::Dl0Rle,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            plsr::Dl0Rle,
            plsr::Dl0Rle,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rue(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        plsr::Dl0Rue,
        plsr::Dl0Rue,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            plsr::Dl0Rue,
            plsr::Dl0Rue,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0uan(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plsr::Dl0Uan,
        plsr::Dl0Uan,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plsr::Dl0Uan,
            plsr::Dl0Uan,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1uan(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plsr::Dl1Uan,
        plsr::Dl1Uan,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plsr::Dl1Uan,
            plsr::Dl1Uan,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0stp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        plsr::Dl0Stp,
        plsr::Dl0Stp,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            plsr::Dl0Stp,
            plsr::Dl0Stp,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1stp(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        plsr::Dl1Stp,
        plsr::Dl1Stp,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            plsr::Dl1Stp,
            plsr::Dl1Stp,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plsr::Dl0Rx2Tx,
        plsr::Dl0Rx2Tx,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plsr::Dl0Rx2Tx,
            plsr::Dl0Rx2Tx,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plsr::Dl0Tx2Rx,
        plsr::Dl0Tx2Rx,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plsr::Dl0Tx2Rx,
            plsr::Dl0Tx2Rx,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0dir(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        plsr::Dl0Dir,
        plsr::Dl0Dir,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            plsr::Dl0Dir,
            plsr::Dl0Dir,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        plsr::Clulpent,
        plsr::Clulpent,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            plsr::Clulpent,
            plsr::Clulpent,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        plsr::Clulpext,
        plsr::Clulpext,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            plsr::Clulpext,
            plsr::Clulpext,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        plsr::Cllp2Hs,
        plsr::Cllp2Hs,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            plsr::Cllp2Hs,
            plsr::Cllp2Hs,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        plsr::Clhs2Lp,
        plsr::Clhs2Lp,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            plsr::Clhs2Lp,
            plsr::Clhs2Lp,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        plsr::Dlulpent,
        plsr::Dlulpent,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            plsr::Dlulpent,
            plsr::Dlulpent,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        plsr::Dlulpext,
        plsr::Dlulpext,
        Plsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            plsr::Dlulpext,
            plsr::Dlulpext,
            Plsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, u8, Plsr_SPEC, crate::common::R> {
        crate::common::RegisterField::<30,0x3,1,0,u8,u8,Plsr_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Plsr {
    #[inline(always)]
    fn default() -> Plsr {
        <crate::RegValueT<Plsr_SPEC> as RegisterValue<_>>::new(241)
    }
}
pub mod plsr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cluan_SPEC;
    pub type Cluan = crate::EnumBitfieldStruct<u8, Cluan_SPEC>;
    impl Cluan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clstp_SPEC;
    pub type Clstp = crate::EnumBitfieldStruct<u8, Clstp_SPEC>;
    impl Clstp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rle_SPEC;
    pub type Dl0Rle = crate::EnumBitfieldStruct<u8, Dl0Rle_SPEC>;
    impl Dl0Rle {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rue_SPEC;
    pub type Dl0Rue = crate::EnumBitfieldStruct<u8, Dl0Rue_SPEC>;
    impl Dl0Rue {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Uan_SPEC;
    pub type Dl0Uan = crate::EnumBitfieldStruct<u8, Dl0Uan_SPEC>;
    impl Dl0Uan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Uan_SPEC;
    pub type Dl1Uan = crate::EnumBitfieldStruct<u8, Dl1Uan_SPEC>;
    impl Dl1Uan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Stp_SPEC;
    pub type Dl0Stp = crate::EnumBitfieldStruct<u8, Dl0Stp_SPEC>;
    impl Dl0Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Stp_SPEC;
    pub type Dl1Stp = crate::EnumBitfieldStruct<u8, Dl1Stp_SPEC>;
    impl Dl1Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Dir_SPEC;
    pub type Dl0Dir = crate::EnumBitfieldStruct<u8, Dl0Dir_SPEC>;
    impl Dl0Dir {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlsrL_SPEC;
impl crate::sealed::RegSpec for PlsrL_SPEC {
    type DataType = u16;
}

pub type PlsrL = crate::RegValueT<PlsrL_SPEC>;

impl PlsrL {
    #[inline(always)]
    pub fn cluan(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        plsr_l::Cluan,
        plsr_l::Cluan,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            plsr_l::Cluan,
            plsr_l::Cluan,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clstp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        plsr_l::Clstp,
        plsr_l::Clstp,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            plsr_l::Clstp,
            plsr_l::Clstp,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rle(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        plsr_l::Dl0Rle,
        plsr_l::Dl0Rle,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            plsr_l::Dl0Rle,
            plsr_l::Dl0Rle,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rue(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        plsr_l::Dl0Rue,
        plsr_l::Dl0Rue,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            plsr_l::Dl0Rue,
            plsr_l::Dl0Rue,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0uan(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plsr_l::Dl0Uan,
        plsr_l::Dl0Uan,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plsr_l::Dl0Uan,
            plsr_l::Dl0Uan,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1uan(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plsr_l::Dl1Uan,
        plsr_l::Dl1Uan,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plsr_l::Dl1Uan,
            plsr_l::Dl1Uan,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0stp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        plsr_l::Dl0Stp,
        plsr_l::Dl0Stp,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            plsr_l::Dl0Stp,
            plsr_l::Dl0Stp,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1stp(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        plsr_l::Dl1Stp,
        plsr_l::Dl1Stp,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            plsr_l::Dl1Stp,
            plsr_l::Dl1Stp,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plsr_l::Dl0Rx2Tx,
        plsr_l::Dl0Rx2Tx,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plsr_l::Dl0Rx2Tx,
            plsr_l::Dl0Rx2Tx,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plsr_l::Dl0Tx2Rx,
        plsr_l::Dl0Tx2Rx,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plsr_l::Dl0Tx2Rx,
            plsr_l::Dl0Tx2Rx,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<14, 1, 0, PlsrL_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<14, 1, 0, PlsrL_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn dl0dir(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        plsr_l::Dl0Dir,
        plsr_l::Dl0Dir,
        PlsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            plsr_l::Dl0Dir,
            plsr_l::Dl0Dir,
            PlsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for PlsrL {
    #[inline(always)]
    fn default() -> PlsrL {
        <crate::RegValueT<PlsrL_SPEC> as RegisterValue<_>>::new(241)
    }
}
pub mod plsr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cluan_SPEC;
    pub type Cluan = crate::EnumBitfieldStruct<u8, Cluan_SPEC>;
    impl Cluan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clstp_SPEC;
    pub type Clstp = crate::EnumBitfieldStruct<u8, Clstp_SPEC>;
    impl Clstp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rle_SPEC;
    pub type Dl0Rle = crate::EnumBitfieldStruct<u8, Dl0Rle_SPEC>;
    impl Dl0Rle {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rue_SPEC;
    pub type Dl0Rue = crate::EnumBitfieldStruct<u8, Dl0Rue_SPEC>;
    impl Dl0Rue {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Uan_SPEC;
    pub type Dl0Uan = crate::EnumBitfieldStruct<u8, Dl0Uan_SPEC>;
    impl Dl0Uan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Uan_SPEC;
    pub type Dl1Uan = crate::EnumBitfieldStruct<u8, Dl1Uan_SPEC>;
    impl Dl1Uan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Stp_SPEC;
    pub type Dl0Stp = crate::EnumBitfieldStruct<u8, Dl0Stp_SPEC>;
    impl Dl0Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Stp_SPEC;
    pub type Dl1Stp = crate::EnumBitfieldStruct<u8, Dl1Stp_SPEC>;
    impl Dl1Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Dir_SPEC;
    pub type Dl0Dir = crate::EnumBitfieldStruct<u8, Dl0Dir_SPEC>;
    impl Dl0Dir {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlsrLl_SPEC;
impl crate::sealed::RegSpec for PlsrLl_SPEC {
    type DataType = u8;
}

pub type PlsrLl = crate::RegValueT<PlsrLl_SPEC>;

impl PlsrLl {
    #[inline(always)]
    pub fn cluan(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        plsr_ll::Cluan,
        plsr_ll::Cluan,
        PlsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            plsr_ll::Cluan,
            plsr_ll::Cluan,
            PlsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clstp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        plsr_ll::Clstp,
        plsr_ll::Clstp,
        PlsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            plsr_ll::Clstp,
            plsr_ll::Clstp,
            PlsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rle(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        plsr_ll::Dl0Rle,
        plsr_ll::Dl0Rle,
        PlsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            plsr_ll::Dl0Rle,
            plsr_ll::Dl0Rle,
            PlsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rue(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        plsr_ll::Dl0Rue,
        plsr_ll::Dl0Rue,
        PlsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            plsr_ll::Dl0Rue,
            plsr_ll::Dl0Rue,
            PlsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0uan(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plsr_ll::Dl0Uan,
        plsr_ll::Dl0Uan,
        PlsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plsr_ll::Dl0Uan,
            plsr_ll::Dl0Uan,
            PlsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1uan(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plsr_ll::Dl1Uan,
        plsr_ll::Dl1Uan,
        PlsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plsr_ll::Dl1Uan,
            plsr_ll::Dl1Uan,
            PlsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, PlsrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,PlsrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PlsrLl {
    #[inline(always)]
    fn default() -> PlsrLl {
        <crate::RegValueT<PlsrLl_SPEC> as RegisterValue<_>>::new(241)
    }
}
pub mod plsr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cluan_SPEC;
    pub type Cluan = crate::EnumBitfieldStruct<u8, Cluan_SPEC>;
    impl Cluan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clstp_SPEC;
    pub type Clstp = crate::EnumBitfieldStruct<u8, Clstp_SPEC>;
    impl Clstp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rle_SPEC;
    pub type Dl0Rle = crate::EnumBitfieldStruct<u8, Dl0Rle_SPEC>;
    impl Dl0Rle {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rue_SPEC;
    pub type Dl0Rue = crate::EnumBitfieldStruct<u8, Dl0Rue_SPEC>;
    impl Dl0Rue {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Uan_SPEC;
    pub type Dl0Uan = crate::EnumBitfieldStruct<u8, Dl0Uan_SPEC>;
    impl Dl0Uan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Uan_SPEC;
    pub type Dl1Uan = crate::EnumBitfieldStruct<u8, Dl1Uan_SPEC>;
    impl Dl1Uan {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlsrLh_SPEC;
impl crate::sealed::RegSpec for PlsrLh_SPEC {
    type DataType = u8;
}

pub type PlsrLh = crate::RegValueT<PlsrLh_SPEC>;

impl PlsrLh {
    #[inline(always)]
    pub fn dl0stp(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        plsr_lh::Dl0Stp,
        plsr_lh::Dl0Stp,
        PlsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            plsr_lh::Dl0Stp,
            plsr_lh::Dl0Stp,
            PlsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl1stp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        plsr_lh::Dl1Stp,
        plsr_lh::Dl1Stp,
        PlsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            plsr_lh::Dl1Stp,
            plsr_lh::Dl1Stp,
            PlsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plsr_lh::Dl0Rx2Tx,
        plsr_lh::Dl0Rx2Tx,
        PlsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plsr_lh::Dl0Rx2Tx,
            plsr_lh::Dl0Rx2Tx,
            PlsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plsr_lh::Dl0Tx2Rx,
        plsr_lh::Dl0Tx2Rx,
        PlsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plsr_lh::Dl0Tx2Rx,
            plsr_lh::Dl0Tx2Rx,
            PlsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<6, 1, 0, PlsrLh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<6, 1, 0, PlsrLh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn dl0dir(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        plsr_lh::Dl0Dir,
        plsr_lh::Dl0Dir,
        PlsrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            plsr_lh::Dl0Dir,
            plsr_lh::Dl0Dir,
            PlsrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for PlsrLh {
    #[inline(always)]
    fn default() -> PlsrLh {
        <crate::RegValueT<PlsrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plsr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Stp_SPEC;
    pub type Dl0Stp = crate::EnumBitfieldStruct<u8, Dl0Stp_SPEC>;
    impl Dl0Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl1Stp_SPEC;
    pub type Dl1Stp = crate::EnumBitfieldStruct<u8, Dl1Stp_SPEC>;
    impl Dl1Stp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Dir_SPEC;
    pub type Dl0Dir = crate::EnumBitfieldStruct<u8, Dl0Dir_SPEC>;
    impl Dl0Dir {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlsrH_SPEC;
impl crate::sealed::RegSpec for PlsrH_SPEC {
    type DataType = u16;
}

pub type PlsrH = crate::RegValueT<PlsrH_SPEC>;

impl PlsrH {
    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        plsr_h::Clulpent,
        plsr_h::Clulpent,
        PlsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            plsr_h::Clulpent,
            plsr_h::Clulpent,
            PlsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        plsr_h::Clulpext,
        plsr_h::Clulpext,
        PlsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            plsr_h::Clulpext,
            plsr_h::Clulpext,
            PlsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        plsr_h::Cllp2Hs,
        plsr_h::Cllp2Hs,
        PlsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            plsr_h::Cllp2Hs,
            plsr_h::Cllp2Hs,
            PlsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        plsr_h::Clhs2Lp,
        plsr_h::Clhs2Lp,
        PlsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            plsr_h::Clhs2Lp,
            plsr_h::Clhs2Lp,
            PlsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plsr_h::Dlulpent,
        plsr_h::Dlulpent,
        PlsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plsr_h::Dlulpent,
            plsr_h::Dlulpent,
            PlsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plsr_h::Dlulpext,
        plsr_h::Dlulpext,
        PlsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plsr_h::Dlulpext,
            plsr_h::Dlulpext,
            PlsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, PlsrH_SPEC, crate::common::R> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,PlsrH_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PlsrH {
    #[inline(always)]
    fn default() -> PlsrH {
        <crate::RegValueT<PlsrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plsr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlsrHh_SPEC;
impl crate::sealed::RegSpec for PlsrHh_SPEC {
    type DataType = u8;
}

pub type PlsrHh = crate::RegValueT<PlsrHh_SPEC>;

impl PlsrHh {
    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        plsr_hh::Clulpent,
        plsr_hh::Clulpent,
        PlsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            plsr_hh::Clulpent,
            plsr_hh::Clulpent,
            PlsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        plsr_hh::Clulpext,
        plsr_hh::Clulpext,
        PlsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            plsr_hh::Clulpext,
            plsr_hh::Clulpext,
            PlsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        plsr_hh::Cllp2Hs,
        plsr_hh::Cllp2Hs,
        PlsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            plsr_hh::Cllp2Hs,
            plsr_hh::Cllp2Hs,
            PlsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        plsr_hh::Clhs2Lp,
        plsr_hh::Clhs2Lp,
        PlsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            plsr_hh::Clhs2Lp,
            plsr_hh::Clhs2Lp,
            PlsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plsr_hh::Dlulpent,
        plsr_hh::Dlulpent,
        PlsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plsr_hh::Dlulpent,
            plsr_hh::Dlulpent,
            PlsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plsr_hh::Dlulpext,
        plsr_hh::Dlulpext,
        PlsrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plsr_hh::Dlulpext,
            plsr_hh::Dlulpext,
            PlsrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, PlsrHh_SPEC, crate::common::R> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,PlsrHh_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for PlsrHh {
    #[inline(always)]
    fn default() -> PlsrHh {
        <crate::RegValueT<PlsrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plsr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Plscr_SPEC;
impl crate::sealed::RegSpec for Plscr_SPEC {
    type DataType = u32;
}

pub type Plscr = crate::RegValueT<Plscr_SPEC>;

impl Plscr {
    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plscr::Dl0Rx2Tx,
        plscr::Dl0Rx2Tx,
        Plscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plscr::Dl0Rx2Tx,
            plscr::Dl0Rx2Tx,
            Plscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plscr::Dl0Tx2Rx,
        plscr::Dl0Tx2Rx,
        Plscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plscr::Dl0Tx2Rx,
            plscr::Dl0Tx2Rx,
            Plscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        plscr::Clulpent,
        plscr::Clulpent,
        Plscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            plscr::Clulpent,
            plscr::Clulpent,
            Plscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        plscr::Clulpext,
        plscr::Clulpext,
        Plscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            plscr::Clulpext,
            plscr::Clulpext,
            Plscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        plscr::Cllp2Hs,
        plscr::Cllp2Hs,
        Plscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            plscr::Cllp2Hs,
            plscr::Cllp2Hs,
            Plscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        plscr::Clhs2Lp,
        plscr::Clhs2Lp,
        Plscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            plscr::Clhs2Lp,
            plscr::Clhs2Lp,
            Plscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        plscr::Dlulpent,
        plscr::Dlulpent,
        Plscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            plscr::Dlulpent,
            plscr::Dlulpent,
            Plscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        plscr::Dlulpext,
        plscr::Dlulpext,
        Plscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            plscr::Dlulpext,
            plscr::Dlulpext,
            Plscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, u8, Plscr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<30,0x3,1,0,u8,u8,Plscr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Plscr {
    #[inline(always)]
    fn default() -> Plscr {
        <crate::RegValueT<Plscr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plscr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlscrL_SPEC;
impl crate::sealed::RegSpec for PlscrL_SPEC {
    type DataType = u16;
}

pub type PlscrL = crate::RegValueT<PlscrL_SPEC>;

impl PlscrL {
    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plscr_l::Dl0Rx2Tx,
        plscr_l::Dl0Rx2Tx,
        PlscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plscr_l::Dl0Rx2Tx,
            plscr_l::Dl0Rx2Tx,
            PlscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plscr_l::Dl0Tx2Rx,
        plscr_l::Dl0Tx2Rx,
        PlscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plscr_l::Dl0Tx2Rx,
            plscr_l::Dl0Tx2Rx,
            PlscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, PlscrL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,PlscrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PlscrL {
    #[inline(always)]
    fn default() -> PlscrL {
        <crate::RegValueT<PlscrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plscr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlscrLh_SPEC;
impl crate::sealed::RegSpec for PlscrLh_SPEC {
    type DataType = u8;
}

pub type PlscrLh = crate::RegValueT<PlscrLh_SPEC>;

impl PlscrLh {
    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plscr_lh::Dl0Rx2Tx,
        plscr_lh::Dl0Rx2Tx,
        PlscrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plscr_lh::Dl0Rx2Tx,
            plscr_lh::Dl0Rx2Tx,
            PlscrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plscr_lh::Dl0Tx2Rx,
        plscr_lh::Dl0Tx2Rx,
        PlscrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plscr_lh::Dl0Tx2Rx,
            plscr_lh::Dl0Tx2Rx,
            PlscrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, PlscrLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,PlscrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PlscrLh {
    #[inline(always)]
    fn default() -> PlscrLh {
        <crate::RegValueT<PlscrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plscr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlscrH_SPEC;
impl crate::sealed::RegSpec for PlscrH_SPEC {
    type DataType = u16;
}

pub type PlscrH = crate::RegValueT<PlscrH_SPEC>;

impl PlscrH {
    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        plscr_h::Clulpent,
        plscr_h::Clulpent,
        PlscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            plscr_h::Clulpent,
            plscr_h::Clulpent,
            PlscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        plscr_h::Clulpext,
        plscr_h::Clulpext,
        PlscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            plscr_h::Clulpext,
            plscr_h::Clulpext,
            PlscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        plscr_h::Cllp2Hs,
        plscr_h::Cllp2Hs,
        PlscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            plscr_h::Cllp2Hs,
            plscr_h::Cllp2Hs,
            PlscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        plscr_h::Clhs2Lp,
        plscr_h::Clhs2Lp,
        PlscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            plscr_h::Clhs2Lp,
            plscr_h::Clhs2Lp,
            PlscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plscr_h::Dlulpent,
        plscr_h::Dlulpent,
        PlscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plscr_h::Dlulpent,
            plscr_h::Dlulpent,
            PlscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plscr_h::Dlulpext,
        plscr_h::Dlulpext,
        PlscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plscr_h::Dlulpext,
            plscr_h::Dlulpext,
            PlscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, PlscrH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,PlscrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PlscrH {
    #[inline(always)]
    fn default() -> PlscrH {
        <crate::RegValueT<PlscrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plscr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlscrHh_SPEC;
impl crate::sealed::RegSpec for PlscrHh_SPEC {
    type DataType = u8;
}

pub type PlscrHh = crate::RegValueT<PlscrHh_SPEC>;

impl PlscrHh {
    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        plscr_hh::Clulpent,
        plscr_hh::Clulpent,
        PlscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            plscr_hh::Clulpent,
            plscr_hh::Clulpent,
            PlscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        plscr_hh::Clulpext,
        plscr_hh::Clulpext,
        PlscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            plscr_hh::Clulpext,
            plscr_hh::Clulpext,
            PlscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        plscr_hh::Cllp2Hs,
        plscr_hh::Cllp2Hs,
        PlscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            plscr_hh::Cllp2Hs,
            plscr_hh::Cllp2Hs,
            PlscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        plscr_hh::Clhs2Lp,
        plscr_hh::Clhs2Lp,
        PlscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            plscr_hh::Clhs2Lp,
            plscr_hh::Clhs2Lp,
            PlscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plscr_hh::Dlulpent,
        plscr_hh::Dlulpent,
        PlscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plscr_hh::Dlulpent,
            plscr_hh::Dlulpent,
            PlscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plscr_hh::Dlulpext,
        plscr_hh::Dlulpext,
        PlscrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plscr_hh::Dlulpext,
            plscr_hh::Dlulpext,
            PlscrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, PlscrHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,PlscrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PlscrHh {
    #[inline(always)]
    fn default() -> PlscrHh {
        <crate::RegValueT<PlscrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plscr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Plier_SPEC;
impl crate::sealed::RegSpec for Plier_SPEC {
    type DataType = u32;
}

pub type Plier = crate::RegValueT<Plier_SPEC>;

impl Plier {
    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plier::Dl0Rx2Tx,
        plier::Dl0Rx2Tx,
        Plier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plier::Dl0Rx2Tx,
            plier::Dl0Rx2Tx,
            Plier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plier::Dl0Tx2Rx,
        plier::Dl0Tx2Rx,
        Plier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plier::Dl0Tx2Rx,
            plier::Dl0Tx2Rx,
            Plier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        plier::Clulpent,
        plier::Clulpent,
        Plier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            plier::Clulpent,
            plier::Clulpent,
            Plier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        plier::Clulpext,
        plier::Clulpext,
        Plier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            plier::Clulpext,
            plier::Clulpext,
            Plier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        plier::Cllp2Hs,
        plier::Cllp2Hs,
        Plier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            plier::Cllp2Hs,
            plier::Cllp2Hs,
            Plier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        plier::Clhs2Lp,
        plier::Clhs2Lp,
        Plier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            plier::Clhs2Lp,
            plier::Clhs2Lp,
            Plier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        plier::Dlulpent,
        plier::Dlulpent,
        Plier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            plier::Dlulpent,
            plier::Dlulpent,
            Plier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        plier::Dlulpext,
        plier::Dlulpext,
        Plier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            plier::Dlulpext,
            plier::Dlulpext,
            Plier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, u8, Plier_SPEC, crate::common::RW> {
        crate::common::RegisterField::<30,0x3,1,0,u8,u8,Plier_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Plier {
    #[inline(always)]
    fn default() -> Plier {
        <crate::RegValueT<Plier_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plier {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlierL_SPEC;
impl crate::sealed::RegSpec for PlierL_SPEC {
    type DataType = u16;
}

pub type PlierL = crate::RegValueT<PlierL_SPEC>;

impl PlierL {
    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plier_l::Dl0Rx2Tx,
        plier_l::Dl0Rx2Tx,
        PlierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plier_l::Dl0Rx2Tx,
            plier_l::Dl0Rx2Tx,
            PlierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plier_l::Dl0Tx2Rx,
        plier_l::Dl0Tx2Rx,
        PlierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plier_l::Dl0Tx2Rx,
            plier_l::Dl0Tx2Rx,
            PlierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, PlierL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,PlierL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PlierL {
    #[inline(always)]
    fn default() -> PlierL {
        <crate::RegValueT<PlierL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plier_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlierLh_SPEC;
impl crate::sealed::RegSpec for PlierLh_SPEC {
    type DataType = u8;
}

pub type PlierLh = crate::RegValueT<PlierLh_SPEC>;

impl PlierLh {
    #[inline(always)]
    pub fn dl0rx2tx(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plier_lh::Dl0Rx2Tx,
        plier_lh::Dl0Rx2Tx,
        PlierLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plier_lh::Dl0Rx2Tx,
            plier_lh::Dl0Rx2Tx,
            PlierLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dl0tx2rx(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plier_lh::Dl0Tx2Rx,
        plier_lh::Dl0Tx2Rx,
        PlierLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plier_lh::Dl0Tx2Rx,
            plier_lh::Dl0Tx2Rx,
            PlierLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, PlierLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,PlierLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PlierLh {
    #[inline(always)]
    fn default() -> PlierLh {
        <crate::RegValueT<PlierLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plier_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Rx2Tx_SPEC;
    pub type Dl0Rx2Tx = crate::EnumBitfieldStruct<u8, Dl0Rx2Tx_SPEC>;
    impl Dl0Rx2Tx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dl0Tx2Rx_SPEC;
    pub type Dl0Tx2Rx = crate::EnumBitfieldStruct<u8, Dl0Tx2Rx_SPEC>;
    impl Dl0Tx2Rx {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlierH_SPEC;
impl crate::sealed::RegSpec for PlierH_SPEC {
    type DataType = u16;
}

pub type PlierH = crate::RegValueT<PlierH_SPEC>;

impl PlierH {
    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        plier_h::Clulpent,
        plier_h::Clulpent,
        PlierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            plier_h::Clulpent,
            plier_h::Clulpent,
            PlierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        plier_h::Clulpext,
        plier_h::Clulpext,
        PlierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            plier_h::Clulpext,
            plier_h::Clulpext,
            PlierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        plier_h::Cllp2Hs,
        plier_h::Cllp2Hs,
        PlierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            plier_h::Cllp2Hs,
            plier_h::Cllp2Hs,
            PlierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        plier_h::Clhs2Lp,
        plier_h::Clhs2Lp,
        PlierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            plier_h::Clhs2Lp,
            plier_h::Clhs2Lp,
            PlierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        plier_h::Dlulpent,
        plier_h::Dlulpent,
        PlierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            plier_h::Dlulpent,
            plier_h::Dlulpent,
            PlierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        plier_h::Dlulpext,
        plier_h::Dlulpext,
        PlierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            plier_h::Dlulpext,
            plier_h::Dlulpext,
            PlierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, PlierH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,PlierH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PlierH {
    #[inline(always)]
    fn default() -> PlierH {
        <crate::RegValueT<PlierH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plier_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct PlierHh_SPEC;
impl crate::sealed::RegSpec for PlierHh_SPEC {
    type DataType = u8;
}

pub type PlierHh = crate::RegValueT<PlierHh_SPEC>;

impl PlierHh {
    #[inline(always)]
    pub fn clulpent(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        plier_hh::Clulpent,
        plier_hh::Clulpent,
        PlierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            plier_hh::Clulpent,
            plier_hh::Clulpent,
            PlierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clulpext(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        plier_hh::Clulpext,
        plier_hh::Clulpext,
        PlierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            plier_hh::Clulpext,
            plier_hh::Clulpext,
            PlierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn cllp2hs(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        plier_hh::Cllp2Hs,
        plier_hh::Cllp2Hs,
        PlierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            plier_hh::Cllp2Hs,
            plier_hh::Cllp2Hs,
            PlierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn clhs2lp(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        plier_hh::Clhs2Lp,
        plier_hh::Clhs2Lp,
        PlierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            plier_hh::Clhs2Lp,
            plier_hh::Clhs2Lp,
            PlierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpent(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        plier_hh::Dlulpent,
        plier_hh::Dlulpent,
        PlierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            plier_hh::Dlulpent,
            plier_hh::Dlulpent,
            PlierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dlulpext(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        plier_hh::Dlulpext,
        plier_hh::Dlulpext,
        PlierHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            plier_hh::Dlulpext,
            plier_hh::Dlulpext,
            PlierHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, PlierHh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,PlierHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for PlierHh {
    #[inline(always)]
    fn default() -> PlierHh {
        <crate::RegValueT<PlierHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod plier_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpent_SPEC;
    pub type Clulpent = crate::EnumBitfieldStruct<u8, Clulpent_SPEC>;
    impl Clulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clulpext_SPEC;
    pub type Clulpext = crate::EnumBitfieldStruct<u8, Clulpext_SPEC>;
    impl Clulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Cllp2Hs_SPEC;
    pub type Cllp2Hs = crate::EnumBitfieldStruct<u8, Cllp2Hs_SPEC>;
    impl Cllp2Hs {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Clhs2Lp_SPEC;
    pub type Clhs2Lp = crate::EnumBitfieldStruct<u8, Clhs2Lp_SPEC>;
    impl Clhs2Lp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpent_SPEC;
    pub type Dlulpent = crate::EnumBitfieldStruct<u8, Dlulpent_SPEC>;
    impl Dlulpent {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dlulpext_SPEC;
    pub type Dlulpext = crate::EnumBitfieldStruct<u8, Dlulpext_SPEC>;
    impl Dlulpext {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmset0R_SPEC;
impl crate::sealed::RegSpec for Vmset0R_SPEC {
    type DataType = u32;
}

pub type Vmset0R = crate::RegValueT<Vmset0R_SPEC>;

impl Vmset0R {
    #[inline(always)]
    pub fn vstart(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmset0r::Vstart,
        vmset0r::Vstart,
        Vmset0R_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmset0r::Vstart,
            vmset0r::Vstart,
            Vmset0R_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vstop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmset0r::Vstop,
        vmset0r::Vstop,
        Vmset0R_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmset0r::Vstop,
            vmset0r::Vstop,
            Vmset0R_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hsanolp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        vmset0r::Hsanolp,
        vmset0r::Hsanolp,
        Vmset0R_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            vmset0r::Hsanolp,
            vmset0r::Hsanolp,
            Vmset0R_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hbpnolp(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        vmset0r::Hbpnolp,
        vmset0r::Hbpnolp,
        Vmset0R_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            vmset0r::Hbpnolp,
            vmset0r::Hbpnolp,
            Vmset0R_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hfpnolp(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        vmset0r::Hfpnolp,
        vmset0r::Hfpnolp,
        Vmset0R_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            vmset0r::Hfpnolp,
            vmset0r::Hfpnolp,
            Vmset0R_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3ffff, 1, 0, u32, u32, Vmset0R_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<14,0x3ffff,1,0,u32,u32,Vmset0R_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmset0R {
    #[inline(always)]
    fn default() -> Vmset0R {
        <crate::RegValueT<Vmset0R_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmset0r {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vstart_SPEC;
    pub type Vstart = crate::EnumBitfieldStruct<u8, Vstart_SPEC>;
    impl Vstart {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vstop_SPEC;
    pub type Vstop = crate::EnumBitfieldStruct<u8, Vstop_SPEC>;
    impl Vstop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsanolp_SPEC;
    pub type Hsanolp = crate::EnumBitfieldStruct<u8, Hsanolp_SPEC>;
    impl Hsanolp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hbpnolp_SPEC;
    pub type Hbpnolp = crate::EnumBitfieldStruct<u8, Hbpnolp_SPEC>;
    impl Hbpnolp {
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hfpnolp_SPEC;
    pub type Hfpnolp = crate::EnumBitfieldStruct<u8, Hfpnolp_SPEC>;
    impl Hfpnolp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmset0RL_SPEC;
impl crate::sealed::RegSpec for Vmset0RL_SPEC {
    type DataType = u16;
}

pub type Vmset0RL = crate::RegValueT<Vmset0RL_SPEC>;

impl Vmset0RL {
    #[inline(always)]
    pub fn vstart(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmset0r_l::Vstart,
        vmset0r_l::Vstart,
        Vmset0RL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmset0r_l::Vstart,
            vmset0r_l::Vstart,
            Vmset0RL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vstop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmset0r_l::Vstop,
        vmset0r_l::Vstop,
        Vmset0RL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmset0r_l::Vstop,
            vmset0r_l::Vstop,
            Vmset0RL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hsanolp(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        vmset0r_l::Hsanolp,
        vmset0r_l::Hsanolp,
        Vmset0RL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            vmset0r_l::Hsanolp,
            vmset0r_l::Hsanolp,
            Vmset0RL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hbpnolp(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        vmset0r_l::Hbpnolp,
        vmset0r_l::Hbpnolp,
        Vmset0RL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            vmset0r_l::Hbpnolp,
            vmset0r_l::Hbpnolp,
            Vmset0RL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hfpnolp(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        vmset0r_l::Hfpnolp,
        vmset0r_l::Hfpnolp,
        Vmset0RL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            vmset0r_l::Hfpnolp,
            vmset0r_l::Hfpnolp,
            Vmset0RL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, Vmset0RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,Vmset0RL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmset0RL {
    #[inline(always)]
    fn default() -> Vmset0RL {
        <crate::RegValueT<Vmset0RL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmset0r_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vstart_SPEC;
    pub type Vstart = crate::EnumBitfieldStruct<u8, Vstart_SPEC>;
    impl Vstart {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vstop_SPEC;
    pub type Vstop = crate::EnumBitfieldStruct<u8, Vstop_SPEC>;
    impl Vstop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsanolp_SPEC;
    pub type Hsanolp = crate::EnumBitfieldStruct<u8, Hsanolp_SPEC>;
    impl Hsanolp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hbpnolp_SPEC;
    pub type Hbpnolp = crate::EnumBitfieldStruct<u8, Hbpnolp_SPEC>;
    impl Hbpnolp {
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hfpnolp_SPEC;
    pub type Hfpnolp = crate::EnumBitfieldStruct<u8, Hfpnolp_SPEC>;
    impl Hfpnolp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmset0RLl_SPEC;
impl crate::sealed::RegSpec for Vmset0RLl_SPEC {
    type DataType = u8;
}

pub type Vmset0RLl = crate::RegValueT<Vmset0RLl_SPEC>;

impl Vmset0RLl {
    #[inline(always)]
    pub fn vstart(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmset0r_ll::Vstart,
        vmset0r_ll::Vstart,
        Vmset0RLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmset0r_ll::Vstart,
            vmset0r_ll::Vstart,
            Vmset0RLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vstop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmset0r_ll::Vstop,
        vmset0r_ll::Vstop,
        Vmset0RLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmset0r_ll::Vstop,
            vmset0r_ll::Vstop,
            Vmset0RLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, Vmset0RLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,Vmset0RLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmset0RLl {
    #[inline(always)]
    fn default() -> Vmset0RLl {
        <crate::RegValueT<Vmset0RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmset0r_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vstart_SPEC;
    pub type Vstart = crate::EnumBitfieldStruct<u8, Vstart_SPEC>;
    impl Vstart {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vstop_SPEC;
    pub type Vstop = crate::EnumBitfieldStruct<u8, Vstop_SPEC>;
    impl Vstop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmset0RLh_SPEC;
impl crate::sealed::RegSpec for Vmset0RLh_SPEC {
    type DataType = u8;
}

pub type Vmset0RLh = crate::RegValueT<Vmset0RLh_SPEC>;

impl Vmset0RLh {
    #[inline(always)]
    pub fn hsanolp(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmset0r_lh::Hsanolp,
        vmset0r_lh::Hsanolp,
        Vmset0RLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmset0r_lh::Hsanolp,
            vmset0r_lh::Hsanolp,
            Vmset0RLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hbpnolp(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmset0r_lh::Hbpnolp,
        vmset0r_lh::Hbpnolp,
        Vmset0RLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmset0r_lh::Hbpnolp,
            vmset0r_lh::Hbpnolp,
            Vmset0RLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hfpnolp(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        vmset0r_lh::Hfpnolp,
        vmset0r_lh::Hfpnolp,
        Vmset0RLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            vmset0r_lh::Hfpnolp,
            vmset0r_lh::Hfpnolp,
            Vmset0RLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, Vmset0RLh_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,Vmset0RLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmset0RLh {
    #[inline(always)]
    fn default() -> Vmset0RLh {
        <crate::RegValueT<Vmset0RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmset0r_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hsanolp_SPEC;
    pub type Hsanolp = crate::EnumBitfieldStruct<u8, Hsanolp_SPEC>;
    impl Hsanolp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hbpnolp_SPEC;
    pub type Hbpnolp = crate::EnumBitfieldStruct<u8, Hbpnolp_SPEC>;
    impl Hbpnolp {
        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hfpnolp_SPEC;
    pub type Hfpnolp = crate::EnumBitfieldStruct<u8, Hfpnolp_SPEC>;
    impl Hfpnolp {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmset1RL_SPEC;
impl crate::sealed::RegSpec for Vmset1RL_SPEC {
    type DataType = u16;
}

pub type Vmset1RL = crate::RegValueT<Vmset1RL_SPEC>;

impl Vmset1RL {
    #[inline(always)]
    pub fn dly(
        self,
    ) -> crate::common::RegisterField<2, 0xfff, 1, 0, u16, u16, Vmset1RL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<2,0xfff,1,0,u16,u16,Vmset1RL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, Vmset1RL_SPEC, crate::common::RW> {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,Vmset1RL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmset1RL {
    #[inline(always)]
    fn default() -> Vmset1RL {
        <crate::RegValueT<Vmset1RL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmset1RH_SPEC;
impl crate::sealed::RegSpec for Vmset1RH_SPEC {
    type DataType = u16;
}

pub type Vmset1RH = crate::RegValueT<Vmset1RH_SPEC>;

impl Vmset1RH {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Vmset1RH_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15, 1, 0, Vmset1RH_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Vmset1RH {
    #[inline(always)]
    fn default() -> Vmset1RH {
        <crate::RegValueT<Vmset1RH_SPEC> as RegisterValue<_>>::new(4179)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmsr_SPEC;
impl crate::sealed::RegSpec for Vmsr_SPEC {
    type DataType = u32;
}

pub type Vmsr = crate::RegValueT<Vmsr_SPEC>;

impl Vmsr {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmsr::Start,
        vmsr::Start,
        Vmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmsr::Start,
            vmsr::Start,
            Vmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmsr::Stop,
        vmsr::Stop,
        Vmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmsr::Stop,
            vmsr::Stop,
            Vmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        vmsr::Running,
        vmsr::Running,
        Vmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            vmsr::Running,
            vmsr::Running,
            Vmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmsr::Virdy,
        vmsr::Virdy,
        Vmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmsr::Virdy,
            vmsr::Virdy,
            Vmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        vmsr::Timerr,
        vmsr::Timerr,
        Vmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            vmsr::Timerr,
            vmsr::Timerr,
            Vmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        vmsr::Vbufudf,
        vmsr::Vbufudf,
        Vmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            vmsr::Vbufudf,
            vmsr::Vbufudf,
            Vmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        23,
        0x1,
        1,
        0,
        vmsr::Vbufovf,
        vmsr::Vbufovf,
        Vmsr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            23,
            0x1,
            1,
            0,
            vmsr::Vbufovf,
            vmsr::Vbufovf,
            Vmsr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Vmsr_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<31, 1, 0, Vmsr_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Vmsr {
    #[inline(always)]
    fn default() -> Vmsr {
        <crate::RegValueT<Vmsr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmsr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmsrL_SPEC;
impl crate::sealed::RegSpec for VmsrL_SPEC {
    type DataType = u16;
}

pub type VmsrL = crate::RegValueT<VmsrL_SPEC>;

impl VmsrL {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmsr_l::Start,
        vmsr_l::Start,
        VmsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmsr_l::Start,
            vmsr_l::Start,
            VmsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmsr_l::Stop,
        vmsr_l::Stop,
        VmsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmsr_l::Stop,
            vmsr_l::Stop,
            VmsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        vmsr_l::Running,
        vmsr_l::Running,
        VmsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            vmsr_l::Running,
            vmsr_l::Running,
            VmsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmsr_l::Virdy,
        vmsr_l::Virdy,
        VmsrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmsr_l::Virdy,
            vmsr_l::Virdy,
            VmsrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, VmsrL_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15, 1, 0, VmsrL_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmsrL {
    #[inline(always)]
    fn default() -> VmsrL {
        <crate::RegValueT<VmsrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmsr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmsrLl_SPEC;
impl crate::sealed::RegSpec for VmsrLl_SPEC {
    type DataType = u8;
}

pub type VmsrLl = crate::RegValueT<VmsrLl_SPEC>;

impl VmsrLl {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmsr_ll::Start,
        vmsr_ll::Start,
        VmsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmsr_ll::Start,
            vmsr_ll::Start,
            VmsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmsr_ll::Stop,
        vmsr_ll::Stop,
        VmsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmsr_ll::Stop,
            vmsr_ll::Stop,
            VmsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        vmsr_ll::Running,
        vmsr_ll::Running,
        VmsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            vmsr_ll::Running,
            vmsr_ll::Running,
            VmsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmsr_ll::Virdy,
        vmsr_ll::Virdy,
        VmsrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmsr_ll::Virdy,
            vmsr_ll::Virdy,
            VmsrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, VmsrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,VmsrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for VmsrLl {
    #[inline(always)]
    fn default() -> VmsrLl {
        <crate::RegValueT<VmsrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmsr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmsrLh_SPEC;
impl crate::sealed::RegSpec for VmsrLh_SPEC {
    type DataType = u8;
}

pub type VmsrLh = crate::RegValueT<VmsrLh_SPEC>;

impl VmsrLh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, VmsrLh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, VmsrLh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmsrLh {
    #[inline(always)]
    fn default() -> VmsrLh {
        <crate::RegValueT<VmsrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmsrH_SPEC;
impl crate::sealed::RegSpec for VmsrH_SPEC {
    type DataType = u16;
}

pub type VmsrH = crate::RegValueT<VmsrH_SPEC>;

impl VmsrH {
    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        vmsr_h::Timerr,
        vmsr_h::Timerr,
        VmsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            vmsr_h::Timerr,
            vmsr_h::Timerr,
            VmsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        vmsr_h::Vbufudf,
        vmsr_h::Vbufudf,
        VmsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            vmsr_h::Vbufudf,
            vmsr_h::Vbufudf,
            VmsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmsr_h::Vbufovf,
        vmsr_h::Vbufovf,
        VmsrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmsr_h::Vbufovf,
            vmsr_h::Vbufovf,
            VmsrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, VmsrH_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15, 1, 0, VmsrH_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmsrH {
    #[inline(always)]
    fn default() -> VmsrH {
        <crate::RegValueT<VmsrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmsr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmsrHl_SPEC;
impl crate::sealed::RegSpec for VmsrHl_SPEC {
    type DataType = u8;
}

pub type VmsrHl = crate::RegValueT<VmsrHl_SPEC>;

impl VmsrHl {
    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        vmsr_hl::Timerr,
        vmsr_hl::Timerr,
        VmsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            vmsr_hl::Timerr,
            vmsr_hl::Timerr,
            VmsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<5, 1, 0, VmsrHl_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<5, 1, 0, VmsrHl_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        vmsr_hl::Vbufudf,
        vmsr_hl::Vbufudf,
        VmsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            vmsr_hl::Vbufudf,
            vmsr_hl::Vbufudf,
            VmsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmsr_hl::Vbufovf,
        vmsr_hl::Vbufovf,
        VmsrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmsr_hl::Vbufovf,
            vmsr_hl::Vbufovf,
            VmsrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmsrHl {
    #[inline(always)]
    fn default() -> VmsrHl {
        <crate::RegValueT<VmsrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmsr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmsrHh_SPEC;
impl crate::sealed::RegSpec for VmsrHh_SPEC {
    type DataType = u8;
}

pub type VmsrHh = crate::RegValueT<VmsrHh_SPEC>;

impl VmsrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, VmsrHh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, VmsrHh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmsrHh {
    #[inline(always)]
    fn default() -> VmsrHh {
        <crate::RegValueT<VmsrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmscr_SPEC;
impl crate::sealed::RegSpec for Vmscr_SPEC {
    type DataType = u32;
}

pub type Vmscr = crate::RegValueT<Vmscr_SPEC>;

impl Vmscr {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmscr::Start,
        vmscr::Start,
        Vmscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmscr::Start,
            vmscr::Start,
            Vmscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmscr::Stop,
        vmscr::Stop,
        Vmscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmscr::Stop,
            vmscr::Stop,
            Vmscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmscr::Virdy,
        vmscr::Virdy,
        Vmscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmscr::Virdy,
            vmscr::Virdy,
            Vmscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        vmscr::Timerr,
        vmscr::Timerr,
        Vmscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            vmscr::Timerr,
            vmscr::Timerr,
            Vmscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        vmscr::Vbufudf,
        vmscr::Vbufudf,
        Vmscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            vmscr::Vbufudf,
            vmscr::Vbufudf,
            Vmscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        23,
        0x1,
        1,
        0,
        vmscr::Vbufovf,
        vmscr::Vbufovf,
        Vmscr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            23,
            0x1,
            1,
            0,
            vmscr::Vbufovf,
            vmscr::Vbufovf,
            Vmscr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Vmscr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31, 1, 0, Vmscr_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Vmscr {
    #[inline(always)]
    fn default() -> Vmscr {
        <crate::RegValueT<Vmscr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmscr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmscrL_SPEC;
impl crate::sealed::RegSpec for VmscrL_SPEC {
    type DataType = u16;
}

pub type VmscrL = crate::RegValueT<VmscrL_SPEC>;

impl VmscrL {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmscr_l::Start,
        vmscr_l::Start,
        VmscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmscr_l::Start,
            vmscr_l::Start,
            VmscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmscr_l::Stop,
        vmscr_l::Stop,
        VmscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmscr_l::Stop,
            vmscr_l::Stop,
            VmscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmscr_l::Virdy,
        vmscr_l::Virdy,
        VmscrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmscr_l::Virdy,
            vmscr_l::Virdy,
            VmscrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, VmscrL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15, 1, 0, VmscrL_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmscrL {
    #[inline(always)]
    fn default() -> VmscrL {
        <crate::RegValueT<VmscrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmscr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmscrLl_SPEC;
impl crate::sealed::RegSpec for VmscrLl_SPEC {
    type DataType = u8;
}

pub type VmscrLl = crate::RegValueT<VmscrLl_SPEC>;

impl VmscrLl {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmscr_ll::Start,
        vmscr_ll::Start,
        VmscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmscr_ll::Start,
            vmscr_ll::Start,
            VmscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmscr_ll::Stop,
        vmscr_ll::Stop,
        VmscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmscr_ll::Stop,
            vmscr_ll::Stop,
            VmscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmscr_ll::Virdy,
        vmscr_ll::Virdy,
        VmscrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmscr_ll::Virdy,
            vmscr_ll::Virdy,
            VmscrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, VmscrLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,VmscrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmscrLl {
    #[inline(always)]
    fn default() -> VmscrLl {
        <crate::RegValueT<VmscrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmscr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmscrLh_SPEC;
impl crate::sealed::RegSpec for VmscrLh_SPEC {
    type DataType = u8;
}

pub type VmscrLh = crate::RegValueT<VmscrLh_SPEC>;

impl VmscrLh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, VmscrLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, VmscrLh_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmscrLh {
    #[inline(always)]
    fn default() -> VmscrLh {
        <crate::RegValueT<VmscrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmscrH_SPEC;
impl crate::sealed::RegSpec for VmscrH_SPEC {
    type DataType = u16;
}

pub type VmscrH = crate::RegValueT<VmscrH_SPEC>;

impl VmscrH {
    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        vmscr_h::Timerr,
        vmscr_h::Timerr,
        VmscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            vmscr_h::Timerr,
            vmscr_h::Timerr,
            VmscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        vmscr_h::Vbufudf,
        vmscr_h::Vbufudf,
        VmscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            vmscr_h::Vbufudf,
            vmscr_h::Vbufudf,
            VmscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmscr_h::Vbufovf,
        vmscr_h::Vbufovf,
        VmscrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmscr_h::Vbufovf,
            vmscr_h::Vbufovf,
            VmscrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, VmscrH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15, 1, 0, VmscrH_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmscrH {
    #[inline(always)]
    fn default() -> VmscrH {
        <crate::RegValueT<VmscrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmscr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmscrHl_SPEC;
impl crate::sealed::RegSpec for VmscrHl_SPEC {
    type DataType = u8;
}

pub type VmscrHl = crate::RegValueT<VmscrHl_SPEC>;

impl VmscrHl {
    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        vmscr_hl::Timerr,
        vmscr_hl::Timerr,
        VmscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            vmscr_hl::Timerr,
            vmscr_hl::Timerr,
            VmscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<5, 1, 0, VmscrHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<5, 1, 0, VmscrHl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        vmscr_hl::Vbufudf,
        vmscr_hl::Vbufudf,
        VmscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            vmscr_hl::Vbufudf,
            vmscr_hl::Vbufudf,
            VmscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmscr_hl::Vbufovf,
        vmscr_hl::Vbufovf,
        VmscrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmscr_hl::Vbufovf,
            vmscr_hl::Vbufovf,
            VmscrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmscrHl {
    #[inline(always)]
    fn default() -> VmscrHl {
        <crate::RegValueT<VmscrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmscr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmscrHh_SPEC;
impl crate::sealed::RegSpec for VmscrHh_SPEC {
    type DataType = u8;
}

pub type VmscrHh = crate::RegValueT<VmscrHh_SPEC>;

impl VmscrHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, VmscrHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, VmscrHh_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmscrHh {
    #[inline(always)]
    fn default() -> VmscrHh {
        <crate::RegValueT<VmscrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmier_SPEC;
impl crate::sealed::RegSpec for Vmier_SPEC {
    type DataType = u32;
}

pub type Vmier = crate::RegValueT<Vmier_SPEC>;

impl Vmier {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmier::Start,
        vmier::Start,
        Vmier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmier::Start,
            vmier::Start,
            Vmier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmier::Stop,
        vmier::Stop,
        Vmier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmier::Stop,
            vmier::Stop,
            Vmier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmier::Virdy,
        vmier::Virdy,
        Vmier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmier::Virdy,
            vmier::Virdy,
            Vmier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        20,
        0x1,
        1,
        0,
        vmier::Timerr,
        vmier::Timerr,
        Vmier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            20,
            0x1,
            1,
            0,
            vmier::Timerr,
            vmier::Timerr,
            Vmier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        vmier::Vbufudf,
        vmier::Vbufudf,
        Vmier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            vmier::Vbufudf,
            vmier::Vbufudf,
            Vmier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        23,
        0x1,
        1,
        0,
        vmier::Vbufovf,
        vmier::Vbufovf,
        Vmier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            23,
            0x1,
            1,
            0,
            vmier::Vbufovf,
            vmier::Vbufovf,
            Vmier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Vmier_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31, 1, 0, Vmier_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Vmier {
    #[inline(always)]
    fn default() -> Vmier {
        <crate::RegValueT<Vmier_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmier {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmierL_SPEC;
impl crate::sealed::RegSpec for VmierL_SPEC {
    type DataType = u16;
}

pub type VmierL = crate::RegValueT<VmierL_SPEC>;

impl VmierL {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmier_l::Start,
        vmier_l::Start,
        VmierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmier_l::Start,
            vmier_l::Start,
            VmierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmier_l::Stop,
        vmier_l::Stop,
        VmierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmier_l::Stop,
            vmier_l::Stop,
            VmierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmier_l::Virdy,
        vmier_l::Virdy,
        VmierL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmier_l::Virdy,
            vmier_l::Virdy,
            VmierL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, VmierL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15, 1, 0, VmierL_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmierL {
    #[inline(always)]
    fn default() -> VmierL {
        <crate::RegValueT<VmierL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmier_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmierLl_SPEC;
impl crate::sealed::RegSpec for VmierLl_SPEC {
    type DataType = u8;
}

pub type VmierLl = crate::RegValueT<VmierLl_SPEC>;

impl VmierLl {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        vmier_ll::Start,
        vmier_ll::Start,
        VmierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            vmier_ll::Start,
            vmier_ll::Start,
            VmierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn stop(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        vmier_ll::Stop,
        vmier_ll::Stop,
        VmierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            vmier_ll::Stop,
            vmier_ll::Stop,
            VmierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn virdy(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        vmier_ll::Virdy,
        vmier_ll::Virdy,
        VmierLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            vmier_ll::Virdy,
            vmier_ll::Virdy,
            VmierLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, VmierLl_SPEC, crate::common::RW> {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,VmierLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmierLl {
    #[inline(always)]
    fn default() -> VmierLl {
        <crate::RegValueT<VmierLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmier_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Stop_SPEC;
    pub type Stop = crate::EnumBitfieldStruct<u8, Stop_SPEC>;
    impl Stop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Virdy_SPEC;
    pub type Virdy = crate::EnumBitfieldStruct<u8, Virdy_SPEC>;
    impl Virdy {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmierLh_SPEC;
impl crate::sealed::RegSpec for VmierLh_SPEC {
    type DataType = u8;
}

pub type VmierLh = crate::RegValueT<VmierLh_SPEC>;

impl VmierLh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, VmierLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, VmierLh_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmierLh {
    #[inline(always)]
    fn default() -> VmierLh {
        <crate::RegValueT<VmierLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmierH_SPEC;
impl crate::sealed::RegSpec for VmierH_SPEC {
    type DataType = u16;
}

pub type VmierH = crate::RegValueT<VmierH_SPEC>;

impl VmierH {
    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        vmier_h::Timerr,
        vmier_h::Timerr,
        VmierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            vmier_h::Timerr,
            vmier_h::Timerr,
            VmierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        vmier_h::Vbufudf,
        vmier_h::Vbufudf,
        VmierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            vmier_h::Vbufudf,
            vmier_h::Vbufudf,
            VmierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmier_h::Vbufovf,
        vmier_h::Vbufovf,
        VmierH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmier_h::Vbufovf,
            vmier_h::Vbufovf,
            VmierH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, VmierH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15, 1, 0, VmierH_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmierH {
    #[inline(always)]
    fn default() -> VmierH {
        <crate::RegValueT<VmierH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmier_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmierHl_SPEC;
impl crate::sealed::RegSpec for VmierHl_SPEC {
    type DataType = u8;
}

pub type VmierHl = crate::RegValueT<VmierHl_SPEC>;

impl VmierHl {
    #[inline(always)]
    pub fn timerr(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        vmier_hl::Timerr,
        vmier_hl::Timerr,
        VmierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            vmier_hl::Timerr,
            vmier_hl::Timerr,
            VmierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<5, 1, 0, VmierHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<5, 1, 0, VmierHl_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }

    #[inline(always)]
    pub fn vbufudf(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        vmier_hl::Vbufudf,
        vmier_hl::Vbufudf,
        VmierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            vmier_hl::Vbufudf,
            vmier_hl::Vbufudf,
            VmierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vbufovf(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmier_hl::Vbufovf,
        vmier_hl::Vbufovf,
        VmierHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmier_hl::Vbufovf,
            vmier_hl::Vbufovf,
            VmierHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmierHl {
    #[inline(always)]
    fn default() -> VmierHl {
        <crate::RegValueT<VmierHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmier_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Timerr_SPEC;
    pub type Timerr = crate::EnumBitfieldStruct<u8, Timerr_SPEC>;
    impl Timerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufudf_SPEC;
    pub type Vbufudf = crate::EnumBitfieldStruct<u8, Vbufudf_SPEC>;
    impl Vbufudf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vbufovf_SPEC;
    pub type Vbufovf = crate::EnumBitfieldStruct<u8, Vbufovf_SPEC>;
    impl Vbufovf {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmierHh_SPEC;
impl crate::sealed::RegSpec for VmierHh_SPEC {
    type DataType = u8;
}

pub type VmierHh = crate::RegValueT<VmierHh_SPEC>;

impl VmierHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, VmierHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7, 1, 0, VmierHh_SPEC, crate::common::RW>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for VmierHh {
    #[inline(always)]
    fn default() -> VmierHh {
        <crate::RegValueT<VmierHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmppsetr_SPEC;
impl crate::sealed::RegSpec for Vmppsetr_SPEC {
    type DataType = u32;
}

pub type Vmppsetr = crate::RegValueT<Vmppsetr_SPEC>;

impl Vmppsetr {
    #[inline(always)]
    pub fn txesync(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        vmppsetr::Txesync,
        vmppsetr::Txesync,
        Vmppsetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            vmppsetr::Txesync,
            vmppsetr::Txesync,
            Vmppsetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x3f,
        1,
        0,
        vmppsetr::Dt,
        vmppsetr::Dt,
        Vmppsetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x3f,
            1,
            0,
            vmppsetr::Dt,
            vmppsetr::Dt,
            Vmppsetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, u8, Vmppsetr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<22,0x3,1,0,u8,u8,Vmppsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<24, 0xff, 1, 0, u8, u8, Vmppsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<24,0xff,1,0,u8,u8,Vmppsetr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmppsetr {
    #[inline(always)]
    fn default() -> Vmppsetr {
        <crate::RegValueT<Vmppsetr_SPEC> as RegisterValue<_>>::new(917504)
    }
}
pub mod vmppsetr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txesync_SPEC;
    pub type Txesync = crate::EnumBitfieldStruct<u8, Txesync_SPEC>;
    impl Txesync {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dt_SPEC;
    pub type Dt = crate::EnumBitfieldStruct<u8, Dt_SPEC>;
    impl Dt {
        pub const _001110: Self = Self::new(14);

        pub const _011110: Self = Self::new(30);

        pub const _111110: Self = Self::new(62);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmppsetrL_SPEC;
impl crate::sealed::RegSpec for VmppsetrL_SPEC {
    type DataType = u16;
}

pub type VmppsetrL = crate::RegValueT<VmppsetrL_SPEC>;

impl VmppsetrL {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0x7ff, 1, 0, u16, u16, VmppsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x7ff,1,0,u16,u16,VmppsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn txesync(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        vmppsetr_l::Txesync,
        vmppsetr_l::Txesync,
        VmppsetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            vmppsetr_l::Txesync,
            vmppsetr_l::Txesync,
            VmppsetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmppsetrL {
    #[inline(always)]
    fn default() -> VmppsetrL {
        <crate::RegValueT<VmppsetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmppsetr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txesync_SPEC;
    pub type Txesync = crate::EnumBitfieldStruct<u8, Txesync_SPEC>;
    impl Txesync {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmppsetrLl_SPEC;
impl crate::sealed::RegSpec for VmppsetrLl_SPEC {
    type DataType = u8;
}

pub type VmppsetrLl = crate::RegValueT<VmppsetrLl_SPEC>;

impl VmppsetrLl {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, VmppsetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,VmppsetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmppsetrLl {
    #[inline(always)]
    fn default() -> VmppsetrLl {
        <crate::RegValueT<VmppsetrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmppsetrLh_SPEC;
impl crate::sealed::RegSpec for VmppsetrLh_SPEC {
    type DataType = u8;
}

pub type VmppsetrLh = crate::RegValueT<VmppsetrLh_SPEC>;

impl VmppsetrLh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, u8, VmppsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x7f,1,0,u8,u8,VmppsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn txesync(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmppsetr_lh::Txesync,
        vmppsetr_lh::Txesync,
        VmppsetrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmppsetr_lh::Txesync,
            vmppsetr_lh::Txesync,
            VmppsetrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmppsetrLh {
    #[inline(always)]
    fn default() -> VmppsetrLh {
        <crate::RegValueT<VmppsetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmppsetr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txesync_SPEC;
    pub type Txesync = crate::EnumBitfieldStruct<u8, Txesync_SPEC>;
    impl Txesync {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmppsetrH_SPEC;
impl crate::sealed::RegSpec for VmppsetrH_SPEC {
    type DataType = u16;
}

pub type VmppsetrH = crate::RegValueT<VmppsetrH_SPEC>;

impl VmppsetrH {
    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x3f,
        1,
        0,
        vmppsetr_h::Dt,
        vmppsetr_h::Dt,
        VmppsetrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x3f,
            1,
            0,
            vmppsetr_h::Dt,
            vmppsetr_h::Dt,
            VmppsetrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, VmppsetrH_SPEC, crate::common::RW> {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,VmppsetrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, VmppsetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,VmppsetrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmppsetrH {
    #[inline(always)]
    fn default() -> VmppsetrH {
        <crate::RegValueT<VmppsetrH_SPEC> as RegisterValue<_>>::new(14)
    }
}
pub mod vmppsetr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dt_SPEC;
    pub type Dt = crate::EnumBitfieldStruct<u8, Dt_SPEC>;
    impl Dt {
        pub const _001110: Self = Self::new(14);

        pub const _011110: Self = Self::new(30);

        pub const _111110: Self = Self::new(62);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmppsetrHl_SPEC;
impl crate::sealed::RegSpec for VmppsetrHl_SPEC {
    type DataType = u8;
}

pub type VmppsetrHl = crate::RegValueT<VmppsetrHl_SPEC>;

impl VmppsetrHl {
    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x3f,
        1,
        0,
        vmppsetr_hl::Dt,
        vmppsetr_hl::Dt,
        VmppsetrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x3f,
            1,
            0,
            vmppsetr_hl::Dt,
            vmppsetr_hl::Dt,
            VmppsetrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, VmppsetrHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,VmppsetrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmppsetrHl {
    #[inline(always)]
    fn default() -> VmppsetrHl {
        <crate::RegValueT<VmppsetrHl_SPEC> as RegisterValue<_>>::new(14)
    }
}
pub mod vmppsetr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dt_SPEC;
    pub type Dt = crate::EnumBitfieldStruct<u8, Dt_SPEC>;
    impl Dt {
        pub const _001110: Self = Self::new(14);

        pub const _011110: Self = Self::new(30);

        pub const _111110: Self = Self::new(62);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmvssetr_SPEC;
impl crate::sealed::RegSpec for Vmvssetr_SPEC {
    type DataType = u32;
}

pub type Vmvssetr = crate::RegValueT<Vmvssetr_SPEC>;

impl Vmvssetr {
    #[inline(always)]
    pub fn vsa(
        self,
    ) -> crate::common::RegisterField<0, 0xfff, 1, 0, u16, u16, Vmvssetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xfff,1,0,u16,u16,Vmvssetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vspol(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        vmvssetr::Vspol,
        vmvssetr::Vspol,
        Vmvssetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            vmvssetr::Vspol,
            vmvssetr::Vspol,
            Vmvssetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn vact(
        self,
    ) -> crate::common::RegisterField<16, 0x7fff, 1, 0, u16, u16, Vmvssetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0x7fff,1,0,u16,u16,Vmvssetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Vmvssetr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31,1,0,Vmvssetr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmvssetr {
    #[inline(always)]
    fn default() -> Vmvssetr {
        <crate::RegValueT<Vmvssetr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmvssetr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vspol_SPEC;
    pub type Vspol = crate::EnumBitfieldStruct<u8, Vspol_SPEC>;
    impl Vspol {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvssetrL_SPEC;
impl crate::sealed::RegSpec for VmvssetrL_SPEC {
    type DataType = u16;
}

pub type VmvssetrL = crate::RegValueT<VmvssetrL_SPEC>;

impl VmvssetrL {
    #[inline(always)]
    pub fn vsa(
        self,
    ) -> crate::common::RegisterField<0, 0xfff, 1, 0, u16, u16, VmvssetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xfff,1,0,u16,u16,VmvssetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, u8, VmvssetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<12,0x7,1,0,u8,u8,VmvssetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vspol(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        vmvssetr_l::Vspol,
        vmvssetr_l::Vspol,
        VmvssetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            vmvssetr_l::Vspol,
            vmvssetr_l::Vspol,
            VmvssetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmvssetrL {
    #[inline(always)]
    fn default() -> VmvssetrL {
        <crate::RegValueT<VmvssetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmvssetr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vspol_SPEC;
    pub type Vspol = crate::EnumBitfieldStruct<u8, Vspol_SPEC>;
    impl Vspol {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvssetrLl_SPEC;
impl crate::sealed::RegSpec for VmvssetrLl_SPEC {
    type DataType = u8;
}

pub type VmvssetrLl = crate::RegValueT<VmvssetrLl_SPEC>;

impl VmvssetrLl {
    #[inline(always)]
    pub fn vsa(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, VmvssetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,VmvssetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvssetrLl {
    #[inline(always)]
    fn default() -> VmvssetrLl {
        <crate::RegValueT<VmvssetrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvssetrLh_SPEC;
impl crate::sealed::RegSpec for VmvssetrLh_SPEC {
    type DataType = u8;
}

pub type VmvssetrLh = crate::RegValueT<VmvssetrLh_SPEC>;

impl VmvssetrLh {
    #[inline(always)]
    pub fn vsa(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, u8, VmvssetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xf,1,0,u8,u8,VmvssetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0x7, 1, 0, u8, u8, VmvssetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x7,1,0,u8,u8,VmvssetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vspol(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmvssetr_lh::Vspol,
        vmvssetr_lh::Vspol,
        VmvssetrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmvssetr_lh::Vspol,
            vmvssetr_lh::Vspol,
            VmvssetrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmvssetrLh {
    #[inline(always)]
    fn default() -> VmvssetrLh {
        <crate::RegValueT<VmvssetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmvssetr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Vspol_SPEC;
    pub type Vspol = crate::EnumBitfieldStruct<u8, Vspol_SPEC>;
    impl Vspol {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvssetrH_SPEC;
impl crate::sealed::RegSpec for VmvssetrH_SPEC {
    type DataType = u16;
}

pub type VmvssetrH = crate::RegValueT<VmvssetrH_SPEC>;

impl VmvssetrH {
    #[inline(always)]
    pub fn vact(
        self,
    ) -> crate::common::RegisterField<0, 0x7fff, 1, 0, u16, u16, VmvssetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x7fff,1,0,u16,u16,VmvssetrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, VmvssetrH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,VmvssetrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvssetrH {
    #[inline(always)]
    fn default() -> VmvssetrH {
        <crate::RegValueT<VmvssetrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvssetrHl_SPEC;
impl crate::sealed::RegSpec for VmvssetrHl_SPEC {
    type DataType = u8;
}

pub type VmvssetrHl = crate::RegValueT<VmvssetrHl_SPEC>;

impl VmvssetrHl {
    #[inline(always)]
    pub fn vact(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, VmvssetrHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,VmvssetrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvssetrHl {
    #[inline(always)]
    fn default() -> VmvssetrHl {
        <crate::RegValueT<VmvssetrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvssetrHh_SPEC;
impl crate::sealed::RegSpec for VmvssetrHh_SPEC {
    type DataType = u8;
}

pub type VmvssetrHh = crate::RegValueT<VmvssetrHh_SPEC>;

impl VmvssetrHh {
    #[inline(always)]
    pub fn vact(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, u8, VmvssetrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x7f,1,0,u8,u8,VmvssetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, VmvssetrHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,VmvssetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvssetrHh {
    #[inline(always)]
    fn default() -> VmvssetrHh {
        <crate::RegValueT<VmvssetrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmvpsetr_SPEC;
impl crate::sealed::RegSpec for Vmvpsetr_SPEC {
    type DataType = u32;
}

pub type Vmvpsetr = crate::RegValueT<Vmvpsetr_SPEC>;

impl Vmvpsetr {
    #[inline(always)]
    pub fn vbp(
        self,
    ) -> crate::common::RegisterField<0, 0x1fff, 1, 0, u16, u16, Vmvpsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1fff,1,0,u16,u16,Vmvpsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vfp(
        self,
    ) -> crate::common::RegisterField<16, 0x1fff, 1, 0, u16, u16, Vmvpsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0x1fff,1,0,u16,u16,Vmvpsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<29, 0x7, 1, 0, u8, u8, Vmvpsetr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x7,1,0,u8,u8,Vmvpsetr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmvpsetr {
    #[inline(always)]
    fn default() -> Vmvpsetr {
        <crate::RegValueT<Vmvpsetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvpsetrL_SPEC;
impl crate::sealed::RegSpec for VmvpsetrL_SPEC {
    type DataType = u16;
}

pub type VmvpsetrL = crate::RegValueT<VmvpsetrL_SPEC>;

impl VmvpsetrL {
    #[inline(always)]
    pub fn vbp(
        self,
    ) -> crate::common::RegisterField<0, 0x1fff, 1, 0, u16, u16, VmvpsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1fff,1,0,u16,u16,VmvpsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, u8, VmvpsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<13,0x7,1,0,u8,u8,VmvpsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvpsetrL {
    #[inline(always)]
    fn default() -> VmvpsetrL {
        <crate::RegValueT<VmvpsetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvpsetrLl_SPEC;
impl crate::sealed::RegSpec for VmvpsetrLl_SPEC {
    type DataType = u8;
}

pub type VmvpsetrLl = crate::RegValueT<VmvpsetrLl_SPEC>;

impl VmvpsetrLl {
    #[inline(always)]
    pub fn vbp(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, VmvpsetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,VmvpsetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvpsetrLl {
    #[inline(always)]
    fn default() -> VmvpsetrLl {
        <crate::RegValueT<VmvpsetrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvpsetrLh_SPEC;
impl crate::sealed::RegSpec for VmvpsetrLh_SPEC {
    type DataType = u8;
}

pub type VmvpsetrLh = crate::RegValueT<VmvpsetrLh_SPEC>;

impl VmvpsetrLh {
    #[inline(always)]
    pub fn vbp(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, u8, VmvpsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1f,1,0,u8,u8,VmvpsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, VmvpsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,VmvpsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvpsetrLh {
    #[inline(always)]
    fn default() -> VmvpsetrLh {
        <crate::RegValueT<VmvpsetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvpsetrH_SPEC;
impl crate::sealed::RegSpec for VmvpsetrH_SPEC {
    type DataType = u16;
}

pub type VmvpsetrH = crate::RegValueT<VmvpsetrH_SPEC>;

impl VmvpsetrH {
    #[inline(always)]
    pub fn vfp(
        self,
    ) -> crate::common::RegisterField<0, 0x1fff, 1, 0, u16, u16, VmvpsetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1fff,1,0,u16,u16,VmvpsetrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, u8, VmvpsetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<13,0x7,1,0,u8,u8,VmvpsetrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvpsetrH {
    #[inline(always)]
    fn default() -> VmvpsetrH {
        <crate::RegValueT<VmvpsetrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvpsetrHl_SPEC;
impl crate::sealed::RegSpec for VmvpsetrHl_SPEC {
    type DataType = u8;
}

pub type VmvpsetrHl = crate::RegValueT<VmvpsetrHl_SPEC>;

impl VmvpsetrHl {
    #[inline(always)]
    pub fn vfp(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, VmvpsetrHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,VmvpsetrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvpsetrHl {
    #[inline(always)]
    fn default() -> VmvpsetrHl {
        <crate::RegValueT<VmvpsetrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmvpsetrHh_SPEC;
impl crate::sealed::RegSpec for VmvpsetrHh_SPEC {
    type DataType = u8;
}

pub type VmvpsetrHh = crate::RegValueT<VmvpsetrHh_SPEC>;

impl VmvpsetrHh {
    #[inline(always)]
    pub fn vfp(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, u8, VmvpsetrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1f,1,0,u8,u8,VmvpsetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, VmvpsetrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,VmvpsetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmvpsetrHh {
    #[inline(always)]
    fn default() -> VmvpsetrHh {
        <crate::RegValueT<VmvpsetrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmhssetr_SPEC;
impl crate::sealed::RegSpec for Vmhssetr_SPEC {
    type DataType = u32;
}

pub type Vmhssetr = crate::RegValueT<Vmhssetr_SPEC>;

impl Vmhssetr {
    #[inline(always)]
    pub fn hsa(
        self,
    ) -> crate::common::RegisterField<0, 0xfff, 1, 0, u16, u16, Vmhssetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xfff,1,0,u16,u16,Vmhssetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn hspol(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        vmhssetr::Hspol,
        vmhssetr::Hspol,
        Vmhssetr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            vmhssetr::Hspol,
            vmhssetr::Hspol,
            Vmhssetr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn hact(
        self,
    ) -> crate::common::RegisterField<16, 0x7fff, 1, 0, u16, u16, Vmhssetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0x7fff,1,0,u16,u16,Vmhssetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Vmhssetr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31,1,0,Vmhssetr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmhssetr {
    #[inline(always)]
    fn default() -> Vmhssetr {
        <crate::RegValueT<Vmhssetr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmhssetr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hspol_SPEC;
    pub type Hspol = crate::EnumBitfieldStruct<u8, Hspol_SPEC>;
    impl Hspol {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhssetrL_SPEC;
impl crate::sealed::RegSpec for VmhssetrL_SPEC {
    type DataType = u16;
}

pub type VmhssetrL = crate::RegValueT<VmhssetrL_SPEC>;

impl VmhssetrL {
    #[inline(always)]
    pub fn hsa(
        self,
    ) -> crate::common::RegisterField<0, 0xfff, 1, 0, u16, u16, VmhssetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xfff,1,0,u16,u16,VmhssetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<12, 0x7, 1, 0, u8, u8, VmhssetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<12,0x7,1,0,u8,u8,VmhssetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn hspol(
        self,
    ) -> crate::common::RegisterField<
        15,
        0x1,
        1,
        0,
        vmhssetr_l::Hspol,
        vmhssetr_l::Hspol,
        VmhssetrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            15,
            0x1,
            1,
            0,
            vmhssetr_l::Hspol,
            vmhssetr_l::Hspol,
            VmhssetrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmhssetrL {
    #[inline(always)]
    fn default() -> VmhssetrL {
        <crate::RegValueT<VmhssetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmhssetr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hspol_SPEC;
    pub type Hspol = crate::EnumBitfieldStruct<u8, Hspol_SPEC>;
    impl Hspol {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhssetrLl_SPEC;
impl crate::sealed::RegSpec for VmhssetrLl_SPEC {
    type DataType = u8;
}

pub type VmhssetrLl = crate::RegValueT<VmhssetrLl_SPEC>;

impl VmhssetrLl {
    #[inline(always)]
    pub fn hsa(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, VmhssetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,VmhssetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhssetrLl {
    #[inline(always)]
    fn default() -> VmhssetrLl {
        <crate::RegValueT<VmhssetrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhssetrLh_SPEC;
impl crate::sealed::RegSpec for VmhssetrLh_SPEC {
    type DataType = u8;
}

pub type VmhssetrLh = crate::RegValueT<VmhssetrLh_SPEC>;

impl VmhssetrLh {
    #[inline(always)]
    pub fn hsa(
        self,
    ) -> crate::common::RegisterField<0, 0xf, 1, 0, u8, u8, VmhssetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xf,1,0,u8,u8,VmhssetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0x7, 1, 0, u8, u8, VmhssetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0x7,1,0,u8,u8,VmhssetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn hspol(
        self,
    ) -> crate::common::RegisterField<
        7,
        0x1,
        1,
        0,
        vmhssetr_lh::Hspol,
        vmhssetr_lh::Hspol,
        VmhssetrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            7,
            0x1,
            1,
            0,
            vmhssetr_lh::Hspol,
            vmhssetr_lh::Hspol,
            VmhssetrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for VmhssetrLh {
    #[inline(always)]
    fn default() -> VmhssetrLh {
        <crate::RegValueT<VmhssetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod vmhssetr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Hspol_SPEC;
    pub type Hspol = crate::EnumBitfieldStruct<u8, Hspol_SPEC>;
    impl Hspol {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhssetrH_SPEC;
impl crate::sealed::RegSpec for VmhssetrH_SPEC {
    type DataType = u16;
}

pub type VmhssetrH = crate::RegValueT<VmhssetrH_SPEC>;

impl VmhssetrH {
    #[inline(always)]
    pub fn hact(
        self,
    ) -> crate::common::RegisterField<0, 0x7fff, 1, 0, u16, u16, VmhssetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x7fff,1,0,u16,u16,VmhssetrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, VmhssetrH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,VmhssetrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhssetrH {
    #[inline(always)]
    fn default() -> VmhssetrH {
        <crate::RegValueT<VmhssetrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhssetrHl_SPEC;
impl crate::sealed::RegSpec for VmhssetrHl_SPEC {
    type DataType = u8;
}

pub type VmhssetrHl = crate::RegValueT<VmhssetrHl_SPEC>;

impl VmhssetrHl {
    #[inline(always)]
    pub fn hact(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, VmhssetrHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,VmhssetrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhssetrHl {
    #[inline(always)]
    fn default() -> VmhssetrHl {
        <crate::RegValueT<VmhssetrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhssetrHh_SPEC;
impl crate::sealed::RegSpec for VmhssetrHh_SPEC {
    type DataType = u8;
}

pub type VmhssetrHh = crate::RegValueT<VmhssetrHh_SPEC>;

impl VmhssetrHh {
    #[inline(always)]
    pub fn hact(
        self,
    ) -> crate::common::RegisterField<0, 0x7f, 1, 0, u8, u8, VmhssetrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x7f,1,0,u8,u8,VmhssetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, VmhssetrHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,VmhssetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhssetrHh {
    #[inline(always)]
    fn default() -> VmhssetrHh {
        <crate::RegValueT<VmhssetrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Vmhpsetr_SPEC;
impl crate::sealed::RegSpec for Vmhpsetr_SPEC {
    type DataType = u32;
}

pub type Vmhpsetr = crate::RegValueT<Vmhpsetr_SPEC>;

impl Vmhpsetr {
    #[inline(always)]
    pub fn hbp(
        self,
    ) -> crate::common::RegisterField<0, 0x1fff, 1, 0, u16, u16, Vmhpsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1fff,1,0,u16,u16,Vmhpsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn hfp(
        self,
    ) -> crate::common::RegisterField<16, 0x1fff, 1, 0, u16, u16, Vmhpsetr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0x1fff,1,0,u16,u16,Vmhpsetr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<29, 0x7, 1, 0, u8, u8, Vmhpsetr_SPEC, crate::common::RW> {
        crate::common::RegisterField::<29,0x7,1,0,u8,u8,Vmhpsetr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Vmhpsetr {
    #[inline(always)]
    fn default() -> Vmhpsetr {
        <crate::RegValueT<Vmhpsetr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhpsetrL_SPEC;
impl crate::sealed::RegSpec for VmhpsetrL_SPEC {
    type DataType = u16;
}

pub type VmhpsetrL = crate::RegValueT<VmhpsetrL_SPEC>;

impl VmhpsetrL {
    #[inline(always)]
    pub fn hbp(
        self,
    ) -> crate::common::RegisterField<0, 0x1fff, 1, 0, u16, u16, VmhpsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1fff,1,0,u16,u16,VmhpsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, u8, VmhpsetrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<13,0x7,1,0,u8,u8,VmhpsetrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhpsetrL {
    #[inline(always)]
    fn default() -> VmhpsetrL {
        <crate::RegValueT<VmhpsetrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhpsetrLl_SPEC;
impl crate::sealed::RegSpec for VmhpsetrLl_SPEC {
    type DataType = u8;
}

pub type VmhpsetrLl = crate::RegValueT<VmhpsetrLl_SPEC>;

impl VmhpsetrLl {
    #[inline(always)]
    pub fn hbp(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, VmhpsetrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,VmhpsetrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhpsetrLl {
    #[inline(always)]
    fn default() -> VmhpsetrLl {
        <crate::RegValueT<VmhpsetrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhpsetrLh_SPEC;
impl crate::sealed::RegSpec for VmhpsetrLh_SPEC {
    type DataType = u8;
}

pub type VmhpsetrLh = crate::RegValueT<VmhpsetrLh_SPEC>;

impl VmhpsetrLh {
    #[inline(always)]
    pub fn hbp(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, u8, VmhpsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1f,1,0,u8,u8,VmhpsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, VmhpsetrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,VmhpsetrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhpsetrLh {
    #[inline(always)]
    fn default() -> VmhpsetrLh {
        <crate::RegValueT<VmhpsetrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhpsetrH_SPEC;
impl crate::sealed::RegSpec for VmhpsetrH_SPEC {
    type DataType = u16;
}

pub type VmhpsetrH = crate::RegValueT<VmhpsetrH_SPEC>;

impl VmhpsetrH {
    #[inline(always)]
    pub fn hfp(
        self,
    ) -> crate::common::RegisterField<0, 0x1fff, 1, 0, u16, u16, VmhpsetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1fff,1,0,u16,u16,VmhpsetrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<13, 0x7, 1, 0, u8, u8, VmhpsetrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<13,0x7,1,0,u8,u8,VmhpsetrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhpsetrH {
    #[inline(always)]
    fn default() -> VmhpsetrH {
        <crate::RegValueT<VmhpsetrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhpsetrHl_SPEC;
impl crate::sealed::RegSpec for VmhpsetrHl_SPEC {
    type DataType = u8;
}

pub type VmhpsetrHl = crate::RegValueT<VmhpsetrHl_SPEC>;

impl VmhpsetrHl {
    #[inline(always)]
    pub fn hfp(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, VmhpsetrHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,VmhpsetrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhpsetrHl {
    #[inline(always)]
    fn default() -> VmhpsetrHl {
        <crate::RegValueT<VmhpsetrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct VmhpsetrHh_SPEC;
impl crate::sealed::RegSpec for VmhpsetrHh_SPEC {
    type DataType = u8;
}

pub type VmhpsetrHh = crate::RegValueT<VmhpsetrHh_SPEC>;

impl VmhpsetrHh {
    #[inline(always)]
    pub fn hfp(
        self,
    ) -> crate::common::RegisterField<0, 0x1f, 1, 0, u8, u8, VmhpsetrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x1f,1,0,u8,u8,VmhpsetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, VmhpsetrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,VmhpsetrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for VmhpsetrHh {
    #[inline(always)]
    fn default() -> VmhpsetrHh {
        <crate::RegValueT<VmhpsetrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Set0R_SPEC;
impl crate::sealed::RegSpec for Sqch0Set0R_SPEC {
    type DataType = u32;
}

pub type Sqch0Set0R = crate::RegValueT<Sqch0Set0R_SPEC>;

impl Sqch0Set0R {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0set0r::Start,
        sqch0set0r::Start,
        Sqch0Set0R_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0set0r::Start,
            sqch0set0r::Start,
            Sqch0Set0R_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Sqch0Set0R_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31,1,0,Sqch0Set0R_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Set0R {
    #[inline(always)]
    fn default() -> Sqch0Set0R {
        <crate::RegValueT<Sqch0Set0R_SPEC> as RegisterValue<_>>::new(8388608)
    }
}
pub mod sqch0set0r {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Set0RL_SPEC;
impl crate::sealed::RegSpec for Sqch0Set0RL_SPEC {
    type DataType = u16;
}

pub type Sqch0Set0RL = crate::RegValueT<Sqch0Set0RL_SPEC>;

impl Sqch0Set0RL {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0set0r_l::Start,
        sqch0set0r_l::Start,
        Sqch0Set0RL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0set0r_l::Start,
            sqch0set0r_l::Start,
            Sqch0Set0RL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, u8, Sqch0Set0RL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<9,0x7f,1,0,u8,u8,Sqch0Set0RL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Set0RL {
    #[inline(always)]
    fn default() -> Sqch0Set0RL {
        <crate::RegValueT<Sqch0Set0RL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0set0r_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Set0RLl_SPEC;
impl crate::sealed::RegSpec for Sqch0Set0RLl_SPEC {
    type DataType = u8;
}

pub type Sqch0Set0RLl = crate::RegValueT<Sqch0Set0RLl_SPEC>;

impl Sqch0Set0RLl {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0set0r_ll::Start,
        sqch0set0r_ll::Start,
        Sqch0Set0RLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0set0r_ll::Start,
            sqch0set0r_ll::Start,
            Sqch0Set0RLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, Sqch0Set0RLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,Sqch0Set0RLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Set0RLl {
    #[inline(always)]
    fn default() -> Sqch0Set0RLl {
        <crate::RegValueT<Sqch0Set0RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0set0r_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Set0RLh_SPEC;
impl crate::sealed::RegSpec for Sqch0Set0RLh_SPEC {
    type DataType = u8;
}

pub type Sqch0Set0RLh = crate::RegValueT<Sqch0Set0RLh_SPEC>;

impl Sqch0Set0RLh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, u8, Sqch0Set0RLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x7f,1,0,u8,u8,Sqch0Set0RLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Set0RLh {
    #[inline(always)]
    fn default() -> Sqch0Set0RLh {
        <crate::RegValueT<Sqch0Set0RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Set0RH_SPEC;
impl crate::sealed::RegSpec for Sqch0Set0RH_SPEC {
    type DataType = u16;
}

pub type Sqch0Set0RH = crate::RegValueT<Sqch0Set0RH_SPEC>;

impl Sqch0Set0RH {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch0Set0RH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch0Set0RH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Set0RH {
    #[inline(always)]
    fn default() -> Sqch0Set0RH {
        <crate::RegValueT<Sqch0Set0RH_SPEC> as RegisterValue<_>>::new(128)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Set0RHl_SPEC;
impl crate::sealed::RegSpec for Sqch0Set0RHl_SPEC {
    type DataType = u8;
}

pub type Sqch0Set0RHl = crate::RegValueT<Sqch0Set0RHl_SPEC>;

impl Sqch0Set0RHl {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0Set0RHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0Set0RHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Set0RHl {
    #[inline(always)]
    fn default() -> Sqch0Set0RHl {
        <crate::RegValueT<Sqch0Set0RHl_SPEC> as RegisterValue<_>>::new(128)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Set0RHh_SPEC;
impl crate::sealed::RegSpec for Sqch0Set0RHh_SPEC {
    type DataType = u8;
}

pub type Sqch0Set0RHh = crate::RegValueT<Sqch0Set0RHh_SPEC>;

impl Sqch0Set0RHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0Set0RHh_SPEC, crate::common::W> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0Set0RHh_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Set0RHh {
    #[inline(always)]
    fn default() -> Sqch0Set0RHh {
        <crate::RegValueT<Sqch0Set0RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Sr_SPEC;
impl crate::sealed::RegSpec for Sqch0Sr_SPEC {
    type DataType = u32;
}

pub type Sqch0Sr = crate::RegValueT<Sqch0Sr_SPEC>;

impl Sqch0Sr {
    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch0sr::Running,
        sqch0sr::Running,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch0sr::Running,
            sqch0sr::Running,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0sr::Aactfin,
        sqch0sr::Aactfin,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0sr::Aactfin,
            sqch0sr::Aactfin,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0sr::Adesfin,
        sqch0sr::Adesfin,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0sr::Adesfin,
            sqch0sr::Adesfin,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        sqch0sr::Dabort,
        sqch0sr::Dabort,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            sqch0sr::Dabort,
            sqch0sr::Dabort,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        sqch0sr::Sizeerr,
        sqch0sr::Sizeerr,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            sqch0sr::Sizeerr,
            sqch0sr::Sizeerr,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        sqch0sr::Txiberr,
        sqch0sr::Txiberr,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            sqch0sr::Txiberr,
            sqch0sr::Txiberr,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        sqch0sr::Rxferr,
        sqch0sr::Rxferr,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            sqch0sr::Rxferr,
            sqch0sr::Rxferr,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        sqch0sr::Rxfail,
        sqch0sr::Rxfail,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            sqch0sr::Rxfail,
            sqch0sr::Rxfail,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        sqch0sr::Rxpfail,
        sqch0sr::Rxpfail,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            sqch0sr::Rxpfail,
            sqch0sr::Rxpfail,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        sqch0sr::Rxcorerr,
        sqch0sr::Rxcorerr,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            sqch0sr::Rxcorerr,
            sqch0sr::Rxcorerr,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        sqch0sr::Rxake,
        sqch0sr::Rxake,
        Sqch0Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            sqch0sr::Rxake,
            sqch0sr::Rxake,
            Sqch0Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Sqch0Sr_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<31, 1, 0, Sqch0Sr_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch0Sr {
    #[inline(always)]
    fn default() -> Sqch0Sr {
        <crate::RegValueT<Sqch0Sr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0sr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0SrL_SPEC;
impl crate::sealed::RegSpec for Sqch0SrL_SPEC {
    type DataType = u16;
}

pub type Sqch0SrL = crate::RegValueT<Sqch0SrL_SPEC>;

impl Sqch0SrL {
    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch0sr_l::Running,
        sqch0sr_l::Running,
        Sqch0SrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch0sr_l::Running,
            sqch0sr_l::Running,
            Sqch0SrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0sr_l::Aactfin,
        sqch0sr_l::Aactfin,
        Sqch0SrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0sr_l::Aactfin,
            sqch0sr_l::Aactfin,
            Sqch0SrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0sr_l::Adesfin,
        sqch0sr_l::Adesfin,
        Sqch0SrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0sr_l::Adesfin,
            sqch0sr_l::Adesfin,
            Sqch0SrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch0SrL_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15, 1, 0, Sqch0SrL_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch0SrL {
    #[inline(always)]
    fn default() -> Sqch0SrL {
        <crate::RegValueT<Sqch0SrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0sr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0SrLl_SPEC;
impl crate::sealed::RegSpec for Sqch0SrLl_SPEC {
    type DataType = u8;
}

pub type Sqch0SrLl = crate::RegValueT<Sqch0SrLl_SPEC>;

impl Sqch0SrLl {
    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch0sr_ll::Running,
        sqch0sr_ll::Running,
        Sqch0SrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch0sr_ll::Running,
            sqch0sr_ll::Running,
            Sqch0SrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0sr_ll::Aactfin,
        sqch0sr_ll::Aactfin,
        Sqch0SrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0sr_ll::Aactfin,
            sqch0sr_ll::Aactfin,
            Sqch0SrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, Sqch0SrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,Sqch0SrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0SrLl {
    #[inline(always)]
    fn default() -> Sqch0SrLl {
        <crate::RegValueT<Sqch0SrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0sr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0SrLh_SPEC;
impl crate::sealed::RegSpec for Sqch0SrLh_SPEC {
    type DataType = u8;
}

pub type Sqch0SrLh = crate::RegValueT<Sqch0SrLh_SPEC>;

impl Sqch0SrLh {
    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0sr_lh::Adesfin,
        sqch0sr_lh::Adesfin,
        Sqch0SrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0sr_lh::Adesfin,
            sqch0sr_lh::Adesfin,
            Sqch0SrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0SrLh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, Sqch0SrLh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch0SrLh {
    #[inline(always)]
    fn default() -> Sqch0SrLh {
        <crate::RegValueT<Sqch0SrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0sr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0SrH_SPEC;
impl crate::sealed::RegSpec for Sqch0SrH_SPEC {
    type DataType = u16;
}

pub type Sqch0SrH = crate::RegValueT<Sqch0SrH_SPEC>;

impl Sqch0SrH {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0sr_h::Dabort,
        sqch0sr_h::Dabort,
        Sqch0SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0sr_h::Dabort,
            sqch0sr_h::Dabort,
            Sqch0SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0sr_h::Sizeerr,
        sqch0sr_h::Sizeerr,
        Sqch0SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0sr_h::Sizeerr,
            sqch0sr_h::Sizeerr,
            Sqch0SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0sr_h::Txiberr,
        sqch0sr_h::Txiberr,
        Sqch0SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0sr_h::Txiberr,
            sqch0sr_h::Txiberr,
            Sqch0SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sqch0sr_h::Rxferr,
        sqch0sr_h::Rxferr,
        Sqch0SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sqch0sr_h::Rxferr,
            sqch0sr_h::Rxferr,
            Sqch0SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        sqch0sr_h::Rxfail,
        sqch0sr_h::Rxfail,
        Sqch0SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            sqch0sr_h::Rxfail,
            sqch0sr_h::Rxfail,
            Sqch0SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        sqch0sr_h::Rxpfail,
        sqch0sr_h::Rxpfail,
        Sqch0SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            sqch0sr_h::Rxpfail,
            sqch0sr_h::Rxpfail,
            Sqch0SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        sqch0sr_h::Rxcorerr,
        sqch0sr_h::Rxcorerr,
        Sqch0SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            sqch0sr_h::Rxcorerr,
            sqch0sr_h::Rxcorerr,
            Sqch0SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        sqch0sr_h::Rxake,
        sqch0sr_h::Rxake,
        Sqch0SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            sqch0sr_h::Rxake,
            sqch0sr_h::Rxake,
            Sqch0SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch0SrH_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15, 1, 0, Sqch0SrH_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch0SrH {
    #[inline(always)]
    fn default() -> Sqch0SrH {
        <crate::RegValueT<Sqch0SrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0sr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0SrHl_SPEC;
impl crate::sealed::RegSpec for Sqch0SrHl_SPEC {
    type DataType = u8;
}

pub type Sqch0SrHl = crate::RegValueT<Sqch0SrHl_SPEC>;

impl Sqch0SrHl {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0sr_hl::Dabort,
        sqch0sr_hl::Dabort,
        Sqch0SrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0sr_hl::Dabort,
            sqch0sr_hl::Dabort,
            Sqch0SrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0sr_hl::Sizeerr,
        sqch0sr_hl::Sizeerr,
        Sqch0SrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0sr_hl::Sizeerr,
            sqch0sr_hl::Sizeerr,
            Sqch0SrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0SrHl_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, Sqch0SrHl_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch0SrHl {
    #[inline(always)]
    fn default() -> Sqch0SrHl {
        <crate::RegValueT<Sqch0SrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0sr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0SrHh_SPEC;
impl crate::sealed::RegSpec for Sqch0SrHh_SPEC {
    type DataType = u8;
}

pub type Sqch0SrHh = crate::RegValueT<Sqch0SrHh_SPEC>;

impl Sqch0SrHh {
    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0sr_hh::Txiberr,
        sqch0sr_hh::Txiberr,
        Sqch0SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0sr_hh::Txiberr,
            sqch0sr_hh::Txiberr,
            Sqch0SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch0sr_hh::Rxferr,
        sqch0sr_hh::Rxferr,
        Sqch0SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch0sr_hh::Rxferr,
            sqch0sr_hh::Rxferr,
            Sqch0SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0sr_hh::Rxfail,
        sqch0sr_hh::Rxfail,
        Sqch0SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0sr_hh::Rxfail,
            sqch0sr_hh::Rxfail,
            Sqch0SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0sr_hh::Rxpfail,
        sqch0sr_hh::Rxpfail,
        Sqch0SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0sr_hh::Rxpfail,
            sqch0sr_hh::Rxpfail,
            Sqch0SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        sqch0sr_hh::Rxcorerr,
        sqch0sr_hh::Rxcorerr,
        Sqch0SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            sqch0sr_hh::Rxcorerr,
            sqch0sr_hh::Rxcorerr,
            Sqch0SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch0sr_hh::Rxake,
        sqch0sr_hh::Rxake,
        Sqch0SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch0sr_hh::Rxake,
            sqch0sr_hh::Rxake,
            Sqch0SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0SrHh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, Sqch0SrHh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch0SrHh {
    #[inline(always)]
    fn default() -> Sqch0SrHh {
        <crate::RegValueT<Sqch0SrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0sr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Scr_SPEC;
impl crate::sealed::RegSpec for Sqch0Scr_SPEC {
    type DataType = u32;
}

pub type Sqch0Scr = crate::RegValueT<Sqch0Scr_SPEC>;

impl Sqch0Scr {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0scr::Aactfin,
        sqch0scr::Aactfin,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0scr::Aactfin,
            sqch0scr::Aactfin,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0scr::Adesfin,
        sqch0scr::Adesfin,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0scr::Adesfin,
            sqch0scr::Adesfin,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        sqch0scr::Dabort,
        sqch0scr::Dabort,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            sqch0scr::Dabort,
            sqch0scr::Dabort,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        sqch0scr::Sizeerr,
        sqch0scr::Sizeerr,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            sqch0scr::Sizeerr,
            sqch0scr::Sizeerr,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        sqch0scr::Txiberr,
        sqch0scr::Txiberr,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            sqch0scr::Txiberr,
            sqch0scr::Txiberr,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        sqch0scr::Rxferr,
        sqch0scr::Rxferr,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            sqch0scr::Rxferr,
            sqch0scr::Rxferr,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        sqch0scr::Rxfail,
        sqch0scr::Rxfail,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            sqch0scr::Rxfail,
            sqch0scr::Rxfail,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        sqch0scr::Rxpfail,
        sqch0scr::Rxpfail,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            sqch0scr::Rxpfail,
            sqch0scr::Rxpfail,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        sqch0scr::Rxcorerr,
        sqch0scr::Rxcorerr,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            sqch0scr::Rxcorerr,
            sqch0scr::Rxcorerr,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        sqch0scr::Rxake,
        sqch0scr::Rxake,
        Sqch0Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            sqch0scr::Rxake,
            sqch0scr::Rxake,
            Sqch0Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Sqch0Scr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31,1,0,Sqch0Scr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Scr {
    #[inline(always)]
    fn default() -> Sqch0Scr {
        <crate::RegValueT<Sqch0Scr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0scr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0ScrL_SPEC;
impl crate::sealed::RegSpec for Sqch0ScrL_SPEC {
    type DataType = u16;
}

pub type Sqch0ScrL = crate::RegValueT<Sqch0ScrL_SPEC>;

impl Sqch0ScrL {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0scr_l::Aactfin,
        sqch0scr_l::Aactfin,
        Sqch0ScrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0scr_l::Aactfin,
            sqch0scr_l::Aactfin,
            Sqch0ScrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0scr_l::Adesfin,
        sqch0scr_l::Adesfin,
        Sqch0ScrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0scr_l::Adesfin,
            sqch0scr_l::Adesfin,
            Sqch0ScrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch0ScrL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch0ScrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0ScrL {
    #[inline(always)]
    fn default() -> Sqch0ScrL {
        <crate::RegValueT<Sqch0ScrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0scr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0ScrLl_SPEC;
impl crate::sealed::RegSpec for Sqch0ScrLl_SPEC {
    type DataType = u8;
}

pub type Sqch0ScrLl = crate::RegValueT<Sqch0ScrLl_SPEC>;

impl Sqch0ScrLl {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0scr_ll::Aactfin,
        sqch0scr_ll::Aactfin,
        Sqch0ScrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0scr_ll::Aactfin,
            sqch0scr_ll::Aactfin,
            Sqch0ScrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, Sqch0ScrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,Sqch0ScrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0ScrLl {
    #[inline(always)]
    fn default() -> Sqch0ScrLl {
        <crate::RegValueT<Sqch0ScrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0scr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0ScrLh_SPEC;
impl crate::sealed::RegSpec for Sqch0ScrLh_SPEC {
    type DataType = u8;
}

pub type Sqch0ScrLh = crate::RegValueT<Sqch0ScrLh_SPEC>;

impl Sqch0ScrLh {
    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0scr_lh::Adesfin,
        sqch0scr_lh::Adesfin,
        Sqch0ScrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0scr_lh::Adesfin,
            sqch0scr_lh::Adesfin,
            Sqch0ScrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0ScrLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0ScrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0ScrLh {
    #[inline(always)]
    fn default() -> Sqch0ScrLh {
        <crate::RegValueT<Sqch0ScrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0scr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0ScrH_SPEC;
impl crate::sealed::RegSpec for Sqch0ScrH_SPEC {
    type DataType = u16;
}

pub type Sqch0ScrH = crate::RegValueT<Sqch0ScrH_SPEC>;

impl Sqch0ScrH {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0scr_h::Dabort,
        sqch0scr_h::Dabort,
        Sqch0ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0scr_h::Dabort,
            sqch0scr_h::Dabort,
            Sqch0ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0scr_h::Sizeerr,
        sqch0scr_h::Sizeerr,
        Sqch0ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0scr_h::Sizeerr,
            sqch0scr_h::Sizeerr,
            Sqch0ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0scr_h::Txiberr,
        sqch0scr_h::Txiberr,
        Sqch0ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0scr_h::Txiberr,
            sqch0scr_h::Txiberr,
            Sqch0ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sqch0scr_h::Rxferr,
        sqch0scr_h::Rxferr,
        Sqch0ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sqch0scr_h::Rxferr,
            sqch0scr_h::Rxferr,
            Sqch0ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        sqch0scr_h::Rxfail,
        sqch0scr_h::Rxfail,
        Sqch0ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            sqch0scr_h::Rxfail,
            sqch0scr_h::Rxfail,
            Sqch0ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        sqch0scr_h::Rxpfail,
        sqch0scr_h::Rxpfail,
        Sqch0ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            sqch0scr_h::Rxpfail,
            sqch0scr_h::Rxpfail,
            Sqch0ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        sqch0scr_h::Rxcorerr,
        sqch0scr_h::Rxcorerr,
        Sqch0ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            sqch0scr_h::Rxcorerr,
            sqch0scr_h::Rxcorerr,
            Sqch0ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        sqch0scr_h::Rxake,
        sqch0scr_h::Rxake,
        Sqch0ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            sqch0scr_h::Rxake,
            sqch0scr_h::Rxake,
            Sqch0ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch0ScrH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch0ScrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0ScrH {
    #[inline(always)]
    fn default() -> Sqch0ScrH {
        <crate::RegValueT<Sqch0ScrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0scr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0ScrHl_SPEC;
impl crate::sealed::RegSpec for Sqch0ScrHl_SPEC {
    type DataType = u8;
}

pub type Sqch0ScrHl = crate::RegValueT<Sqch0ScrHl_SPEC>;

impl Sqch0ScrHl {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0scr_hl::Dabort,
        sqch0scr_hl::Dabort,
        Sqch0ScrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0scr_hl::Dabort,
            sqch0scr_hl::Dabort,
            Sqch0ScrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0scr_hl::Sizeerr,
        sqch0scr_hl::Sizeerr,
        Sqch0ScrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0scr_hl::Sizeerr,
            sqch0scr_hl::Sizeerr,
            Sqch0ScrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0ScrHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0ScrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0ScrHl {
    #[inline(always)]
    fn default() -> Sqch0ScrHl {
        <crate::RegValueT<Sqch0ScrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0scr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0ScrHh_SPEC;
impl crate::sealed::RegSpec for Sqch0ScrHh_SPEC {
    type DataType = u8;
}

pub type Sqch0ScrHh = crate::RegValueT<Sqch0ScrHh_SPEC>;

impl Sqch0ScrHh {
    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0scr_hh::Txiberr,
        sqch0scr_hh::Txiberr,
        Sqch0ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0scr_hh::Txiberr,
            sqch0scr_hh::Txiberr,
            Sqch0ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch0scr_hh::Rxferr,
        sqch0scr_hh::Rxferr,
        Sqch0ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch0scr_hh::Rxferr,
            sqch0scr_hh::Rxferr,
            Sqch0ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0scr_hh::Rxfail,
        sqch0scr_hh::Rxfail,
        Sqch0ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0scr_hh::Rxfail,
            sqch0scr_hh::Rxfail,
            Sqch0ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0scr_hh::Rxpfail,
        sqch0scr_hh::Rxpfail,
        Sqch0ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0scr_hh::Rxpfail,
            sqch0scr_hh::Rxpfail,
            Sqch0ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        sqch0scr_hh::Rxcorerr,
        sqch0scr_hh::Rxcorerr,
        Sqch0ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            sqch0scr_hh::Rxcorerr,
            sqch0scr_hh::Rxcorerr,
            Sqch0ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch0scr_hh::Rxake,
        sqch0scr_hh::Rxake,
        Sqch0ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch0scr_hh::Rxake,
            sqch0scr_hh::Rxake,
            Sqch0ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0ScrHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0ScrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0ScrHh {
    #[inline(always)]
    fn default() -> Sqch0ScrHh {
        <crate::RegValueT<Sqch0ScrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0scr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Ier_SPEC;
impl crate::sealed::RegSpec for Sqch0Ier_SPEC {
    type DataType = u32;
}

pub type Sqch0Ier = crate::RegValueT<Sqch0Ier_SPEC>;

impl Sqch0Ier {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0ier::Aactfin,
        sqch0ier::Aactfin,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0ier::Aactfin,
            sqch0ier::Aactfin,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0ier::Adesfin,
        sqch0ier::Adesfin,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0ier::Adesfin,
            sqch0ier::Adesfin,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        sqch0ier::Dabort,
        sqch0ier::Dabort,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            sqch0ier::Dabort,
            sqch0ier::Dabort,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        sqch0ier::Sizeerr,
        sqch0ier::Sizeerr,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            sqch0ier::Sizeerr,
            sqch0ier::Sizeerr,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        sqch0ier::Txiberr,
        sqch0ier::Txiberr,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            sqch0ier::Txiberr,
            sqch0ier::Txiberr,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        sqch0ier::Rxferr,
        sqch0ier::Rxferr,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            sqch0ier::Rxferr,
            sqch0ier::Rxferr,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        sqch0ier::Rxfail,
        sqch0ier::Rxfail,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            sqch0ier::Rxfail,
            sqch0ier::Rxfail,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        sqch0ier::Rxpfail,
        sqch0ier::Rxpfail,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            sqch0ier::Rxpfail,
            sqch0ier::Rxpfail,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        sqch0ier::Rxcorerr,
        sqch0ier::Rxcorerr,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            sqch0ier::Rxcorerr,
            sqch0ier::Rxcorerr,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        sqch0ier::Rxake,
        sqch0ier::Rxake,
        Sqch0Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            sqch0ier::Rxake,
            sqch0ier::Rxake,
            Sqch0Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Sqch0Ier_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31,1,0,Sqch0Ier_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Ier {
    #[inline(always)]
    fn default() -> Sqch0Ier {
        <crate::RegValueT<Sqch0Ier_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0ier {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0IerL_SPEC;
impl crate::sealed::RegSpec for Sqch0IerL_SPEC {
    type DataType = u16;
}

pub type Sqch0IerL = crate::RegValueT<Sqch0IerL_SPEC>;

impl Sqch0IerL {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0ier_l::Aactfin,
        sqch0ier_l::Aactfin,
        Sqch0IerL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0ier_l::Aactfin,
            sqch0ier_l::Aactfin,
            Sqch0IerL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0ier_l::Adesfin,
        sqch0ier_l::Adesfin,
        Sqch0IerL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0ier_l::Adesfin,
            sqch0ier_l::Adesfin,
            Sqch0IerL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch0IerL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch0IerL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0IerL {
    #[inline(always)]
    fn default() -> Sqch0IerL {
        <crate::RegValueT<Sqch0IerL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0ier_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0IerLl_SPEC;
impl crate::sealed::RegSpec for Sqch0IerLl_SPEC {
    type DataType = u8;
}

pub type Sqch0IerLl = crate::RegValueT<Sqch0IerLl_SPEC>;

impl Sqch0IerLl {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0ier_ll::Aactfin,
        sqch0ier_ll::Aactfin,
        Sqch0IerLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0ier_ll::Aactfin,
            sqch0ier_ll::Aactfin,
            Sqch0IerLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, Sqch0IerLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,Sqch0IerLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0IerLl {
    #[inline(always)]
    fn default() -> Sqch0IerLl {
        <crate::RegValueT<Sqch0IerLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0ier_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0IerLh_SPEC;
impl crate::sealed::RegSpec for Sqch0IerLh_SPEC {
    type DataType = u8;
}

pub type Sqch0IerLh = crate::RegValueT<Sqch0IerLh_SPEC>;

impl Sqch0IerLh {
    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0ier_lh::Adesfin,
        sqch0ier_lh::Adesfin,
        Sqch0IerLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0ier_lh::Adesfin,
            sqch0ier_lh::Adesfin,
            Sqch0IerLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0IerLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0IerLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0IerLh {
    #[inline(always)]
    fn default() -> Sqch0IerLh {
        <crate::RegValueT<Sqch0IerLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0ier_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0IerH_SPEC;
impl crate::sealed::RegSpec for Sqch0IerH_SPEC {
    type DataType = u16;
}

pub type Sqch0IerH = crate::RegValueT<Sqch0IerH_SPEC>;

impl Sqch0IerH {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0ier_h::Dabort,
        sqch0ier_h::Dabort,
        Sqch0IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0ier_h::Dabort,
            sqch0ier_h::Dabort,
            Sqch0IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0ier_h::Sizeerr,
        sqch0ier_h::Sizeerr,
        Sqch0IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0ier_h::Sizeerr,
            sqch0ier_h::Sizeerr,
            Sqch0IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0ier_h::Txiberr,
        sqch0ier_h::Txiberr,
        Sqch0IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0ier_h::Txiberr,
            sqch0ier_h::Txiberr,
            Sqch0IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sqch0ier_h::Rxferr,
        sqch0ier_h::Rxferr,
        Sqch0IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sqch0ier_h::Rxferr,
            sqch0ier_h::Rxferr,
            Sqch0IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        sqch0ier_h::Rxfail,
        sqch0ier_h::Rxfail,
        Sqch0IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            sqch0ier_h::Rxfail,
            sqch0ier_h::Rxfail,
            Sqch0IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        sqch0ier_h::Rxpfail,
        sqch0ier_h::Rxpfail,
        Sqch0IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            sqch0ier_h::Rxpfail,
            sqch0ier_h::Rxpfail,
            Sqch0IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        sqch0ier_h::Rxcorerr,
        sqch0ier_h::Rxcorerr,
        Sqch0IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            sqch0ier_h::Rxcorerr,
            sqch0ier_h::Rxcorerr,
            Sqch0IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        sqch0ier_h::Rxake,
        sqch0ier_h::Rxake,
        Sqch0IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            sqch0ier_h::Rxake,
            sqch0ier_h::Rxake,
            Sqch0IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch0IerH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch0IerH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0IerH {
    #[inline(always)]
    fn default() -> Sqch0IerH {
        <crate::RegValueT<Sqch0IerH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0ier_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0IerHl_SPEC;
impl crate::sealed::RegSpec for Sqch0IerHl_SPEC {
    type DataType = u8;
}

pub type Sqch0IerHl = crate::RegValueT<Sqch0IerHl_SPEC>;

impl Sqch0IerHl {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0ier_hl::Dabort,
        sqch0ier_hl::Dabort,
        Sqch0IerHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0ier_hl::Dabort,
            sqch0ier_hl::Dabort,
            Sqch0IerHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0ier_hl::Sizeerr,
        sqch0ier_hl::Sizeerr,
        Sqch0IerHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0ier_hl::Sizeerr,
            sqch0ier_hl::Sizeerr,
            Sqch0IerHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0IerHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0IerHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0IerHl {
    #[inline(always)]
    fn default() -> Sqch0IerHl {
        <crate::RegValueT<Sqch0IerHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0ier_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0IerHh_SPEC;
impl crate::sealed::RegSpec for Sqch0IerHh_SPEC {
    type DataType = u8;
}

pub type Sqch0IerHh = crate::RegValueT<Sqch0IerHh_SPEC>;

impl Sqch0IerHh {
    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0ier_hh::Txiberr,
        sqch0ier_hh::Txiberr,
        Sqch0IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0ier_hh::Txiberr,
            sqch0ier_hh::Txiberr,
            Sqch0IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch0ier_hh::Rxferr,
        sqch0ier_hh::Rxferr,
        Sqch0IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch0ier_hh::Rxferr,
            sqch0ier_hh::Rxferr,
            Sqch0IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch0ier_hh::Rxfail,
        sqch0ier_hh::Rxfail,
        Sqch0IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch0ier_hh::Rxfail,
            sqch0ier_hh::Rxfail,
            Sqch0IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch0ier_hh::Rxpfail,
        sqch0ier_hh::Rxpfail,
        Sqch0IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch0ier_hh::Rxpfail,
            sqch0ier_hh::Rxpfail,
            Sqch0IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        sqch0ier_hh::Rxcorerr,
        sqch0ier_hh::Rxcorerr,
        Sqch0IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            sqch0ier_hh::Rxcorerr,
            sqch0ier_hh::Rxcorerr,
            Sqch0IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch0ier_hh::Rxake,
        sqch0ier_hh::Rxake,
        Sqch0IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch0ier_hh::Rxake,
            sqch0ier_hh::Rxake,
            Sqch0IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0IerHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0IerHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0IerHh {
    #[inline(always)]
    fn default() -> Sqch0IerHh {
        <crate::RegValueT<Sqch0IerHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0ier_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Set0R_SPEC;
impl crate::sealed::RegSpec for Sqch1Set0R_SPEC {
    type DataType = u32;
}

pub type Sqch1Set0R = crate::RegValueT<Sqch1Set0R_SPEC>;

impl Sqch1Set0R {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1set0r::Start,
        sqch1set0r::Start,
        Sqch1Set0R_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1set0r::Start,
            sqch1set0r::Start,
            Sqch1Set0R_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Sqch1Set0R_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31,1,0,Sqch1Set0R_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Set0R {
    #[inline(always)]
    fn default() -> Sqch1Set0R {
        <crate::RegValueT<Sqch1Set0R_SPEC> as RegisterValue<_>>::new(8388608)
    }
}
pub mod sqch1set0r {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Set0RL_SPEC;
impl crate::sealed::RegSpec for Sqch1Set0RL_SPEC {
    type DataType = u16;
}

pub type Sqch1Set0RL = crate::RegValueT<Sqch1Set0RL_SPEC>;

impl Sqch1Set0RL {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1set0r_l::Start,
        sqch1set0r_l::Start,
        Sqch1Set0RL_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1set0r_l::Start,
            sqch1set0r_l::Start,
            Sqch1Set0RL_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<9, 0x7f, 1, 0, u8, u8, Sqch1Set0RL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<9,0x7f,1,0,u8,u8,Sqch1Set0RL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Set0RL {
    #[inline(always)]
    fn default() -> Sqch1Set0RL {
        <crate::RegValueT<Sqch1Set0RL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1set0r_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Set0RLl_SPEC;
impl crate::sealed::RegSpec for Sqch1Set0RLl_SPEC {
    type DataType = u8;
}

pub type Sqch1Set0RLl = crate::RegValueT<Sqch1Set0RLl_SPEC>;

impl Sqch1Set0RLl {
    #[inline(always)]
    pub fn start(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1set0r_ll::Start,
        sqch1set0r_ll::Start,
        Sqch1Set0RLl_SPEC,
        crate::common::W,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1set0r_ll::Start,
            sqch1set0r_ll::Start,
            Sqch1Set0RLl_SPEC,
            crate::common::W,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<4, 0xf, 1, 0, u8, u8, Sqch1Set0RLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<4,0xf,1,0,u8,u8,Sqch1Set0RLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Set0RLl {
    #[inline(always)]
    fn default() -> Sqch1Set0RLl {
        <crate::RegValueT<Sqch1Set0RLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1set0r_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Start_SPEC;
    pub type Start = crate::EnumBitfieldStruct<u8, Start_SPEC>;
    impl Start {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Set0RLh_SPEC;
impl crate::sealed::RegSpec for Sqch1Set0RLh_SPEC {
    type DataType = u8;
}

pub type Sqch1Set0RLh = crate::RegValueT<Sqch1Set0RLh_SPEC>;

impl Sqch1Set0RLh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<1, 0x7f, 1, 0, u8, u8, Sqch1Set0RLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<1,0x7f,1,0,u8,u8,Sqch1Set0RLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Set0RLh {
    #[inline(always)]
    fn default() -> Sqch1Set0RLh {
        <crate::RegValueT<Sqch1Set0RLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Set0RH_SPEC;
impl crate::sealed::RegSpec for Sqch1Set0RH_SPEC {
    type DataType = u16;
}

pub type Sqch1Set0RH = crate::RegValueT<Sqch1Set0RH_SPEC>;

impl Sqch1Set0RH {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch1Set0RH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch1Set0RH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Set0RH {
    #[inline(always)]
    fn default() -> Sqch1Set0RH {
        <crate::RegValueT<Sqch1Set0RH_SPEC> as RegisterValue<_>>::new(128)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Set0RHl_SPEC;
impl crate::sealed::RegSpec for Sqch1Set0RHl_SPEC {
    type DataType = u8;
}

pub type Sqch1Set0RHl = crate::RegValueT<Sqch1Set0RHl_SPEC>;

impl Sqch1Set0RHl {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1Set0RHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1Set0RHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Set0RHl {
    #[inline(always)]
    fn default() -> Sqch1Set0RHl {
        <crate::RegValueT<Sqch1Set0RHl_SPEC> as RegisterValue<_>>::new(128)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Set0RHh_SPEC;
impl crate::sealed::RegSpec for Sqch1Set0RHh_SPEC {
    type DataType = u8;
}

pub type Sqch1Set0RHh = crate::RegValueT<Sqch1Set0RHh_SPEC>;

impl Sqch1Set0RHh {
    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1Set0RHh_SPEC, crate::common::W> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1Set0RHh_SPEC,crate::common::W>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Set0RHh {
    #[inline(always)]
    fn default() -> Sqch1Set0RHh {
        <crate::RegValueT<Sqch1Set0RHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Sr_SPEC;
impl crate::sealed::RegSpec for Sqch1Sr_SPEC {
    type DataType = u32;
}

pub type Sqch1Sr = crate::RegValueT<Sqch1Sr_SPEC>;

impl Sqch1Sr {
    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch1sr::Running,
        sqch1sr::Running,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch1sr::Running,
            sqch1sr::Running,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1sr::Aactfin,
        sqch1sr::Aactfin,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1sr::Aactfin,
            sqch1sr::Aactfin,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1sr::Adesfin,
        sqch1sr::Adesfin,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1sr::Adesfin,
            sqch1sr::Adesfin,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        sqch1sr::Dabort,
        sqch1sr::Dabort,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            sqch1sr::Dabort,
            sqch1sr::Dabort,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        sqch1sr::Sizeerr,
        sqch1sr::Sizeerr,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            sqch1sr::Sizeerr,
            sqch1sr::Sizeerr,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        sqch1sr::Txiberr,
        sqch1sr::Txiberr,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            sqch1sr::Txiberr,
            sqch1sr::Txiberr,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        sqch1sr::Rxferr,
        sqch1sr::Rxferr,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            sqch1sr::Rxferr,
            sqch1sr::Rxferr,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        sqch1sr::Rxfail,
        sqch1sr::Rxfail,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            sqch1sr::Rxfail,
            sqch1sr::Rxfail,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        sqch1sr::Rxpfail,
        sqch1sr::Rxpfail,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            sqch1sr::Rxpfail,
            sqch1sr::Rxpfail,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        sqch1sr::Rxcorerr,
        sqch1sr::Rxcorerr,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            sqch1sr::Rxcorerr,
            sqch1sr::Rxcorerr,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        sqch1sr::Rxake,
        sqch1sr::Rxake,
        Sqch1Sr_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            sqch1sr::Rxake,
            sqch1sr::Rxake,
            Sqch1Sr_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Sqch1Sr_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<31, 1, 0, Sqch1Sr_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch1Sr {
    #[inline(always)]
    fn default() -> Sqch1Sr {
        <crate::RegValueT<Sqch1Sr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1sr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1SrL_SPEC;
impl crate::sealed::RegSpec for Sqch1SrL_SPEC {
    type DataType = u16;
}

pub type Sqch1SrL = crate::RegValueT<Sqch1SrL_SPEC>;

impl Sqch1SrL {
    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch1sr_l::Running,
        sqch1sr_l::Running,
        Sqch1SrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch1sr_l::Running,
            sqch1sr_l::Running,
            Sqch1SrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1sr_l::Aactfin,
        sqch1sr_l::Aactfin,
        Sqch1SrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1sr_l::Aactfin,
            sqch1sr_l::Aactfin,
            Sqch1SrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1sr_l::Adesfin,
        sqch1sr_l::Adesfin,
        Sqch1SrL_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1sr_l::Adesfin,
            sqch1sr_l::Adesfin,
            Sqch1SrL_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch1SrL_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15, 1, 0, Sqch1SrL_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch1SrL {
    #[inline(always)]
    fn default() -> Sqch1SrL {
        <crate::RegValueT<Sqch1SrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1sr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1SrLl_SPEC;
impl crate::sealed::RegSpec for Sqch1SrLl_SPEC {
    type DataType = u8;
}

pub type Sqch1SrLl = crate::RegValueT<Sqch1SrLl_SPEC>;

impl Sqch1SrLl {
    #[inline(always)]
    pub fn running(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch1sr_ll::Running,
        sqch1sr_ll::Running,
        Sqch1SrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch1sr_ll::Running,
            sqch1sr_ll::Running,
            Sqch1SrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1sr_ll::Aactfin,
        sqch1sr_ll::Aactfin,
        Sqch1SrLl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1sr_ll::Aactfin,
            sqch1sr_ll::Aactfin,
            Sqch1SrLl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, Sqch1SrLl_SPEC, crate::common::R> {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,Sqch1SrLl_SPEC,crate::common::R>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1SrLl {
    #[inline(always)]
    fn default() -> Sqch1SrLl {
        <crate::RegValueT<Sqch1SrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1sr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Running_SPEC;
    pub type Running = crate::EnumBitfieldStruct<u8, Running_SPEC>;
    impl Running {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1SrLh_SPEC;
impl crate::sealed::RegSpec for Sqch1SrLh_SPEC {
    type DataType = u8;
}

pub type Sqch1SrLh = crate::RegValueT<Sqch1SrLh_SPEC>;

impl Sqch1SrLh {
    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1sr_lh::Adesfin,
        sqch1sr_lh::Adesfin,
        Sqch1SrLh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1sr_lh::Adesfin,
            sqch1sr_lh::Adesfin,
            Sqch1SrLh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1SrLh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, Sqch1SrLh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch1SrLh {
    #[inline(always)]
    fn default() -> Sqch1SrLh {
        <crate::RegValueT<Sqch1SrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1sr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1SrH_SPEC;
impl crate::sealed::RegSpec for Sqch1SrH_SPEC {
    type DataType = u16;
}

pub type Sqch1SrH = crate::RegValueT<Sqch1SrH_SPEC>;

impl Sqch1SrH {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1sr_h::Dabort,
        sqch1sr_h::Dabort,
        Sqch1SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1sr_h::Dabort,
            sqch1sr_h::Dabort,
            Sqch1SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1sr_h::Sizeerr,
        sqch1sr_h::Sizeerr,
        Sqch1SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1sr_h::Sizeerr,
            sqch1sr_h::Sizeerr,
            Sqch1SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1sr_h::Txiberr,
        sqch1sr_h::Txiberr,
        Sqch1SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1sr_h::Txiberr,
            sqch1sr_h::Txiberr,
            Sqch1SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sqch1sr_h::Rxferr,
        sqch1sr_h::Rxferr,
        Sqch1SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sqch1sr_h::Rxferr,
            sqch1sr_h::Rxferr,
            Sqch1SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        sqch1sr_h::Rxfail,
        sqch1sr_h::Rxfail,
        Sqch1SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            sqch1sr_h::Rxfail,
            sqch1sr_h::Rxfail,
            Sqch1SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        sqch1sr_h::Rxpfail,
        sqch1sr_h::Rxpfail,
        Sqch1SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            sqch1sr_h::Rxpfail,
            sqch1sr_h::Rxpfail,
            Sqch1SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        sqch1sr_h::Rxcorerr,
        sqch1sr_h::Rxcorerr,
        Sqch1SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            sqch1sr_h::Rxcorerr,
            sqch1sr_h::Rxcorerr,
            Sqch1SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        sqch1sr_h::Rxake,
        sqch1sr_h::Rxake,
        Sqch1SrH_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            sqch1sr_h::Rxake,
            sqch1sr_h::Rxake,
            Sqch1SrH_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch1SrH_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<15, 1, 0, Sqch1SrH_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch1SrH {
    #[inline(always)]
    fn default() -> Sqch1SrH {
        <crate::RegValueT<Sqch1SrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1sr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1SrHl_SPEC;
impl crate::sealed::RegSpec for Sqch1SrHl_SPEC {
    type DataType = u8;
}

pub type Sqch1SrHl = crate::RegValueT<Sqch1SrHl_SPEC>;

impl Sqch1SrHl {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1sr_hl::Dabort,
        sqch1sr_hl::Dabort,
        Sqch1SrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1sr_hl::Dabort,
            sqch1sr_hl::Dabort,
            Sqch1SrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1sr_hl::Sizeerr,
        sqch1sr_hl::Sizeerr,
        Sqch1SrHl_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1sr_hl::Sizeerr,
            sqch1sr_hl::Sizeerr,
            Sqch1SrHl_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1SrHl_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, Sqch1SrHl_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch1SrHl {
    #[inline(always)]
    fn default() -> Sqch1SrHl {
        <crate::RegValueT<Sqch1SrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1sr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1SrHh_SPEC;
impl crate::sealed::RegSpec for Sqch1SrHh_SPEC {
    type DataType = u8;
}

pub type Sqch1SrHh = crate::RegValueT<Sqch1SrHh_SPEC>;

impl Sqch1SrHh {
    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1sr_hh::Txiberr,
        sqch1sr_hh::Txiberr,
        Sqch1SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1sr_hh::Txiberr,
            sqch1sr_hh::Txiberr,
            Sqch1SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch1sr_hh::Rxferr,
        sqch1sr_hh::Rxferr,
        Sqch1SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch1sr_hh::Rxferr,
            sqch1sr_hh::Rxferr,
            Sqch1SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1sr_hh::Rxfail,
        sqch1sr_hh::Rxfail,
        Sqch1SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1sr_hh::Rxfail,
            sqch1sr_hh::Rxfail,
            Sqch1SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1sr_hh::Rxpfail,
        sqch1sr_hh::Rxpfail,
        Sqch1SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1sr_hh::Rxpfail,
            sqch1sr_hh::Rxpfail,
            Sqch1SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        sqch1sr_hh::Rxcorerr,
        sqch1sr_hh::Rxcorerr,
        Sqch1SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            sqch1sr_hh::Rxcorerr,
            sqch1sr_hh::Rxcorerr,
            Sqch1SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch1sr_hh::Rxake,
        sqch1sr_hh::Rxake,
        Sqch1SrHh_SPEC,
        crate::common::R,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch1sr_hh::Rxake,
            sqch1sr_hh::Rxake,
            Sqch1SrHh_SPEC,
            crate::common::R,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1SrHh_SPEC, crate::common::R> {
        crate::common::RegisterFieldBool::<7, 1, 0, Sqch1SrHh_SPEC, crate::common::R>::from_register(
            self, 0,
        )
    }
}
impl ::core::default::Default for Sqch1SrHh {
    #[inline(always)]
    fn default() -> Sqch1SrHh {
        <crate::RegValueT<Sqch1SrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1sr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Scr_SPEC;
impl crate::sealed::RegSpec for Sqch1Scr_SPEC {
    type DataType = u32;
}

pub type Sqch1Scr = crate::RegValueT<Sqch1Scr_SPEC>;

impl Sqch1Scr {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1scr::Aactfin,
        sqch1scr::Aactfin,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1scr::Aactfin,
            sqch1scr::Aactfin,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1scr::Adesfin,
        sqch1scr::Adesfin,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1scr::Adesfin,
            sqch1scr::Adesfin,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        sqch1scr::Dabort,
        sqch1scr::Dabort,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            sqch1scr::Dabort,
            sqch1scr::Dabort,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        sqch1scr::Sizeerr,
        sqch1scr::Sizeerr,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            sqch1scr::Sizeerr,
            sqch1scr::Sizeerr,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        sqch1scr::Txiberr,
        sqch1scr::Txiberr,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            sqch1scr::Txiberr,
            sqch1scr::Txiberr,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        sqch1scr::Rxferr,
        sqch1scr::Rxferr,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            sqch1scr::Rxferr,
            sqch1scr::Rxferr,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        sqch1scr::Rxfail,
        sqch1scr::Rxfail,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            sqch1scr::Rxfail,
            sqch1scr::Rxfail,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        sqch1scr::Rxpfail,
        sqch1scr::Rxpfail,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            sqch1scr::Rxpfail,
            sqch1scr::Rxpfail,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        sqch1scr::Rxcorerr,
        sqch1scr::Rxcorerr,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            sqch1scr::Rxcorerr,
            sqch1scr::Rxcorerr,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        sqch1scr::Rxake,
        sqch1scr::Rxake,
        Sqch1Scr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            sqch1scr::Rxake,
            sqch1scr::Rxake,
            Sqch1Scr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Sqch1Scr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31,1,0,Sqch1Scr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Scr {
    #[inline(always)]
    fn default() -> Sqch1Scr {
        <crate::RegValueT<Sqch1Scr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1scr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1ScrL_SPEC;
impl crate::sealed::RegSpec for Sqch1ScrL_SPEC {
    type DataType = u16;
}

pub type Sqch1ScrL = crate::RegValueT<Sqch1ScrL_SPEC>;

impl Sqch1ScrL {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1scr_l::Aactfin,
        sqch1scr_l::Aactfin,
        Sqch1ScrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1scr_l::Aactfin,
            sqch1scr_l::Aactfin,
            Sqch1ScrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1scr_l::Adesfin,
        sqch1scr_l::Adesfin,
        Sqch1ScrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1scr_l::Adesfin,
            sqch1scr_l::Adesfin,
            Sqch1ScrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch1ScrL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch1ScrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1ScrL {
    #[inline(always)]
    fn default() -> Sqch1ScrL {
        <crate::RegValueT<Sqch1ScrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1scr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1ScrLl_SPEC;
impl crate::sealed::RegSpec for Sqch1ScrLl_SPEC {
    type DataType = u8;
}

pub type Sqch1ScrLl = crate::RegValueT<Sqch1ScrLl_SPEC>;

impl Sqch1ScrLl {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1scr_ll::Aactfin,
        sqch1scr_ll::Aactfin,
        Sqch1ScrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1scr_ll::Aactfin,
            sqch1scr_ll::Aactfin,
            Sqch1ScrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, Sqch1ScrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,Sqch1ScrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1ScrLl {
    #[inline(always)]
    fn default() -> Sqch1ScrLl {
        <crate::RegValueT<Sqch1ScrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1scr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1ScrLh_SPEC;
impl crate::sealed::RegSpec for Sqch1ScrLh_SPEC {
    type DataType = u8;
}

pub type Sqch1ScrLh = crate::RegValueT<Sqch1ScrLh_SPEC>;

impl Sqch1ScrLh {
    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1scr_lh::Adesfin,
        sqch1scr_lh::Adesfin,
        Sqch1ScrLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1scr_lh::Adesfin,
            sqch1scr_lh::Adesfin,
            Sqch1ScrLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1ScrLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1ScrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1ScrLh {
    #[inline(always)]
    fn default() -> Sqch1ScrLh {
        <crate::RegValueT<Sqch1ScrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1scr_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1ScrH_SPEC;
impl crate::sealed::RegSpec for Sqch1ScrH_SPEC {
    type DataType = u16;
}

pub type Sqch1ScrH = crate::RegValueT<Sqch1ScrH_SPEC>;

impl Sqch1ScrH {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1scr_h::Dabort,
        sqch1scr_h::Dabort,
        Sqch1ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1scr_h::Dabort,
            sqch1scr_h::Dabort,
            Sqch1ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1scr_h::Sizeerr,
        sqch1scr_h::Sizeerr,
        Sqch1ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1scr_h::Sizeerr,
            sqch1scr_h::Sizeerr,
            Sqch1ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1scr_h::Txiberr,
        sqch1scr_h::Txiberr,
        Sqch1ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1scr_h::Txiberr,
            sqch1scr_h::Txiberr,
            Sqch1ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sqch1scr_h::Rxferr,
        sqch1scr_h::Rxferr,
        Sqch1ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sqch1scr_h::Rxferr,
            sqch1scr_h::Rxferr,
            Sqch1ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        sqch1scr_h::Rxfail,
        sqch1scr_h::Rxfail,
        Sqch1ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            sqch1scr_h::Rxfail,
            sqch1scr_h::Rxfail,
            Sqch1ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        sqch1scr_h::Rxpfail,
        sqch1scr_h::Rxpfail,
        Sqch1ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            sqch1scr_h::Rxpfail,
            sqch1scr_h::Rxpfail,
            Sqch1ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        sqch1scr_h::Rxcorerr,
        sqch1scr_h::Rxcorerr,
        Sqch1ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            sqch1scr_h::Rxcorerr,
            sqch1scr_h::Rxcorerr,
            Sqch1ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        sqch1scr_h::Rxake,
        sqch1scr_h::Rxake,
        Sqch1ScrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            sqch1scr_h::Rxake,
            sqch1scr_h::Rxake,
            Sqch1ScrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch1ScrH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch1ScrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1ScrH {
    #[inline(always)]
    fn default() -> Sqch1ScrH {
        <crate::RegValueT<Sqch1ScrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1scr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1ScrHl_SPEC;
impl crate::sealed::RegSpec for Sqch1ScrHl_SPEC {
    type DataType = u8;
}

pub type Sqch1ScrHl = crate::RegValueT<Sqch1ScrHl_SPEC>;

impl Sqch1ScrHl {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1scr_hl::Dabort,
        sqch1scr_hl::Dabort,
        Sqch1ScrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1scr_hl::Dabort,
            sqch1scr_hl::Dabort,
            Sqch1ScrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1scr_hl::Sizeerr,
        sqch1scr_hl::Sizeerr,
        Sqch1ScrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1scr_hl::Sizeerr,
            sqch1scr_hl::Sizeerr,
            Sqch1ScrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1ScrHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1ScrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1ScrHl {
    #[inline(always)]
    fn default() -> Sqch1ScrHl {
        <crate::RegValueT<Sqch1ScrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1scr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1ScrHh_SPEC;
impl crate::sealed::RegSpec for Sqch1ScrHh_SPEC {
    type DataType = u8;
}

pub type Sqch1ScrHh = crate::RegValueT<Sqch1ScrHh_SPEC>;

impl Sqch1ScrHh {
    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1scr_hh::Txiberr,
        sqch1scr_hh::Txiberr,
        Sqch1ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1scr_hh::Txiberr,
            sqch1scr_hh::Txiberr,
            Sqch1ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch1scr_hh::Rxferr,
        sqch1scr_hh::Rxferr,
        Sqch1ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch1scr_hh::Rxferr,
            sqch1scr_hh::Rxferr,
            Sqch1ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1scr_hh::Rxfail,
        sqch1scr_hh::Rxfail,
        Sqch1ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1scr_hh::Rxfail,
            sqch1scr_hh::Rxfail,
            Sqch1ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1scr_hh::Rxpfail,
        sqch1scr_hh::Rxpfail,
        Sqch1ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1scr_hh::Rxpfail,
            sqch1scr_hh::Rxpfail,
            Sqch1ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        sqch1scr_hh::Rxcorerr,
        sqch1scr_hh::Rxcorerr,
        Sqch1ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            sqch1scr_hh::Rxcorerr,
            sqch1scr_hh::Rxcorerr,
            Sqch1ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch1scr_hh::Rxake,
        sqch1scr_hh::Rxake,
        Sqch1ScrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch1scr_hh::Rxake,
            sqch1scr_hh::Rxake,
            Sqch1ScrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1ScrHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1ScrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1ScrHh {
    #[inline(always)]
    fn default() -> Sqch1ScrHh {
        <crate::RegValueT<Sqch1ScrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1scr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Ier_SPEC;
impl crate::sealed::RegSpec for Sqch1Ier_SPEC {
    type DataType = u32;
}

pub type Sqch1Ier = crate::RegValueT<Sqch1Ier_SPEC>;

impl Sqch1Ier {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1ier::Aactfin,
        sqch1ier::Aactfin,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1ier::Aactfin,
            sqch1ier::Aactfin,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1ier::Adesfin,
        sqch1ier::Adesfin,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1ier::Adesfin,
            sqch1ier::Adesfin,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        16,
        0x1,
        1,
        0,
        sqch1ier::Dabort,
        sqch1ier::Dabort,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            16,
            0x1,
            1,
            0,
            sqch1ier::Dabort,
            sqch1ier::Dabort,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        19,
        0x1,
        1,
        0,
        sqch1ier::Sizeerr,
        sqch1ier::Sizeerr,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            19,
            0x1,
            1,
            0,
            sqch1ier::Sizeerr,
            sqch1ier::Sizeerr,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        sqch1ier::Txiberr,
        sqch1ier::Txiberr,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            sqch1ier::Txiberr,
            sqch1ier::Txiberr,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x1,
        1,
        0,
        sqch1ier::Rxferr,
        sqch1ier::Rxferr,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x1,
            1,
            0,
            sqch1ier::Rxferr,
            sqch1ier::Rxferr,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        27,
        0x1,
        1,
        0,
        sqch1ier::Rxfail,
        sqch1ier::Rxfail,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            27,
            0x1,
            1,
            0,
            sqch1ier::Rxfail,
            sqch1ier::Rxfail,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x1,
        1,
        0,
        sqch1ier::Rxpfail,
        sqch1ier::Rxpfail,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x1,
            1,
            0,
            sqch1ier::Rxpfail,
            sqch1ier::Rxpfail,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        29,
        0x1,
        1,
        0,
        sqch1ier::Rxcorerr,
        sqch1ier::Rxcorerr,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            29,
            0x1,
            1,
            0,
            sqch1ier::Rxcorerr,
            sqch1ier::Rxcorerr,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        30,
        0x1,
        1,
        0,
        sqch1ier::Rxake,
        sqch1ier::Rxake,
        Sqch1Ier_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            30,
            0x1,
            1,
            0,
            sqch1ier::Rxake,
            sqch1ier::Rxake,
            Sqch1Ier_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<31, 1, 0, Sqch1Ier_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<31,1,0,Sqch1Ier_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Ier {
    #[inline(always)]
    fn default() -> Sqch1Ier {
        <crate::RegValueT<Sqch1Ier_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1ier {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1IerL_SPEC;
impl crate::sealed::RegSpec for Sqch1IerL_SPEC {
    type DataType = u16;
}

pub type Sqch1IerL = crate::RegValueT<Sqch1IerL_SPEC>;

impl Sqch1IerL {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1ier_l::Aactfin,
        sqch1ier_l::Aactfin,
        Sqch1IerL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1ier_l::Aactfin,
            sqch1ier_l::Aactfin,
            Sqch1IerL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1ier_l::Adesfin,
        sqch1ier_l::Adesfin,
        Sqch1IerL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1ier_l::Adesfin,
            sqch1ier_l::Adesfin,
            Sqch1IerL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch1IerL_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch1IerL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1IerL {
    #[inline(always)]
    fn default() -> Sqch1IerL {
        <crate::RegValueT<Sqch1IerL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1ier_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1IerLl_SPEC;
impl crate::sealed::RegSpec for Sqch1IerLl_SPEC {
    type DataType = u8;
}

pub type Sqch1IerLl = crate::RegValueT<Sqch1IerLl_SPEC>;

impl Sqch1IerLl {
    #[inline(always)]
    pub fn aactfin(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1ier_ll::Aactfin,
        sqch1ier_ll::Aactfin,
        Sqch1IerLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1ier_ll::Aactfin,
            sqch1ier_ll::Aactfin,
            Sqch1IerLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<5, 0x7, 1, 0, u8, u8, Sqch1IerLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<5,0x7,1,0,u8,u8,Sqch1IerLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1IerLl {
    #[inline(always)]
    fn default() -> Sqch1IerLl {
        <crate::RegValueT<Sqch1IerLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1ier_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Aactfin_SPEC;
    pub type Aactfin = crate::EnumBitfieldStruct<u8, Aactfin_SPEC>;
    impl Aactfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1IerLh_SPEC;
impl crate::sealed::RegSpec for Sqch1IerLh_SPEC {
    type DataType = u8;
}

pub type Sqch1IerLh = crate::RegValueT<Sqch1IerLh_SPEC>;

impl Sqch1IerLh {
    #[inline(always)]
    pub fn adesfin(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1ier_lh::Adesfin,
        sqch1ier_lh::Adesfin,
        Sqch1IerLh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1ier_lh::Adesfin,
            sqch1ier_lh::Adesfin,
            Sqch1IerLh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1IerLh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1IerLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1IerLh {
    #[inline(always)]
    fn default() -> Sqch1IerLh {
        <crate::RegValueT<Sqch1IerLh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1ier_lh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Adesfin_SPEC;
    pub type Adesfin = crate::EnumBitfieldStruct<u8, Adesfin_SPEC>;
    impl Adesfin {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1IerH_SPEC;
impl crate::sealed::RegSpec for Sqch1IerH_SPEC {
    type DataType = u16;
}

pub type Sqch1IerH = crate::RegValueT<Sqch1IerH_SPEC>;

impl Sqch1IerH {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1ier_h::Dabort,
        sqch1ier_h::Dabort,
        Sqch1IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1ier_h::Dabort,
            sqch1ier_h::Dabort,
            Sqch1IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1ier_h::Sizeerr,
        sqch1ier_h::Sizeerr,
        Sqch1IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1ier_h::Sizeerr,
            sqch1ier_h::Sizeerr,
            Sqch1IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1ier_h::Txiberr,
        sqch1ier_h::Txiberr,
        Sqch1IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1ier_h::Txiberr,
            sqch1ier_h::Txiberr,
            Sqch1IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x1,
        1,
        0,
        sqch1ier_h::Rxferr,
        sqch1ier_h::Rxferr,
        Sqch1IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x1,
            1,
            0,
            sqch1ier_h::Rxferr,
            sqch1ier_h::Rxferr,
            Sqch1IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        11,
        0x1,
        1,
        0,
        sqch1ier_h::Rxfail,
        sqch1ier_h::Rxfail,
        Sqch1IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            11,
            0x1,
            1,
            0,
            sqch1ier_h::Rxfail,
            sqch1ier_h::Rxfail,
            Sqch1IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x1,
        1,
        0,
        sqch1ier_h::Rxpfail,
        sqch1ier_h::Rxpfail,
        Sqch1IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x1,
            1,
            0,
            sqch1ier_h::Rxpfail,
            sqch1ier_h::Rxpfail,
            Sqch1IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        13,
        0x1,
        1,
        0,
        sqch1ier_h::Rxcorerr,
        sqch1ier_h::Rxcorerr,
        Sqch1IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            13,
            0x1,
            1,
            0,
            sqch1ier_h::Rxcorerr,
            sqch1ier_h::Rxcorerr,
            Sqch1IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        14,
        0x1,
        1,
        0,
        sqch1ier_h::Rxake,
        sqch1ier_h::Rxake,
        Sqch1IerH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            14,
            0x1,
            1,
            0,
            sqch1ier_h::Rxake,
            sqch1ier_h::Rxake,
            Sqch1IerH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<15, 1, 0, Sqch1IerH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<15,1,0,Sqch1IerH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1IerH {
    #[inline(always)]
    fn default() -> Sqch1IerH {
        <crate::RegValueT<Sqch1IerH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1ier_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1IerHl_SPEC;
impl crate::sealed::RegSpec for Sqch1IerHl_SPEC {
    type DataType = u8;
}

pub type Sqch1IerHl = crate::RegValueT<Sqch1IerHl_SPEC>;

impl Sqch1IerHl {
    #[inline(always)]
    pub fn dabort(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1ier_hl::Dabort,
        sqch1ier_hl::Dabort,
        Sqch1IerHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1ier_hl::Dabort,
            sqch1ier_hl::Dabort,
            Sqch1IerHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn sizeerr(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1ier_hl::Sizeerr,
        sqch1ier_hl::Sizeerr,
        Sqch1IerHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1ier_hl::Sizeerr,
            sqch1ier_hl::Sizeerr,
            Sqch1IerHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1IerHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1IerHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1IerHl {
    #[inline(always)]
    fn default() -> Sqch1IerHl {
        <crate::RegValueT<Sqch1IerHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1ier_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dabort_SPEC;
    pub type Dabort = crate::EnumBitfieldStruct<u8, Dabort_SPEC>;
    impl Dabort {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Sizeerr_SPEC;
    pub type Sizeerr = crate::EnumBitfieldStruct<u8, Sizeerr_SPEC>;
    impl Sizeerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1IerHh_SPEC;
impl crate::sealed::RegSpec for Sqch1IerHh_SPEC {
    type DataType = u8;
}

pub type Sqch1IerHh = crate::RegValueT<Sqch1IerHh_SPEC>;

impl Sqch1IerHh {
    #[inline(always)]
    pub fn txiberr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1ier_hh::Txiberr,
        sqch1ier_hh::Txiberr,
        Sqch1IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1ier_hh::Txiberr,
            sqch1ier_hh::Txiberr,
            Sqch1IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxferr(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x1,
        1,
        0,
        sqch1ier_hh::Rxferr,
        sqch1ier_hh::Rxferr,
        Sqch1IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x1,
            1,
            0,
            sqch1ier_hh::Rxferr,
            sqch1ier_hh::Rxferr,
            Sqch1IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxfail(
        self,
    ) -> crate::common::RegisterField<
        3,
        0x1,
        1,
        0,
        sqch1ier_hh::Rxfail,
        sqch1ier_hh::Rxfail,
        Sqch1IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            3,
            0x1,
            1,
            0,
            sqch1ier_hh::Rxfail,
            sqch1ier_hh::Rxfail,
            Sqch1IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxpfail(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x1,
        1,
        0,
        sqch1ier_hh::Rxpfail,
        sqch1ier_hh::Rxpfail,
        Sqch1IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x1,
            1,
            0,
            sqch1ier_hh::Rxpfail,
            sqch1ier_hh::Rxpfail,
            Sqch1IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxcorerr(
        self,
    ) -> crate::common::RegisterField<
        5,
        0x1,
        1,
        0,
        sqch1ier_hh::Rxcorerr,
        sqch1ier_hh::Rxcorerr,
        Sqch1IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            5,
            0x1,
            1,
            0,
            sqch1ier_hh::Rxcorerr,
            sqch1ier_hh::Rxcorerr,
            Sqch1IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn rxake(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch1ier_hh::Rxake,
        sqch1ier_hh::Rxake,
        Sqch1IerHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch1ier_hh::Rxake,
            sqch1ier_hh::Rxake,
            Sqch1IerHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1IerHh_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1IerHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1IerHh {
    #[inline(always)]
    fn default() -> Sqch1IerHh {
        <crate::RegValueT<Sqch1IerHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1ier_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Txiberr_SPEC;
    pub type Txiberr = crate::EnumBitfieldStruct<u8, Txiberr_SPEC>;
    impl Txiberr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxferr_SPEC;
    pub type Rxferr = crate::EnumBitfieldStruct<u8, Rxferr_SPEC>;
    impl Rxferr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxfail_SPEC;
    pub type Rxfail = crate::EnumBitfieldStruct<u8, Rxfail_SPEC>;
    impl Rxfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxpfail_SPEC;
    pub type Rxpfail = crate::EnumBitfieldStruct<u8, Rxpfail_SPEC>;
    impl Rxpfail {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxcorerr_SPEC;
    pub type Rxcorerr = crate::EnumBitfieldStruct<u8, Rxcorerr_SPEC>;
    impl Rxcorerr {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Rxake_SPEC;
    pub type Rxake = crate::EnumBitfieldStruct<u8, Rxake_SPEC>;
    impl Rxake {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Dscar_SPEC;
impl crate::sealed::RegSpec for Sqch0Dscar_SPEC {
    type DataType = u32;
}

pub type Sqch0Dscar = crate::RegValueT<Sqch0Dscar_SPEC>;

impl Sqch0Dscar {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch0Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch0Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Sqch0Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Sqch0Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<16, 0x3f, 1, 0, u8, u8, Sqch0Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0x3f,1,0,u8,u8,Sqch0Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, u8, Sqch0Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<22,0x3,1,0,u8,u8,Sqch0Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        sqch0dscar::Fmt,
        sqch0dscar::Fmt,
        Sqch0Dscar_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            sqch0dscar::Fmt,
            sqch0dscar::Fmt,
            Sqch0Dscar_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn spd(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        sqch0dscar::Spd,
        sqch0dscar::Spd,
        Sqch0Dscar_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            sqch0dscar::Spd,
            sqch0dscar::Spd,
            Sqch0Dscar_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn bta(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x3,
        1,
        0,
        sqch0dscar::Bta,
        sqch0dscar::Bta,
        Sqch0Dscar_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x3,
            1,
            0,
            sqch0dscar::Bta,
            sqch0dscar::Bta,
            Sqch0Dscar_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn nxact(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x3,
        1,
        0,
        sqch0dscar::Nxact,
        sqch0dscar::Nxact,
        Sqch0Dscar_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x3,
            1,
            0,
            sqch0dscar::Nxact,
            sqch0dscar::Nxact,
            Sqch0Dscar_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, u8, Sqch0Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<30,0x3,1,0,u8,u8,Sqch0Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Dscar {
    #[inline(always)]
    fn default() -> Sqch0Dscar {
        <crate::RegValueT<Sqch0Dscar_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dscar {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spd_SPEC;
    pub type Spd = crate::EnumBitfieldStruct<u8, Spd_SPEC>;
    impl Spd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bta_SPEC;
    pub type Bta = crate::EnumBitfieldStruct<u8, Bta_SPEC>;
    impl Bta {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);

        pub const _10: Self = Self::new(2);

        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nxact_SPEC;
    pub type Nxact = crate::EnumBitfieldStruct<u8, Nxact_SPEC>;
    impl Nxact {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscarL_SPEC;
impl crate::sealed::RegSpec for Sqch0DscarL_SPEC {
    type DataType = u16;
}

pub type Sqch0DscarL = crate::RegValueT<Sqch0DscarL_SPEC>;

impl Sqch0DscarL {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch0DscarL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch0DscarL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Sqch0DscarL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Sqch0DscarL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscarL {
    #[inline(always)]
    fn default() -> Sqch0DscarL {
        <crate::RegValueT<Sqch0DscarL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscarLl_SPEC;
impl crate::sealed::RegSpec for Sqch0DscarLl_SPEC {
    type DataType = u8;
}

pub type Sqch0DscarLl = crate::RegValueT<Sqch0DscarLl_SPEC>;

impl Sqch0DscarLl {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch0DscarLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch0DscarLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscarLl {
    #[inline(always)]
    fn default() -> Sqch0DscarLl {
        <crate::RegValueT<Sqch0DscarLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscarLh_SPEC;
impl crate::sealed::RegSpec for Sqch0DscarLh_SPEC {
    type DataType = u8;
}

pub type Sqch0DscarLh = crate::RegValueT<Sqch0DscarLh_SPEC>;

impl Sqch0DscarLh {
    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch0DscarLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch0DscarLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscarLh {
    #[inline(always)]
    fn default() -> Sqch0DscarLh {
        <crate::RegValueT<Sqch0DscarLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscarH_SPEC;
impl crate::sealed::RegSpec for Sqch0DscarH_SPEC {
    type DataType = u16;
}

pub type Sqch0DscarH = crate::RegValueT<Sqch0DscarH_SPEC>;

impl Sqch0DscarH {
    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, u8, Sqch0DscarH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3f,1,0,u8,u8,Sqch0DscarH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, Sqch0DscarH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,Sqch0DscarH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch0dscar_h::Fmt,
        sqch0dscar_h::Fmt,
        Sqch0DscarH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch0dscar_h::Fmt,
            sqch0dscar_h::Fmt,
            Sqch0DscarH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn spd(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        sqch0dscar_h::Spd,
        sqch0dscar_h::Spd,
        Sqch0DscarH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            sqch0dscar_h::Spd,
            sqch0dscar_h::Spd,
            Sqch0DscarH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn bta(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x3,
        1,
        0,
        sqch0dscar_h::Bta,
        sqch0dscar_h::Bta,
        Sqch0DscarH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x3,
            1,
            0,
            sqch0dscar_h::Bta,
            sqch0dscar_h::Bta,
            Sqch0DscarH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn nxact(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x3,
        1,
        0,
        sqch0dscar_h::Nxact,
        sqch0dscar_h::Nxact,
        Sqch0DscarH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x3,
            1,
            0,
            sqch0dscar_h::Nxact,
            sqch0dscar_h::Nxact,
            Sqch0DscarH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, Sqch0DscarH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,Sqch0DscarH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscarH {
    #[inline(always)]
    fn default() -> Sqch0DscarH {
        <crate::RegValueT<Sqch0DscarH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dscar_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spd_SPEC;
    pub type Spd = crate::EnumBitfieldStruct<u8, Spd_SPEC>;
    impl Spd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bta_SPEC;
    pub type Bta = crate::EnumBitfieldStruct<u8, Bta_SPEC>;
    impl Bta {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);

        pub const _10: Self = Self::new(2);

        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nxact_SPEC;
    pub type Nxact = crate::EnumBitfieldStruct<u8, Nxact_SPEC>;
    impl Nxact {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscarHl_SPEC;
impl crate::sealed::RegSpec for Sqch0DscarHl_SPEC {
    type DataType = u8;
}

pub type Sqch0DscarHl = crate::RegValueT<Sqch0DscarHl_SPEC>;

impl Sqch0DscarHl {
    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, u8, Sqch0DscarHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3f,1,0,u8,u8,Sqch0DscarHl_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, Sqch0DscarHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,Sqch0DscarHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscarHl {
    #[inline(always)]
    fn default() -> Sqch0DscarHl {
        <crate::RegValueT<Sqch0DscarHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscarHh_SPEC;
impl crate::sealed::RegSpec for Sqch0DscarHh_SPEC {
    type DataType = u8;
}

pub type Sqch0DscarHh = crate::RegValueT<Sqch0DscarHh_SPEC>;

impl Sqch0DscarHh {
    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0dscar_hh::Fmt,
        sqch0dscar_hh::Fmt,
        Sqch0DscarHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0dscar_hh::Fmt,
            sqch0dscar_hh::Fmt,
            Sqch0DscarHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn spd(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        sqch0dscar_hh::Spd,
        sqch0dscar_hh::Spd,
        Sqch0DscarHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            sqch0dscar_hh::Spd,
            sqch0dscar_hh::Spd,
            Sqch0DscarHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn bta(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x3,
        1,
        0,
        sqch0dscar_hh::Bta,
        sqch0dscar_hh::Bta,
        Sqch0DscarHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x3,
            1,
            0,
            sqch0dscar_hh::Bta,
            sqch0dscar_hh::Bta,
            Sqch0DscarHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn nxact(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x3,
        1,
        0,
        sqch0dscar_hh::Nxact,
        sqch0dscar_hh::Nxact,
        Sqch0DscarHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x3,
            1,
            0,
            sqch0dscar_hh::Nxact,
            sqch0dscar_hh::Nxact,
            Sqch0DscarHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, Sqch0DscarHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,Sqch0DscarHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscarHh {
    #[inline(always)]
    fn default() -> Sqch0DscarHh {
        <crate::RegValueT<Sqch0DscarHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dscar_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spd_SPEC;
    pub type Spd = crate::EnumBitfieldStruct<u8, Spd_SPEC>;
    impl Spd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bta_SPEC;
    pub type Bta = crate::EnumBitfieldStruct<u8, Bta_SPEC>;
    impl Bta {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);

        pub const _10: Self = Self::new(2);

        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nxact_SPEC;
    pub type Nxact = crate::EnumBitfieldStruct<u8, Nxact_SPEC>;
    impl Nxact {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Dscbr_SPEC;
impl crate::sealed::RegSpec for Sqch0Dscbr_SPEC {
    type DataType = u32;
}

pub type Sqch0Dscbr = crate::RegValueT<Sqch0Dscbr_SPEC>;

impl Sqch0Dscbr {
    #[inline(always)]
    pub fn dtsel(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x3,
        1,
        0,
        sqch0dscbr::Dtsel,
        sqch0dscbr::Dtsel,
        Sqch0Dscbr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x3,
            1,
            0,
            sqch0dscbr::Dtsel,
            sqch0dscbr::Dtsel,
            Sqch0Dscbr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<26, 0x3f, 1, 0, u8, u8, Sqch0Dscbr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<26,0x3f,1,0,u8,u8,Sqch0Dscbr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0Dscbr {
    #[inline(always)]
    fn default() -> Sqch0Dscbr {
        <crate::RegValueT<Sqch0Dscbr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dscbr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dtsel_SPEC;
    pub type Dtsel = crate::EnumBitfieldStruct<u8, Dtsel_SPEC>;
    impl Dtsel {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Dsccr_SPEC;
impl crate::sealed::RegSpec for Sqch0Dsccr_SPEC {
    type DataType = u32;
}

pub type Sqch0Dsccr = crate::RegValueT<Sqch0Dsccr_SPEC>;

impl Sqch0Dsccr {
    #[inline(always)]
    pub fn finact(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0dsccr::Finact,
        sqch0dsccr::Finact,
        Sqch0Dsccr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0dsccr::Finact,
            sqch0dsccr::Finact,
            Sqch0Dsccr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn auxop(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        sqch0dsccr::Auxop,
        sqch0dsccr::Auxop,
        Sqch0Dsccr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            sqch0dsccr::Auxop,
            sqch0dsccr::Auxop,
            Sqch0Dsccr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<23, 1, 0, Sqch0Dsccr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<23,1,0,Sqch0Dsccr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn actcode(
        self,
    ) -> crate::common::RegisterField<
        24,
        0xff,
        1,
        0,
        sqch0dsccr::Actcode,
        sqch0dsccr::Actcode,
        Sqch0Dsccr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0xff,
            1,
            0,
            sqch0dsccr::Actcode,
            sqch0dsccr::Actcode,
            Sqch0Dsccr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Sqch0Dsccr {
    #[inline(always)]
    fn default() -> Sqch0Dsccr {
        <crate::RegValueT<Sqch0Dsccr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dsccr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Finact_SPEC;
    pub type Finact = crate::EnumBitfieldStruct<u8, Finact_SPEC>;
    impl Finact {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Auxop_SPEC;
    pub type Auxop = crate::EnumBitfieldStruct<u8, Auxop_SPEC>;
    impl Auxop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actcode_SPEC;
    pub type Actcode = crate::EnumBitfieldStruct<u8, Actcode_SPEC>;
    impl Actcode {
        pub const _00000000: Self = Self::new(0);

        pub const _00000001: Self = Self::new(1);

        pub const _00000010: Self = Self::new(2);

        pub const _00000011: Self = Self::new(3);

        pub const _00000000: Self = Self::new(0);

        pub const _00000100: Self = Self::new(4);

        pub const _00000101: Self = Self::new(5);

        pub const _00001000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DsccrL_SPEC;
impl crate::sealed::RegSpec for Sqch0DsccrL_SPEC {
    type DataType = u16;
}

pub type Sqch0DsccrL = crate::RegValueT<Sqch0DsccrL_SPEC>;

impl Sqch0DsccrL {
    #[inline(always)]
    pub fn finact(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0dsccr_l::Finact,
        sqch0dsccr_l::Finact,
        Sqch0DsccrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0dsccr_l::Finact,
            sqch0dsccr_l::Finact,
            Sqch0DsccrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, u16, Sqch0DsccrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fff,1,0,u16,u16,Sqch0DsccrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DsccrL {
    #[inline(always)]
    fn default() -> Sqch0DsccrL {
        <crate::RegValueT<Sqch0DsccrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dsccr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Finact_SPEC;
    pub type Finact = crate::EnumBitfieldStruct<u8, Finact_SPEC>;
    impl Finact {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DsccrLl_SPEC;
impl crate::sealed::RegSpec for Sqch0DsccrLl_SPEC {
    type DataType = u8;
}

pub type Sqch0DsccrLl = crate::RegValueT<Sqch0DsccrLl_SPEC>;

impl Sqch0DsccrLl {
    #[inline(always)]
    pub fn finact(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch0dsccr_ll::Finact,
        sqch0dsccr_ll::Finact,
        Sqch0DsccrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch0dsccr_ll::Finact,
            sqch0dsccr_ll::Finact,
            Sqch0DsccrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, Sqch0DsccrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,Sqch0DsccrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DsccrLl {
    #[inline(always)]
    fn default() -> Sqch0DsccrLl {
        <crate::RegValueT<Sqch0DsccrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dsccr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Finact_SPEC;
    pub type Finact = crate::EnumBitfieldStruct<u8, Finact_SPEC>;
    impl Finact {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DsccrH_SPEC;
impl crate::sealed::RegSpec for Sqch0DsccrH_SPEC {
    type DataType = u16;
}

pub type Sqch0DsccrH = crate::RegValueT<Sqch0DsccrH_SPEC>;

impl Sqch0DsccrH {
    #[inline(always)]
    pub fn auxop(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch0dsccr_h::Auxop,
        sqch0dsccr_h::Auxop,
        Sqch0DsccrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch0dsccr_h::Auxop,
            sqch0dsccr_h::Auxop,
            Sqch0DsccrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0DsccrH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0DsccrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn actcode(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        sqch0dsccr_h::Actcode,
        sqch0dsccr_h::Actcode,
        Sqch0DsccrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            sqch0dsccr_h::Actcode,
            sqch0dsccr_h::Actcode,
            Sqch0DsccrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Sqch0DsccrH {
    #[inline(always)]
    fn default() -> Sqch0DsccrH {
        <crate::RegValueT<Sqch0DsccrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dsccr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Auxop_SPEC;
    pub type Auxop = crate::EnumBitfieldStruct<u8, Auxop_SPEC>;
    impl Auxop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actcode_SPEC;
    pub type Actcode = crate::EnumBitfieldStruct<u8, Actcode_SPEC>;
    impl Actcode {
        pub const _00000000: Self = Self::new(0);

        pub const _00000001: Self = Self::new(1);

        pub const _00000010: Self = Self::new(2);

        pub const _00000011: Self = Self::new(3);

        pub const _00000000: Self = Self::new(0);

        pub const _00000100: Self = Self::new(4);

        pub const _00000101: Self = Self::new(5);

        pub const _00001000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DsccrHl_SPEC;
impl crate::sealed::RegSpec for Sqch0DsccrHl_SPEC {
    type DataType = u8;
}

pub type Sqch0DsccrHl = crate::RegValueT<Sqch0DsccrHl_SPEC>;

impl Sqch0DsccrHl {
    #[inline(always)]
    pub fn auxop(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch0dsccr_hl::Auxop,
        sqch0dsccr_hl::Auxop,
        Sqch0DsccrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch0dsccr_hl::Auxop,
            sqch0dsccr_hl::Auxop,
            Sqch0DsccrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch0DsccrHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch0DsccrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DsccrHl {
    #[inline(always)]
    fn default() -> Sqch0DsccrHl {
        <crate::RegValueT<Sqch0DsccrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dsccr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Auxop_SPEC;
    pub type Auxop = crate::EnumBitfieldStruct<u8, Auxop_SPEC>;
    impl Auxop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DsccrHh_SPEC;
impl crate::sealed::RegSpec for Sqch0DsccrHh_SPEC {
    type DataType = u8;
}

pub type Sqch0DsccrHh = crate::RegValueT<Sqch0DsccrHh_SPEC>;

impl Sqch0DsccrHh {
    #[inline(always)]
    pub fn actcode(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        sqch0dsccr_hh::Actcode,
        sqch0dsccr_hh::Actcode,
        Sqch0DsccrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            sqch0dsccr_hh::Actcode,
            sqch0dsccr_hh::Actcode,
            Sqch0DsccrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Sqch0DsccrHh {
    #[inline(always)]
    fn default() -> Sqch0DsccrHh {
        <crate::RegValueT<Sqch0DsccrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch0dsccr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actcode_SPEC;
    pub type Actcode = crate::EnumBitfieldStruct<u8, Actcode_SPEC>;
    impl Actcode {
        pub const _00000000: Self = Self::new(0);

        pub const _00000001: Self = Self::new(1);

        pub const _00000010: Self = Self::new(2);

        pub const _00000011: Self = Self::new(3);

        pub const _00000000: Self = Self::new(0);

        pub const _00000100: Self = Self::new(4);

        pub const _00000101: Self = Self::new(5);

        pub const _00001000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0Dscdr_SPEC;
impl crate::sealed::RegSpec for Sqch0Dscdr_SPEC {
    type DataType = u32;
}

pub type Sqch0Dscdr = crate::RegValueT<Sqch0Dscdr_SPEC>;

impl Sqch0Dscdr {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffffffff,
        1,
        0,
        u32,
        u32,
        Sqch0Dscdr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffffffff,
            1,
            0,
            u32,
            u32,
            Sqch0Dscdr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Sqch0Dscdr {
    #[inline(always)]
    fn default() -> Sqch0Dscdr {
        <crate::RegValueT<Sqch0Dscdr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscdrL_SPEC;
impl crate::sealed::RegSpec for Sqch0DscdrL_SPEC {
    type DataType = u16;
}

pub type Sqch0DscdrL = crate::RegValueT<Sqch0DscdrL_SPEC>;

impl Sqch0DscdrL {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, Sqch0DscdrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,Sqch0DscdrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscdrL {
    #[inline(always)]
    fn default() -> Sqch0DscdrL {
        <crate::RegValueT<Sqch0DscdrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscdrLl_SPEC;
impl crate::sealed::RegSpec for Sqch0DscdrLl_SPEC {
    type DataType = u8;
}

pub type Sqch0DscdrLl = crate::RegValueT<Sqch0DscdrLl_SPEC>;

impl Sqch0DscdrLl {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch0DscdrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch0DscdrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscdrLl {
    #[inline(always)]
    fn default() -> Sqch0DscdrLl {
        <crate::RegValueT<Sqch0DscdrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscdrLh_SPEC;
impl crate::sealed::RegSpec for Sqch0DscdrLh_SPEC {
    type DataType = u8;
}

pub type Sqch0DscdrLh = crate::RegValueT<Sqch0DscdrLh_SPEC>;

impl Sqch0DscdrLh {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch0DscdrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch0DscdrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscdrLh {
    #[inline(always)]
    fn default() -> Sqch0DscdrLh {
        <crate::RegValueT<Sqch0DscdrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscdrH_SPEC;
impl crate::sealed::RegSpec for Sqch0DscdrH_SPEC {
    type DataType = u16;
}

pub type Sqch0DscdrH = crate::RegValueT<Sqch0DscdrH_SPEC>;

impl Sqch0DscdrH {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, Sqch0DscdrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,Sqch0DscdrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscdrH {
    #[inline(always)]
    fn default() -> Sqch0DscdrH {
        <crate::RegValueT<Sqch0DscdrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscdrHl_SPEC;
impl crate::sealed::RegSpec for Sqch0DscdrHl_SPEC {
    type DataType = u8;
}

pub type Sqch0DscdrHl = crate::RegValueT<Sqch0DscdrHl_SPEC>;

impl Sqch0DscdrHl {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch0DscdrHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch0DscdrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscdrHl {
    #[inline(always)]
    fn default() -> Sqch0DscdrHl {
        <crate::RegValueT<Sqch0DscdrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch0DscdrHh_SPEC;
impl crate::sealed::RegSpec for Sqch0DscdrHh_SPEC {
    type DataType = u8;
}

pub type Sqch0DscdrHh = crate::RegValueT<Sqch0DscdrHh_SPEC>;

impl Sqch0DscdrHh {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch0DscdrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch0DscdrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch0DscdrHh {
    #[inline(always)]
    fn default() -> Sqch0DscdrHh {
        <crate::RegValueT<Sqch0DscdrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Dscar_SPEC;
impl crate::sealed::RegSpec for Sqch1Dscar_SPEC {
    type DataType = u32;
}

pub type Sqch1Dscar = crate::RegValueT<Sqch1Dscar_SPEC>;

impl Sqch1Dscar {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch1Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch1Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Sqch1Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Sqch1Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<16, 0x3f, 1, 0, u8, u8, Sqch1Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<16,0x3f,1,0,u8,u8,Sqch1Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<22, 0x3, 1, 0, u8, u8, Sqch1Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<22,0x3,1,0,u8,u8,Sqch1Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x1,
        1,
        0,
        sqch1dscar::Fmt,
        sqch1dscar::Fmt,
        Sqch1Dscar_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x1,
            1,
            0,
            sqch1dscar::Fmt,
            sqch1dscar::Fmt,
            Sqch1Dscar_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn spd(
        self,
    ) -> crate::common::RegisterField<
        25,
        0x1,
        1,
        0,
        sqch1dscar::Spd,
        sqch1dscar::Spd,
        Sqch1Dscar_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            25,
            0x1,
            1,
            0,
            sqch1dscar::Spd,
            sqch1dscar::Spd,
            Sqch1Dscar_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn bta(
        self,
    ) -> crate::common::RegisterField<
        26,
        0x3,
        1,
        0,
        sqch1dscar::Bta,
        sqch1dscar::Bta,
        Sqch1Dscar_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            26,
            0x3,
            1,
            0,
            sqch1dscar::Bta,
            sqch1dscar::Bta,
            Sqch1Dscar_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn nxact(
        self,
    ) -> crate::common::RegisterField<
        28,
        0x3,
        1,
        0,
        sqch1dscar::Nxact,
        sqch1dscar::Nxact,
        Sqch1Dscar_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            28,
            0x3,
            1,
            0,
            sqch1dscar::Nxact,
            sqch1dscar::Nxact,
            Sqch1Dscar_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<30, 0x3, 1, 0, u8, u8, Sqch1Dscar_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<30,0x3,1,0,u8,u8,Sqch1Dscar_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Dscar {
    #[inline(always)]
    fn default() -> Sqch1Dscar {
        <crate::RegValueT<Sqch1Dscar_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dscar {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spd_SPEC;
    pub type Spd = crate::EnumBitfieldStruct<u8, Spd_SPEC>;
    impl Spd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bta_SPEC;
    pub type Bta = crate::EnumBitfieldStruct<u8, Bta_SPEC>;
    impl Bta {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);

        pub const _10: Self = Self::new(2);

        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nxact_SPEC;
    pub type Nxact = crate::EnumBitfieldStruct<u8, Nxact_SPEC>;
    impl Nxact {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscarL_SPEC;
impl crate::sealed::RegSpec for Sqch1DscarL_SPEC {
    type DataType = u16;
}

pub type Sqch1DscarL = crate::RegValueT<Sqch1DscarL_SPEC>;

impl Sqch1DscarL {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch1DscarL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch1DscarL_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<8, 0xff, 1, 0, u8, u8, Sqch1DscarL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<8,0xff,1,0,u8,u8,Sqch1DscarL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscarL {
    #[inline(always)]
    fn default() -> Sqch1DscarL {
        <crate::RegValueT<Sqch1DscarL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscarLl_SPEC;
impl crate::sealed::RegSpec for Sqch1DscarLl_SPEC {
    type DataType = u8;
}

pub type Sqch1DscarLl = crate::RegValueT<Sqch1DscarLl_SPEC>;

impl Sqch1DscarLl {
    #[inline(always)]
    pub fn data0(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch1DscarLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch1DscarLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscarLl {
    #[inline(always)]
    fn default() -> Sqch1DscarLl {
        <crate::RegValueT<Sqch1DscarLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscarLh_SPEC;
impl crate::sealed::RegSpec for Sqch1DscarLh_SPEC {
    type DataType = u8;
}

pub type Sqch1DscarLh = crate::RegValueT<Sqch1DscarLh_SPEC>;

impl Sqch1DscarLh {
    #[inline(always)]
    pub fn data1(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch1DscarLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch1DscarLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscarLh {
    #[inline(always)]
    fn default() -> Sqch1DscarLh {
        <crate::RegValueT<Sqch1DscarLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscarH_SPEC;
impl crate::sealed::RegSpec for Sqch1DscarH_SPEC {
    type DataType = u16;
}

pub type Sqch1DscarH = crate::RegValueT<Sqch1DscarH_SPEC>;

impl Sqch1DscarH {
    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, u8, Sqch1DscarH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3f,1,0,u8,u8,Sqch1DscarH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, Sqch1DscarH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,Sqch1DscarH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        8,
        0x1,
        1,
        0,
        sqch1dscar_h::Fmt,
        sqch1dscar_h::Fmt,
        Sqch1DscarH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0x1,
            1,
            0,
            sqch1dscar_h::Fmt,
            sqch1dscar_h::Fmt,
            Sqch1DscarH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn spd(
        self,
    ) -> crate::common::RegisterField<
        9,
        0x1,
        1,
        0,
        sqch1dscar_h::Spd,
        sqch1dscar_h::Spd,
        Sqch1DscarH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            9,
            0x1,
            1,
            0,
            sqch1dscar_h::Spd,
            sqch1dscar_h::Spd,
            Sqch1DscarH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn bta(
        self,
    ) -> crate::common::RegisterField<
        10,
        0x3,
        1,
        0,
        sqch1dscar_h::Bta,
        sqch1dscar_h::Bta,
        Sqch1DscarH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            10,
            0x3,
            1,
            0,
            sqch1dscar_h::Bta,
            sqch1dscar_h::Bta,
            Sqch1DscarH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn nxact(
        self,
    ) -> crate::common::RegisterField<
        12,
        0x3,
        1,
        0,
        sqch1dscar_h::Nxact,
        sqch1dscar_h::Nxact,
        Sqch1DscarH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            12,
            0x3,
            1,
            0,
            sqch1dscar_h::Nxact,
            sqch1dscar_h::Nxact,
            Sqch1DscarH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<14, 0x3, 1, 0, u8, u8, Sqch1DscarH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<14,0x3,1,0,u8,u8,Sqch1DscarH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscarH {
    #[inline(always)]
    fn default() -> Sqch1DscarH {
        <crate::RegValueT<Sqch1DscarH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dscar_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spd_SPEC;
    pub type Spd = crate::EnumBitfieldStruct<u8, Spd_SPEC>;
    impl Spd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bta_SPEC;
    pub type Bta = crate::EnumBitfieldStruct<u8, Bta_SPEC>;
    impl Bta {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);

        pub const _10: Self = Self::new(2);

        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nxact_SPEC;
    pub type Nxact = crate::EnumBitfieldStruct<u8, Nxact_SPEC>;
    impl Nxact {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscarHl_SPEC;
impl crate::sealed::RegSpec for Sqch1DscarHl_SPEC {
    type DataType = u8;
}

pub type Sqch1DscarHl = crate::RegValueT<Sqch1DscarHl_SPEC>;

impl Sqch1DscarHl {
    #[inline(always)]
    pub fn dt(
        self,
    ) -> crate::common::RegisterField<0, 0x3f, 1, 0, u8, u8, Sqch1DscarHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0x3f,1,0,u8,u8,Sqch1DscarHl_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn vc(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, Sqch1DscarHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,Sqch1DscarHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscarHl {
    #[inline(always)]
    fn default() -> Sqch1DscarHl {
        <crate::RegValueT<Sqch1DscarHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscarHh_SPEC;
impl crate::sealed::RegSpec for Sqch1DscarHh_SPEC {
    type DataType = u8;
}

pub type Sqch1DscarHh = crate::RegValueT<Sqch1DscarHh_SPEC>;

impl Sqch1DscarHh {
    #[inline(always)]
    pub fn fmt(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1dscar_hh::Fmt,
        sqch1dscar_hh::Fmt,
        Sqch1DscarHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1dscar_hh::Fmt,
            sqch1dscar_hh::Fmt,
            Sqch1DscarHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn spd(
        self,
    ) -> crate::common::RegisterField<
        1,
        0x1,
        1,
        0,
        sqch1dscar_hh::Spd,
        sqch1dscar_hh::Spd,
        Sqch1DscarHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            1,
            0x1,
            1,
            0,
            sqch1dscar_hh::Spd,
            sqch1dscar_hh::Spd,
            Sqch1DscarHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn bta(
        self,
    ) -> crate::common::RegisterField<
        2,
        0x3,
        1,
        0,
        sqch1dscar_hh::Bta,
        sqch1dscar_hh::Bta,
        Sqch1DscarHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            2,
            0x3,
            1,
            0,
            sqch1dscar_hh::Bta,
            sqch1dscar_hh::Bta,
            Sqch1DscarHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn nxact(
        self,
    ) -> crate::common::RegisterField<
        4,
        0x3,
        1,
        0,
        sqch1dscar_hh::Nxact,
        sqch1dscar_hh::Nxact,
        Sqch1DscarHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            4,
            0x3,
            1,
            0,
            sqch1dscar_hh::Nxact,
            sqch1dscar_hh::Nxact,
            Sqch1DscarHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<6, 0x3, 1, 0, u8, u8, Sqch1DscarHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<6,0x3,1,0,u8,u8,Sqch1DscarHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscarHh {
    #[inline(always)]
    fn default() -> Sqch1DscarHh {
        <crate::RegValueT<Sqch1DscarHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dscar_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Fmt_SPEC;
    pub type Fmt = crate::EnumBitfieldStruct<u8, Fmt_SPEC>;
    impl Fmt {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Spd_SPEC;
    pub type Spd = crate::EnumBitfieldStruct<u8, Spd_SPEC>;
    impl Spd {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Bta_SPEC;
    pub type Bta = crate::EnumBitfieldStruct<u8, Bta_SPEC>;
    impl Bta {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);

        pub const _10: Self = Self::new(2);

        pub const _11: Self = Self::new(3);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Nxact_SPEC;
    pub type Nxact = crate::EnumBitfieldStruct<u8, Nxact_SPEC>;
    impl Nxact {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Dscbr_SPEC;
impl crate::sealed::RegSpec for Sqch1Dscbr_SPEC {
    type DataType = u32;
}

pub type Sqch1Dscbr = crate::RegValueT<Sqch1Dscbr_SPEC>;

impl Sqch1Dscbr {
    #[inline(always)]
    pub fn dtsel(
        self,
    ) -> crate::common::RegisterField<
        24,
        0x3,
        1,
        0,
        sqch1dscbr::Dtsel,
        sqch1dscbr::Dtsel,
        Sqch1Dscbr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0x3,
            1,
            0,
            sqch1dscbr::Dtsel,
            sqch1dscbr::Dtsel,
            Sqch1Dscbr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<26, 0x3f, 1, 0, u8, u8, Sqch1Dscbr_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<26,0x3f,1,0,u8,u8,Sqch1Dscbr_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1Dscbr {
    #[inline(always)]
    fn default() -> Sqch1Dscbr {
        <crate::RegValueT<Sqch1Dscbr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dscbr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Dtsel_SPEC;
    pub type Dtsel = crate::EnumBitfieldStruct<u8, Dtsel_SPEC>;
    impl Dtsel {
        pub const _00: Self = Self::new(0);

        pub const _01: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Dsccr_SPEC;
impl crate::sealed::RegSpec for Sqch1Dsccr_SPEC {
    type DataType = u32;
}

pub type Sqch1Dsccr = crate::RegValueT<Sqch1Dsccr_SPEC>;

impl Sqch1Dsccr {
    #[inline(always)]
    pub fn finact(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1dsccr::Finact,
        sqch1dsccr::Finact,
        Sqch1Dsccr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1dsccr::Finact,
            sqch1dsccr::Finact,
            Sqch1Dsccr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn auxop(
        self,
    ) -> crate::common::RegisterField<
        22,
        0x1,
        1,
        0,
        sqch1dsccr::Auxop,
        sqch1dsccr::Auxop,
        Sqch1Dsccr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            22,
            0x1,
            1,
            0,
            sqch1dsccr::Auxop,
            sqch1dsccr::Auxop,
            Sqch1Dsccr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<23, 1, 0, Sqch1Dsccr_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<23,1,0,Sqch1Dsccr_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn actcode(
        self,
    ) -> crate::common::RegisterField<
        24,
        0xff,
        1,
        0,
        sqch1dsccr::Actcode,
        sqch1dsccr::Actcode,
        Sqch1Dsccr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            24,
            0xff,
            1,
            0,
            sqch1dsccr::Actcode,
            sqch1dsccr::Actcode,
            Sqch1Dsccr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Sqch1Dsccr {
    #[inline(always)]
    fn default() -> Sqch1Dsccr {
        <crate::RegValueT<Sqch1Dsccr_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dsccr {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Finact_SPEC;
    pub type Finact = crate::EnumBitfieldStruct<u8, Finact_SPEC>;
    impl Finact {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Auxop_SPEC;
    pub type Auxop = crate::EnumBitfieldStruct<u8, Auxop_SPEC>;
    impl Auxop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actcode_SPEC;
    pub type Actcode = crate::EnumBitfieldStruct<u8, Actcode_SPEC>;
    impl Actcode {
        pub const _00000000: Self = Self::new(0);

        pub const _00000001: Self = Self::new(1);

        pub const _00000010: Self = Self::new(2);

        pub const _00000011: Self = Self::new(3);

        pub const _00000000: Self = Self::new(0);

        pub const _00000100: Self = Self::new(4);

        pub const _00000101: Self = Self::new(5);

        pub const _00001000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DsccrL_SPEC;
impl crate::sealed::RegSpec for Sqch1DsccrL_SPEC {
    type DataType = u16;
}

pub type Sqch1DsccrL = crate::RegValueT<Sqch1DsccrL_SPEC>;

impl Sqch1DsccrL {
    #[inline(always)]
    pub fn finact(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1dsccr_l::Finact,
        sqch1dsccr_l::Finact,
        Sqch1DsccrL_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1dsccr_l::Finact,
            sqch1dsccr_l::Finact,
            Sqch1DsccrL_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1fff, 1, 0, u16, u16, Sqch1DsccrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1fff,1,0,u16,u16,Sqch1DsccrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DsccrL {
    #[inline(always)]
    fn default() -> Sqch1DsccrL {
        <crate::RegValueT<Sqch1DsccrL_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dsccr_l {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Finact_SPEC;
    pub type Finact = crate::EnumBitfieldStruct<u8, Finact_SPEC>;
    impl Finact {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DsccrLl_SPEC;
impl crate::sealed::RegSpec for Sqch1DsccrLl_SPEC {
    type DataType = u8;
}

pub type Sqch1DsccrLl = crate::RegValueT<Sqch1DsccrLl_SPEC>;

impl Sqch1DsccrLl {
    #[inline(always)]
    pub fn finact(
        self,
    ) -> crate::common::RegisterField<
        0,
        0x1,
        1,
        0,
        sqch1dsccr_ll::Finact,
        sqch1dsccr_ll::Finact,
        Sqch1DsccrLl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0x1,
            1,
            0,
            sqch1dsccr_ll::Finact,
            sqch1dsccr_ll::Finact,
            Sqch1DsccrLl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterField<3, 0x1f, 1, 0, u8, u8, Sqch1DsccrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<3,0x1f,1,0,u8,u8,Sqch1DsccrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DsccrLl {
    #[inline(always)]
    fn default() -> Sqch1DsccrLl {
        <crate::RegValueT<Sqch1DsccrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dsccr_ll {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Finact_SPEC;
    pub type Finact = crate::EnumBitfieldStruct<u8, Finact_SPEC>;
    impl Finact {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DsccrH_SPEC;
impl crate::sealed::RegSpec for Sqch1DsccrH_SPEC {
    type DataType = u16;
}

pub type Sqch1DsccrH = crate::RegValueT<Sqch1DsccrH_SPEC>;

impl Sqch1DsccrH {
    #[inline(always)]
    pub fn auxop(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch1dsccr_h::Auxop,
        sqch1dsccr_h::Auxop,
        Sqch1DsccrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch1dsccr_h::Auxop,
            sqch1dsccr_h::Auxop,
            Sqch1DsccrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1DsccrH_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1DsccrH_SPEC,crate::common::RW>::from_register(self,0)
    }

    #[inline(always)]
    pub fn actcode(
        self,
    ) -> crate::common::RegisterField<
        8,
        0xff,
        1,
        0,
        sqch1dsccr_h::Actcode,
        sqch1dsccr_h::Actcode,
        Sqch1DsccrH_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            8,
            0xff,
            1,
            0,
            sqch1dsccr_h::Actcode,
            sqch1dsccr_h::Actcode,
            Sqch1DsccrH_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Sqch1DsccrH {
    #[inline(always)]
    fn default() -> Sqch1DsccrH {
        <crate::RegValueT<Sqch1DsccrH_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dsccr_h {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Auxop_SPEC;
    pub type Auxop = crate::EnumBitfieldStruct<u8, Auxop_SPEC>;
    impl Auxop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actcode_SPEC;
    pub type Actcode = crate::EnumBitfieldStruct<u8, Actcode_SPEC>;
    impl Actcode {
        pub const _00000000: Self = Self::new(0);

        pub const _00000001: Self = Self::new(1);

        pub const _00000010: Self = Self::new(2);

        pub const _00000011: Self = Self::new(3);

        pub const _00000000: Self = Self::new(0);

        pub const _00000100: Self = Self::new(4);

        pub const _00000101: Self = Self::new(5);

        pub const _00001000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DsccrHl_SPEC;
impl crate::sealed::RegSpec for Sqch1DsccrHl_SPEC {
    type DataType = u8;
}

pub type Sqch1DsccrHl = crate::RegValueT<Sqch1DsccrHl_SPEC>;

impl Sqch1DsccrHl {
    #[inline(always)]
    pub fn auxop(
        self,
    ) -> crate::common::RegisterField<
        6,
        0x1,
        1,
        0,
        sqch1dsccr_hl::Auxop,
        sqch1dsccr_hl::Auxop,
        Sqch1DsccrHl_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            6,
            0x1,
            1,
            0,
            sqch1dsccr_hl::Auxop,
            sqch1dsccr_hl::Auxop,
            Sqch1DsccrHl_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }

    #[inline(always)]
    pub fn reserved(
        self,
    ) -> crate::common::RegisterFieldBool<7, 1, 0, Sqch1DsccrHl_SPEC, crate::common::RW> {
        crate::common::RegisterFieldBool::<7,1,0,Sqch1DsccrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DsccrHl {
    #[inline(always)]
    fn default() -> Sqch1DsccrHl {
        <crate::RegValueT<Sqch1DsccrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dsccr_hl {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Auxop_SPEC;
    pub type Auxop = crate::EnumBitfieldStruct<u8, Auxop_SPEC>;
    impl Auxop {
        pub const _0: Self = Self::new(0);

        pub const _1: Self = Self::new(1);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DsccrHh_SPEC;
impl crate::sealed::RegSpec for Sqch1DsccrHh_SPEC {
    type DataType = u8;
}

pub type Sqch1DsccrHh = crate::RegValueT<Sqch1DsccrHh_SPEC>;

impl Sqch1DsccrHh {
    #[inline(always)]
    pub fn actcode(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xff,
        1,
        0,
        sqch1dsccr_hh::Actcode,
        sqch1dsccr_hh::Actcode,
        Sqch1DsccrHh_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xff,
            1,
            0,
            sqch1dsccr_hh::Actcode,
            sqch1dsccr_hh::Actcode,
            Sqch1DsccrHh_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Sqch1DsccrHh {
    #[inline(always)]
    fn default() -> Sqch1DsccrHh {
        <crate::RegValueT<Sqch1DsccrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
pub mod sqch1dsccr_hh {

    #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd)]
    pub struct Actcode_SPEC;
    pub type Actcode = crate::EnumBitfieldStruct<u8, Actcode_SPEC>;
    impl Actcode {
        pub const _00000000: Self = Self::new(0);

        pub const _00000001: Self = Self::new(1);

        pub const _00000010: Self = Self::new(2);

        pub const _00000011: Self = Self::new(3);

        pub const _00000000: Self = Self::new(0);

        pub const _00000100: Self = Self::new(4);

        pub const _00000101: Self = Self::new(5);

        pub const _00001000: Self = Self::new(8);
    }
}
#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1Dscdr_SPEC;
impl crate::sealed::RegSpec for Sqch1Dscdr_SPEC {
    type DataType = u32;
}

pub type Sqch1Dscdr = crate::RegValueT<Sqch1Dscdr_SPEC>;

impl Sqch1Dscdr {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<
        0,
        0xffffffff,
        1,
        0,
        u32,
        u32,
        Sqch1Dscdr_SPEC,
        crate::common::RW,
    > {
        crate::common::RegisterField::<
            0,
            0xffffffff,
            1,
            0,
            u32,
            u32,
            Sqch1Dscdr_SPEC,
            crate::common::RW,
        >::from_register(self, 0)
    }
}
impl ::core::default::Default for Sqch1Dscdr {
    #[inline(always)]
    fn default() -> Sqch1Dscdr {
        <crate::RegValueT<Sqch1Dscdr_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscdrL_SPEC;
impl crate::sealed::RegSpec for Sqch1DscdrL_SPEC {
    type DataType = u16;
}

pub type Sqch1DscdrL = crate::RegValueT<Sqch1DscdrL_SPEC>;

impl Sqch1DscdrL {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, Sqch1DscdrL_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,Sqch1DscdrL_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscdrL {
    #[inline(always)]
    fn default() -> Sqch1DscdrL {
        <crate::RegValueT<Sqch1DscdrL_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscdrLl_SPEC;
impl crate::sealed::RegSpec for Sqch1DscdrLl_SPEC {
    type DataType = u8;
}

pub type Sqch1DscdrLl = crate::RegValueT<Sqch1DscdrLl_SPEC>;

impl Sqch1DscdrLl {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch1DscdrLl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch1DscdrLl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscdrLl {
    #[inline(always)]
    fn default() -> Sqch1DscdrLl {
        <crate::RegValueT<Sqch1DscdrLl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscdrLh_SPEC;
impl crate::sealed::RegSpec for Sqch1DscdrLh_SPEC {
    type DataType = u8;
}

pub type Sqch1DscdrLh = crate::RegValueT<Sqch1DscdrLh_SPEC>;

impl Sqch1DscdrLh {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch1DscdrLh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch1DscdrLh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscdrLh {
    #[inline(always)]
    fn default() -> Sqch1DscdrLh {
        <crate::RegValueT<Sqch1DscdrLh_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscdrH_SPEC;
impl crate::sealed::RegSpec for Sqch1DscdrH_SPEC {
    type DataType = u16;
}

pub type Sqch1DscdrH = crate::RegValueT<Sqch1DscdrH_SPEC>;

impl Sqch1DscdrH {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xffff, 1, 0, u16, u16, Sqch1DscdrH_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xffff,1,0,u16,u16,Sqch1DscdrH_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscdrH {
    #[inline(always)]
    fn default() -> Sqch1DscdrH {
        <crate::RegValueT<Sqch1DscdrH_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscdrHl_SPEC;
impl crate::sealed::RegSpec for Sqch1DscdrHl_SPEC {
    type DataType = u8;
}

pub type Sqch1DscdrHl = crate::RegValueT<Sqch1DscdrHl_SPEC>;

impl Sqch1DscdrHl {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch1DscdrHl_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch1DscdrHl_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscdrHl {
    #[inline(always)]
    fn default() -> Sqch1DscdrHl {
        <crate::RegValueT<Sqch1DscdrHl_SPEC> as RegisterValue<_>>::new(0)
    }
}

#[doc(hidden)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Sqch1DscdrHh_SPEC;
impl crate::sealed::RegSpec for Sqch1DscdrHh_SPEC {
    type DataType = u8;
}

pub type Sqch1DscdrHh = crate::RegValueT<Sqch1DscdrHh_SPEC>;

impl Sqch1DscdrHh {
    #[inline(always)]
    pub fn laddr(
        self,
    ) -> crate::common::RegisterField<0, 0xff, 1, 0, u8, u8, Sqch1DscdrHh_SPEC, crate::common::RW>
    {
        crate::common::RegisterField::<0,0xff,1,0,u8,u8,Sqch1DscdrHh_SPEC,crate::common::RW>::from_register(self,0)
    }
}
impl ::core::default::Default for Sqch1DscdrHh {
    #[inline(always)]
    fn default() -> Sqch1DscdrHh {
        <crate::RegValueT<Sqch1DscdrHh_SPEC> as RegisterValue<_>>::new(0)
    }
}
